
F411_ST7735_si4730_receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014e0  0800a004  0800a004  0001a004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4e4  0800b4e4  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4e4  0800b4e4  0001b4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4ec  0800b4ec  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4ec  0800b4ec  0001b4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4f0  0800b4f0  0001b4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800b4f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dbc  20000170  0800b664  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f2c  0800b664  00021f2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cbe7  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048bc  00000000  00000000  0003cd87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  00041648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  00043010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce4b  00000000  00000000  000447a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021dc2  00000000  00000000  000615eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c146  00000000  00000000  000833ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f4f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072ac  00000000  00000000  0011f544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000170 	.word	0x20000170
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009fec 	.word	0x08009fec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000174 	.word	0x20000174
 80001dc:	08009fec 	.word	0x08009fec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_DMA_Init+0x3c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <MX_DMA_Init+0x3c>)
 8000594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_DMA_Init+0x3c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	200f      	movs	r0, #15
 80005ac:	f001 f93d 	bl	800182a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005b0:	200f      	movs	r0, #15
 80005b2:	f001 f956 	bl	8001862 <HAL_NVIC_EnableIRQ>

}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800

080005c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
 80005de:	4b30      	ldr	r3, [pc, #192]	; (80006a0 <MX_GPIO_Init+0xdc>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a2f      	ldr	r2, [pc, #188]	; (80006a0 <MX_GPIO_Init+0xdc>)
 80005e4:	f043 0304 	orr.w	r3, r3, #4
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <MX_GPIO_Init+0xdc>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0304 	and.w	r3, r3, #4
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <MX_GPIO_Init+0xdc>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <MX_GPIO_Init+0xdc>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <MX_GPIO_Init+0xdc>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <MX_GPIO_Init+0xdc>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <MX_GPIO_Init+0xdc>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_GPIO_Init+0xdc>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <MX_GPIO_Init+0xdc>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a1a      	ldr	r2, [pc, #104]	; (80006a0 <MX_GPIO_Init+0xdc>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_GPIO_Init+0xdc>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	2102      	movs	r1, #2
 800064e:	4815      	ldr	r0, [pc, #84]	; (80006a4 <MX_GPIO_Init+0xe0>)
 8000650:	f001 fd90 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_RESET_Pin|LCD_A0_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800065a:	4812      	ldr	r0, [pc, #72]	; (80006a4 <MX_GPIO_Init+0xe0>)
 800065c:	f001 fd8a 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000660:	2304      	movs	r3, #4
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000664:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <MX_GPIO_Init+0xe4>)
 8000676:	f001 fbf9 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|LCD_CS_Pin|LCD_RESET_Pin|LCD_A0_Pin;
 800067a:	f247 0302 	movw	r3, #28674	; 0x7002
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0xe0>)
 8000694:	f001 fbea 	bl	8001e6c <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3728      	adds	r7, #40	; 0x28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020400 	.word	0x40020400
 80006a8:	40020000 	.word	0x40020000

080006ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_I2C1_Init+0x50>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <MX_I2C1_Init+0x54>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_I2C1_Init+0x50>)
 80006b8:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_I2C1_Init+0x58>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_I2C1_Init+0x50>)
 80006ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_I2C1_Init+0x50>)
 80006ea:	f001 fd5d 	bl	80021a8 <HAL_I2C_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f4:	f000 f91e 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000018c 	.word	0x2000018c
 8000700:	40005400 	.word	0x40005400
 8000704:	000186a0 	.word	0x000186a0

08000708 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a19      	ldr	r2, [pc, #100]	; (800078c <HAL_I2C_MspInit+0x84>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d12b      	bne.n	8000782 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <HAL_I2C_MspInit+0x88>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a17      	ldr	r2, [pc, #92]	; (8000790 <HAL_I2C_MspInit+0x88>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <HAL_I2C_MspInit+0x88>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000746:	23c0      	movs	r3, #192	; 0xc0
 8000748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800074a:	2312      	movs	r3, #18
 800074c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000752:	2303      	movs	r3, #3
 8000754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000756:	2304      	movs	r3, #4
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	480c      	ldr	r0, [pc, #48]	; (8000794 <HAL_I2C_MspInit+0x8c>)
 8000762:	f001 fb83 	bl	8001e6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_I2C_MspInit+0x88>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <HAL_I2C_MspInit+0x88>)
 8000770:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_I2C_MspInit+0x88>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000782:	bf00      	nop
 8000784:	3728      	adds	r7, #40	; 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40005400 	.word	0x40005400
 8000790:	40023800 	.word	0x40023800
 8000794:	40020400 	.word	0x40020400

08000798 <Display_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Init() {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af04      	add	r7, sp, #16
	ST7735_Init();
 800079e:	f000 fb2f 	bl	8000e00 <ST7735_Init>
	ST7735_SetRotation(1);
 80007a2:	2001      	movs	r0, #1
 80007a4:	f000 fc5e 	bl	8001064 <ST7735_SetRotation>
	ST7735_FillScreen(ST7735_BLACK);
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fc3f 	bl	800102c <ST7735_FillScreen>
	ST7735_DrawString(15, 0, "FM/AM/SW", Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <Display_Init+0x38>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	9202      	str	r2, [sp, #8]
 80007b4:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 80007b8:	9201      	str	r2, [sp, #4]
 80007ba:	685a      	ldr	r2, [r3, #4]
 80007bc:	9200      	str	r2, [sp, #0]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <Display_Init+0x3c>)
 80007c2:	2100      	movs	r1, #0
 80007c4:	200f      	movs	r0, #15
 80007c6:	f000 fb41 	bl	8000e4c <ST7735_DrawString>
	//HAL_Delay(2000);
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000000 	.word	0x20000000
 80007d4:	0800a004 	.word	0x0800a004

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007dc:	f000 feb4 	bl	8001548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e0:	f000 f81a 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e4:	f7ff feee 	bl	80005c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80007e8:	f7ff fecc 	bl	8000584 <MX_DMA_Init>
  MX_SPI2_Init();
 80007ec:	f000 f8fa 	bl	80009e4 <MX_SPI2_Init>
  MX_I2C1_Init();
 80007f0:	f7ff ff5c 	bl	80006ac <MX_I2C1_Init>
  MX_RTC_Init();
 80007f4:	f000 f8a4 	bl	8000940 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 80007f8:	f007 ff28 	bl	800864c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80007fc:	f000 fde0 	bl	80013c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	Display_Init();
 8000800:	f7ff ffca 	bl	8000798 <Display_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
        printf("Hello World\n\r");
 8000804:	4803      	ldr	r0, [pc, #12]	; (8000814 <main+0x3c>)
 8000806:	f008 ff51 	bl	80096ac <iprintf>
        HAL_Delay(1000);
 800080a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800080e:	f000 ff0d 	bl	800162c <HAL_Delay>
        printf("Hello World\n\r");
 8000812:	e7f7      	b.n	8000804 <main+0x2c>
 8000814:	0800a010 	.word	0x0800a010

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	; 0x50
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	2230      	movs	r2, #48	; 0x30
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f008 fc4a 	bl	80090c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <SystemClock_Config+0xd0>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a28      	ldr	r2, [pc, #160]	; (80008e8 <SystemClock_Config+0xd0>)
 8000846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <SystemClock_Config+0xd0>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	4b23      	ldr	r3, [pc, #140]	; (80008ec <SystemClock_Config+0xd4>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a22      	ldr	r2, [pc, #136]	; (80008ec <SystemClock_Config+0xd4>)
 8000862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b20      	ldr	r3, [pc, #128]	; (80008ec <SystemClock_Config+0xd4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000874:	2305      	movs	r3, #5
 8000876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800087e:	2301      	movs	r3, #1
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000886:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800088a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800088c:	2319      	movs	r3, #25
 800088e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000890:	23c0      	movs	r3, #192	; 0xc0
 8000892:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000894:	2302      	movs	r3, #2
 8000896:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000898:	2304      	movs	r3, #4
 800089a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	4618      	mov	r0, r3
 80008a2:	f003 f843 	bl	800392c <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008ac:	f000 f842 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2302      	movs	r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	2103      	movs	r1, #3
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 faa5 	bl	8003e1c <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008d8:	f000 f82c 	bl	8000934 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80008dc:	f003 fb84 	bl	8003fe8 <HAL_RCC_EnableCSS>
}
 80008e0:	bf00      	nop
 80008e2:	3750      	adds	r7, #80	; 0x50
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
    static uint8_t rc = USBD_OK;

    do {
        rc = CDC_Transmit_FS(ptr, len);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	4619      	mov	r1, r3
 8000902:	68b8      	ldr	r0, [r7, #8]
 8000904:	f007 ff60 	bl	80087c8 <CDC_Transmit_FS>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <_write+0x40>)
 800090e:	701a      	strb	r2, [r3, #0]
    } while (USBD_BUSY == rc);
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <_write+0x40>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d0f1      	beq.n	80008fc <_write+0xc>

    if (USBD_FAIL == rc) {
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <_write+0x40>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b03      	cmp	r3, #3
 800091e:	d101      	bne.n	8000924 <_write+0x34>
        /// NOTE: Should never reach here.
        /// TODO: Handle this error.
        return 0;
 8000920:	2300      	movs	r3, #0
 8000922:	e000      	b.n	8000926 <_write+0x36>
    }
    return len;
 8000924:	687b      	ldr	r3, [r7, #4]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200001e0 	.word	0x200001e0

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_RTC_Init+0x44>)
 8000946:	4a10      	ldr	r2, [pc, #64]	; (8000988 <MX_RTC_Init+0x48>)
 8000948:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_RTC_Init+0x44>)
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_RTC_Init+0x44>)
 8000952:	227f      	movs	r2, #127	; 0x7f
 8000954:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_RTC_Init+0x44>)
 8000958:	22ff      	movs	r2, #255	; 0xff
 800095a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_RTC_Init+0x44>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_RTC_Init+0x44>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_RTC_Init+0x44>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_RTC_Init+0x44>)
 8000970:	f003 fd38 	bl	80043e4 <HAL_RTC_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800097a:	f7ff ffdb 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200001e4 	.word	0x200001e4
 8000988:	40002800 	.word	0x40002800

0800098c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000994:	f107 0308 	add.w	r3, r7, #8
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
 80009a4:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <HAL_RTC_MspInit+0x50>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d111      	bne.n	80009d4 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009b0:	2302      	movs	r3, #2
 80009b2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80009b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	4618      	mov	r0, r3
 80009c0:	f003 fc20 	bl	8004204 <HAL_RCCEx_PeriphCLKConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80009ca:	f7ff ffb3 	bl	8000934 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009ce:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <HAL_RTC_MspInit+0x54>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80009d4:	bf00      	nop
 80009d6:	3720      	adds	r7, #32
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40002800 	.word	0x40002800
 80009e0:	42470e3c 	.word	0x42470e3c

080009e4 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_SPI2_Init+0x64>)
 80009ea:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <MX_SPI2_Init+0x68>)
 80009ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_SPI2_Init+0x64>)
 80009f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_SPI2_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_SPI2_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_SPI2_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_SPI2_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_SPI2_Init+0x64>)
 8000a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_SPI2_Init+0x64>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <MX_SPI2_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_SPI2_Init+0x64>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <MX_SPI2_Init+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_SPI2_Init+0x64>)
 8000a30:	220a      	movs	r2, #10
 8000a32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_SPI2_Init+0x64>)
 8000a36:	f003 fdcf 	bl	80045d8 <HAL_SPI_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a40:	f7ff ff78 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000204 	.word	0x20000204
 8000a4c:	40003800 	.word	0x40003800

08000a50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a30      	ldr	r2, [pc, #192]	; (8000b30 <HAL_SPI_MspInit+0xe0>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d15a      	bne.n	8000b28 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <HAL_SPI_MspInit+0xe4>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a2e      	ldr	r2, [pc, #184]	; (8000b34 <HAL_SPI_MspInit+0xe4>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <HAL_SPI_MspInit+0xe4>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <HAL_SPI_MspInit+0xe4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a27      	ldr	r2, [pc, #156]	; (8000b34 <HAL_SPI_MspInit+0xe4>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <HAL_SPI_MspInit+0xe4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000aaa:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000abc:	2305      	movs	r3, #5
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	481c      	ldr	r0, [pc, #112]	; (8000b38 <HAL_SPI_MspInit+0xe8>)
 8000ac8:	f001 f9d0 	bl	8001e6c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <HAL_SPI_MspInit+0xec>)
 8000ace:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <HAL_SPI_MspInit+0xf0>)
 8000ad0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <HAL_SPI_MspInit+0xec>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_SPI_MspInit+0xec>)
 8000ada:	2240      	movs	r2, #64	; 0x40
 8000adc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <HAL_SPI_MspInit+0xec>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_SPI_MspInit+0xec>)
 8000ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aea:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <HAL_SPI_MspInit+0xec>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_SPI_MspInit+0xec>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_SPI_MspInit+0xec>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_SPI_MspInit+0xec>)
 8000b00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b04:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_SPI_MspInit+0xec>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000b0c:	480b      	ldr	r0, [pc, #44]	; (8000b3c <HAL_SPI_MspInit+0xec>)
 8000b0e:	f000 fec3 	bl	8001898 <HAL_DMA_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000b18:	f7ff ff0c 	bl	8000934 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_SPI_MspInit+0xec>)
 8000b20:	649a      	str	r2, [r3, #72]	; 0x48
 8000b22:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_SPI_MspInit+0xec>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	; 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40003800 	.word	0x40003800
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	2000025c 	.word	0x2000025c
 8000b40:	40026070 	.word	0x40026070

08000b44 <ST7735_GPIO_Init>:
static void ST7735_ExecuteCommandList(const uint8_t *addr);
//static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);

static void ST7735_GPIO_Init(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <ST7735_Reset>:

static void ST7735_Reset()
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	TFT_RES_L();
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <ST7735_Reset+0x28>)
 8000b60:	f001 fb08 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000b64:	2014      	movs	r0, #20
 8000b66:	f000 fd61 	bl	800162c <HAL_Delay>
	TFT_RES_H();
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <ST7735_Reset+0x28>)
 8000b72:	f001 faff 	bl	8002174 <HAL_GPIO_WritePin>
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40020400 	.word	0x40020400

08000b80 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
	TFT_DC_C();
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b90:	4806      	ldr	r0, [pc, #24]	; (8000bac <ST7735_WriteCommand+0x2c>)
 8000b92:	f001 faef 	bl	8002174 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000b96:	1df9      	adds	r1, r7, #7
 8000b98:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <ST7735_WriteCommand+0x30>)
 8000ba0:	f003 fda3 	bl	80046ea <HAL_SPI_Transmit>
#endif
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	20000204 	.word	0x20000204

08000bb4 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	TFT_DC_D();
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bc4:	4807      	ldr	r0, [pc, #28]	; (8000be4 <ST7735_WriteData+0x30>)
 8000bc6:	f001 fad5 	bl	8002174 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
	while(hspi2.State == HAL_SPI_STATE_BUSY_TX);
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <ST7735_WriteData+0x34>)
 8000bd6:	f003 fd88 	bl	80046ea <HAL_SPI_Transmit>
#endif
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40020400 	.word	0x40020400
 8000be8:	20000204 	.word	0x20000204

08000bec <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 8000bfe:	e034      	b.n	8000c6a <ST7735_ExecuteCommandList+0x7e>
    {
    	uint8_t cmd = *addr++;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000c0a:	7afb      	ldrb	r3, [r7, #11]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ffb7 	bl	8000b80 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000c1c:	7abb      	ldrb	r3, [r7, #10]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c24:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000c26:	7abb      	ldrb	r3, [r7, #10]
 8000c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c2c:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 8000c2e:	7abb      	ldrb	r3, [r7, #10]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d008      	beq.n	8000c46 <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000c34:	7abb      	ldrb	r3, [r7, #10]
 8000c36:	4619      	mov	r1, r3
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ffbb 	bl	8000bb4 <ST7735_WriteData>
            addr += numArgs;
 8000c3e:	7abb      	ldrb	r3, [r7, #10]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	4413      	add	r3, r2
 8000c44:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 8000c46:	89bb      	ldrh	r3, [r7, #12]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00e      	beq.n	8000c6a <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000c56:	89bb      	ldrh	r3, [r7, #12]
 8000c58:	2bff      	cmp	r3, #255	; 0xff
 8000c5a:	d102      	bne.n	8000c62 <ST7735_ExecuteCommandList+0x76>
 8000c5c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c60:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000c62:	89bb      	ldrh	r3, [r7, #12]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fce1 	bl	800162c <HAL_Delay>
    while(numCommands--)
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	1e5a      	subs	r2, r3, #1
 8000c6e:	73fa      	strb	r2, [r7, #15]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1c5      	bne.n	8000c00 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4604      	mov	r4, r0
 8000c88:	4608      	mov	r0, r1
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4623      	mov	r3, r4
 8000c90:	71fb      	strb	r3, [r7, #7]
 8000c92:	4603      	mov	r3, r0
 8000c94:	71bb      	strb	r3, [r7, #6]
 8000c96:	460b      	mov	r3, r1
 8000c98:	717b      	strb	r3, [r7, #5]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000c9e:	202a      	movs	r0, #42	; 0x2a
 8000ca0:	f7ff ff6e 	bl	8000b80 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	733b      	strb	r3, [r7, #12]
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <ST7735_SetAddressWindow+0x88>)
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	4413      	add	r3, r2
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	737b      	strb	r3, [r7, #13]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73bb      	strb	r3, [r7, #14]
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <ST7735_SetAddressWindow+0x88>)
 8000cba:	781a      	ldrb	r2, [r3, #0]
 8000cbc:	797b      	ldrb	r3, [r7, #5]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	2104      	movs	r1, #4
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff72 	bl	8000bb4 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000cd0:	202b      	movs	r0, #43	; 0x2b
 8000cd2:	f7ff ff55 	bl	8000b80 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <ST7735_SetAddressWindow+0x8c>)
 8000cd8:	781a      	ldrb	r2, [r3, #0]
 8000cda:	79bb      	ldrb	r3, [r7, #6]
 8000cdc:	4413      	add	r3, r2
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <ST7735_SetAddressWindow+0x8c>)
 8000ce4:	781a      	ldrb	r2, [r3, #0]
 8000ce6:	793b      	ldrb	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	2104      	movs	r1, #4
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff5d 	bl	8000bb4 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000cfa:	202c      	movs	r0, #44	; 0x2c
 8000cfc:	f7ff ff40 	bl	8000b80 <ST7735_WriteCommand>
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd90      	pop	{r4, r7, pc}
 8000d08:	200002bd 	.word	0x200002bd
 8000d0c:	200002be 	.word	0x200002be

08000d10 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000d10:	b082      	sub	sp, #8
 8000d12:	b590      	push	{r4, r7, lr}
 8000d14:	b089      	sub	sp, #36	; 0x24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	80fb      	strh	r3, [r7, #6]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	80bb      	strh	r3, [r7, #4]
 8000d22:	4613      	mov	r3, r2
 8000d24:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	b2d8      	uxtb	r0, r3
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
 8000d2c:	b2d9      	uxtb	r1, r3
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d36:	4413      	add	r3, r2
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	b2dc      	uxtb	r4, r3
 8000d3e:	88bb      	ldrh	r3, [r7, #4]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000d46:	4413      	add	r3, r2
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	4622      	mov	r2, r4
 8000d50:	f7ff ff96 	bl	8000c80 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
 8000d58:	e043      	b.n	8000de2 <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch - 32) * font.height + i];
 8000d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	3b20      	subs	r3, #32
 8000d60:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000d64:	fb01 f303 	mul.w	r3, r1, r3
 8000d68:	4619      	mov	r1, r3
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	440b      	add	r3, r1
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	4413      	add	r3, r2
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
 8000d7a:	e029      	b.n	8000dd0 <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d00e      	beq.n	8000daa <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000d8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000d8e:	0a1b      	lsrs	r3, r3, #8
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	743b      	strb	r3, [r7, #16]
 8000d96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	2102      	movs	r1, #2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff06 	bl	8000bb4 <ST7735_WriteData>
 8000da8:	e00f      	b.n	8000dca <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000daa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000dae:	0a1b      	lsrs	r3, r3, #8
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	733b      	strb	r3, [r7, #12]
 8000db6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fef5 	bl	8000bb4 <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d3cf      	bcc.n	8000d7c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	3301      	adds	r3, #1
 8000de0:	61fb      	str	r3, [r7, #28]
 8000de2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000de6:	461a      	mov	r2, r3
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d3b5      	bcc.n	8000d5a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000dee:	bf00      	nop
 8000df0:	bf00      	nop
 8000df2:	3724      	adds	r7, #36	; 0x24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000dfa:	b002      	add	sp, #8
 8000dfc:	4770      	bx	lr
	...

08000e00 <ST7735_Init>:

void ST7735_Init()
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	ST7735_GPIO_Init();
 8000e04:	f7ff fe9e 	bl	8000b44 <ST7735_GPIO_Init>
	TFT_CS_L();
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e0e:	480b      	ldr	r0, [pc, #44]	; (8000e3c <ST7735_Init+0x3c>)
 8000e10:	f001 f9b0 	bl	8002174 <HAL_GPIO_WritePin>
    ST7735_Reset();
 8000e14:	f7ff fe9e 	bl	8000b54 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000e18:	4809      	ldr	r0, [pc, #36]	; (8000e40 <ST7735_Init+0x40>)
 8000e1a:	f7ff fee7 	bl	8000bec <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000e1e:	4809      	ldr	r0, [pc, #36]	; (8000e44 <ST7735_Init+0x44>)
 8000e20:	f7ff fee4 	bl	8000bec <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000e24:	4808      	ldr	r0, [pc, #32]	; (8000e48 <ST7735_Init+0x48>)
 8000e26:	f7ff fee1 	bl	8000bec <ST7735_ExecuteCommandList>
    TFT_CS_H();
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <ST7735_Init+0x3c>)
 8000e32:	f001 f99f 	bl	8002174 <HAL_GPIO_WritePin>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	0800b3b4 	.word	0x0800b3b4
 8000e44:	0800b3f0 	.word	0x0800b3f0
 8000e48:	0800b400 	.word	0x0800b400

08000e4c <ST7735_DrawString>:

    TFT_CS_H();
}

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af04      	add	r7, sp, #16
 8000e54:	603a      	str	r2, [r7, #0]
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	4603      	mov	r3, r0
 8000e5a:	80fb      	strh	r3, [r7, #6]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	80bb      	strh	r3, [r7, #4]
	TFT_CS_L();
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e66:	4825      	ldr	r0, [pc, #148]	; (8000efc <ST7735_DrawString+0xb0>)
 8000e68:	f001 f984 	bl	8002174 <HAL_GPIO_WritePin>

    while(*str)
 8000e6c:	e033      	b.n	8000ed6 <ST7735_DrawString+0x8a>
    {
        if(x + font.width >= _width)
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	7d3a      	ldrb	r2, [r7, #20]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a22      	ldr	r2, [pc, #136]	; (8000f00 <ST7735_DrawString+0xb4>)
 8000e76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	db16      	blt.n	8000eac <ST7735_DrawString+0x60>
        {
            x = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000e82:	7d7b      	ldrb	r3, [r7, #21]
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	88bb      	ldrh	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height)
 8000e8c:	88bb      	ldrh	r3, [r7, #4]
 8000e8e:	7d7a      	ldrb	r2, [r7, #21]
 8000e90:	4413      	add	r3, r2
 8000e92:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <ST7735_DrawString+0xb8>)
 8000e94:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	da21      	bge.n	8000ee0 <ST7735_DrawString+0x94>
            {
                break;
            }

            if(*str == ' ')
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b20      	cmp	r3, #32
 8000ea2:	d103      	bne.n	8000eac <ST7735_DrawString+0x60>
            {
                // skip spaces in the beginning of the new line
                str++;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	603b      	str	r3, [r7, #0]
                continue;
 8000eaa:	e014      	b.n	8000ed6 <ST7735_DrawString+0x8a>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	781a      	ldrb	r2, [r3, #0]
 8000eb0:	88b9      	ldrh	r1, [r7, #4]
 8000eb2:	88f8      	ldrh	r0, [r7, #6]
 8000eb4:	8c3b      	ldrh	r3, [r7, #32]
 8000eb6:	9302      	str	r3, [sp, #8]
 8000eb8:	8bbb      	ldrh	r3, [r7, #28]
 8000eba:	9301      	str	r3, [sp, #4]
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	f7ff ff25 	bl	8000d10 <ST7735_WriteChar>
        x += font.width;
 8000ec6:	7d3b      	ldrb	r3, [r7, #20]
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	4413      	add	r3, r2
 8000ece:	80fb      	strh	r3, [r7, #6]
        str++;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	603b      	str	r3, [r7, #0]
    while(*str)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1c7      	bne.n	8000e6e <ST7735_DrawString+0x22>
 8000ede:	e000      	b.n	8000ee2 <ST7735_DrawString+0x96>
                break;
 8000ee0:	bf00      	nop
    }
    TFT_CS_H();
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <ST7735_DrawString+0xb0>)
 8000eea:	f001 f943 	bl	8002174 <HAL_GPIO_WritePin>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ef8:	b002      	add	sp, #8
 8000efa:	4770      	bx	lr
 8000efc:	40020400 	.word	0x40020400
 8000f00:	2000000e 	.word	0x2000000e
 8000f04:	2000000c 	.word	0x2000000c

08000f08 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4604      	mov	r4, r0
 8000f10:	4608      	mov	r0, r1
 8000f12:	4611      	mov	r1, r2
 8000f14:	461a      	mov	r2, r3
 8000f16:	4623      	mov	r3, r4
 8000f18:	80fb      	strh	r3, [r7, #6]
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80bb      	strh	r3, [r7, #4]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	807b      	strh	r3, [r7, #2]
 8000f22:	4613      	mov	r3, r2
 8000f24:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= _width) || (y >= _height)) return;
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	4a3c      	ldr	r2, [pc, #240]	; (800101c <ST7735_FillRectangle+0x114>)
 8000f2a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	da6f      	bge.n	8001012 <ST7735_FillRectangle+0x10a>
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	4a3a      	ldr	r2, [pc, #232]	; (8001020 <ST7735_FillRectangle+0x118>)
 8000f36:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	da69      	bge.n	8001012 <ST7735_FillRectangle+0x10a>
    if((x + w - 1) >= _width) w = _width - x;
 8000f3e:	88fa      	ldrh	r2, [r7, #6]
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a35      	ldr	r2, [pc, #212]	; (800101c <ST7735_FillRectangle+0x114>)
 8000f46:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	dd06      	ble.n	8000f5c <ST7735_FillRectangle+0x54>
 8000f4e:	4b33      	ldr	r3, [pc, #204]	; (800101c <ST7735_FillRectangle+0x114>)
 8000f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000f5c:	88ba      	ldrh	r2, [r7, #4]
 8000f5e:	883b      	ldrh	r3, [r7, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a2f      	ldr	r2, [pc, #188]	; (8001020 <ST7735_FillRectangle+0x118>)
 8000f64:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	dd06      	ble.n	8000f7a <ST7735_FillRectangle+0x72>
 8000f6c:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <ST7735_FillRectangle+0x118>)
 8000f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	88bb      	ldrh	r3, [r7, #4]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f80:	4828      	ldr	r0, [pc, #160]	; (8001024 <ST7735_FillRectangle+0x11c>)
 8000f82:	f001 f8f7 	bl	8002174 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	b2d8      	uxtb	r0, r3
 8000f8a:	88bb      	ldrh	r3, [r7, #4]
 8000f8c:	b2d9      	uxtb	r1, r3
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	4413      	add	r3, r2
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	b2dc      	uxtb	r4, r3
 8000f9e:	88bb      	ldrh	r3, [r7, #4]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	883b      	ldrh	r3, [r7, #0]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	3b01      	subs	r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	4622      	mov	r2, r4
 8000fb0:	f7ff fe66 	bl	8000c80 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000fb4:	8c3b      	ldrh	r3, [r7, #32]
 8000fb6:	0a1b      	lsrs	r3, r3, #8
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	733b      	strb	r3, [r7, #12]
 8000fbe:	8c3b      	ldrh	r3, [r7, #32]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	737b      	strb	r3, [r7, #13]
    TFT_DC_D();
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fca:	4816      	ldr	r0, [pc, #88]	; (8001024 <ST7735_FillRectangle+0x11c>)
 8000fcc:	f001 f8d2 	bl	8002174 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8000fd0:	883b      	ldrh	r3, [r7, #0]
 8000fd2:	80bb      	strh	r3, [r7, #4]
 8000fd4:	e013      	b.n	8000ffe <ST7735_FillRectangle+0xf6>
    {
        for(x = w; x > 0; x--)
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	80fb      	strh	r3, [r7, #6]
 8000fda:	e00a      	b.n	8000ff2 <ST7735_FillRectangle+0xea>
        {
#ifdef USE_SPI_DMA
        	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
        	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
        	HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000fdc:	f107 010c 	add.w	r1, r7, #12
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	4810      	ldr	r0, [pc, #64]	; (8001028 <ST7735_FillRectangle+0x120>)
 8000fe8:	f003 fb7f 	bl	80046ea <HAL_SPI_Transmit>
        for(x = w; x > 0; x--)
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	80fb      	strh	r3, [r7, #6]
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f1      	bne.n	8000fdc <ST7735_FillRectangle+0xd4>
    for(y = h; y > 0; y--)
 8000ff8:	88bb      	ldrh	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	80bb      	strh	r3, [r7, #4]
 8000ffe:	88bb      	ldrh	r3, [r7, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1e8      	bne.n	8000fd6 <ST7735_FillRectangle+0xce>
#endif
        }
    }
    TFT_CS_H();
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <ST7735_FillRectangle+0x11c>)
 800100c:	f001 f8b2 	bl	8002174 <HAL_GPIO_WritePin>
 8001010:	e000      	b.n	8001014 <ST7735_FillRectangle+0x10c>
    if((x >= _width) || (y >= _height)) return;
 8001012:	bf00      	nop
}
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	bf00      	nop
 800101c:	2000000e 	.word	0x2000000e
 8001020:	2000000c 	.word	0x2000000c
 8001024:	40020400 	.word	0x40020400
 8001028:	20000204 	.word	0x20000204

0800102c <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af02      	add	r7, sp, #8
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <ST7735_FillScreen+0x30>)
 8001038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103c:	b29a      	uxth	r2, r3
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <ST7735_FillScreen+0x34>)
 8001040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001044:	b299      	uxth	r1, r3
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	460b      	mov	r3, r1
 800104c:	2100      	movs	r1, #0
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff ff5a 	bl	8000f08 <ST7735_FillRectangle>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	2000000e 	.word	0x2000000e
 8001060:	2000000c 	.word	0x2000000c

08001064 <ST7735_SetRotation>:
/***************************************************************************************
** Function name:           setRotation
** Description:             rotate the screen orientation m = 0-3
***************************************************************************************/
void ST7735_SetRotation(uint8_t m)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  _value_rotation = m % 4;
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b4a      	ldr	r3, [pc, #296]	; (80011a0 <ST7735_SetRotation+0x13c>)
 8001078:	701a      	strb	r2, [r3, #0]

  TFT_CS_L();
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001080:	4848      	ldr	r0, [pc, #288]	; (80011a4 <ST7735_SetRotation+0x140>)
 8001082:	f001 f877 	bl	8002174 <HAL_GPIO_WritePin>

  ST7735_WriteCommand(ST7735_MADCTL);
 8001086:	2036      	movs	r0, #54	; 0x36
 8001088:	f7ff fd7a 	bl	8000b80 <ST7735_WriteCommand>

  switch (_value_rotation)
 800108c:	4b44      	ldr	r3, [pc, #272]	; (80011a0 <ST7735_SetRotation+0x13c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b03      	cmp	r3, #3
 8001092:	d87b      	bhi.n	800118c <ST7735_SetRotation+0x128>
 8001094:	a201      	add	r2, pc, #4	; (adr r2, 800109c <ST7735_SetRotation+0x38>)
 8001096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109a:	bf00      	nop
 800109c:	080010ad 	.word	0x080010ad
 80010a0:	080010e9 	.word	0x080010e9
 80010a4:	08001125 	.word	0x08001125
 80010a8:	08001151 	.word	0x08001151
  {
    case 0:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[1] | _data_rotation[3]);
 80010ac:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <ST7735_SetRotation+0x144>)
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	4b3d      	ldr	r3, [pc, #244]	; (80011a8 <ST7735_SetRotation+0x144>)
 80010b2:	785b      	ldrb	r3, [r3, #1]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <ST7735_SetRotation+0x144>)
 80010ba:	78db      	ldrb	r3, [r3, #3]
 80010bc:	4313      	orrs	r3, r2
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	73fb      	strb	r3, [r7, #15]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 80010c2:	f107 030f 	add.w	r3, r7, #15
 80010c6:	2101      	movs	r1, #1
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fd73 	bl	8000bb4 <ST7735_WriteData>
        _width  = ST7735_WIDTH;
 80010ce:	4b37      	ldr	r3, [pc, #220]	; (80011ac <ST7735_SetRotation+0x148>)
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	801a      	strh	r2, [r3, #0]
        _height = ST7735_HEIGHT;
 80010d4:	4b36      	ldr	r3, [pc, #216]	; (80011b0 <ST7735_SetRotation+0x14c>)
 80010d6:	22a0      	movs	r2, #160	; 0xa0
 80010d8:	801a      	strh	r2, [r3, #0]
        _xstart = ST7735_XSTART;
 80010da:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <ST7735_SetRotation+0x150>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
		_ystart = ST7735_YSTART;
 80010e0:	4b35      	ldr	r3, [pc, #212]	; (80011b8 <ST7735_SetRotation+0x154>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
    }
     break;
 80010e6:	e051      	b.n	800118c <ST7735_SetRotation+0x128>
    case 1:
    {
    	uint8_t d_r = (_data_rotation[1] | _data_rotation[2] | _data_rotation[3]);
 80010e8:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <ST7735_SetRotation+0x144>)
 80010ea:	785a      	ldrb	r2, [r3, #1]
 80010ec:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <ST7735_SetRotation+0x144>)
 80010ee:	789b      	ldrb	r3, [r3, #2]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <ST7735_SetRotation+0x144>)
 80010f6:	78db      	ldrb	r3, [r3, #3]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	73bb      	strb	r3, [r7, #14]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 80010fe:	f107 030e 	add.w	r3, r7, #14
 8001102:	2101      	movs	r1, #1
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fd55 	bl	8000bb4 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <ST7735_SetRotation+0x148>)
 800110c:	22a0      	movs	r2, #160	; 0xa0
 800110e:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 8001110:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <ST7735_SetRotation+0x14c>)
 8001112:	2280      	movs	r2, #128	; 0x80
 8001114:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 8001116:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <ST7735_SetRotation+0x150>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 800111c:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <ST7735_SetRotation+0x154>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
    }
      break;
 8001122:	e033      	b.n	800118c <ST7735_SetRotation+0x128>
    case 2:
    {
    	uint8_t d_r = _data_rotation[3];
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <ST7735_SetRotation+0x144>)
 8001126:	78db      	ldrb	r3, [r3, #3]
 8001128:	737b      	strb	r3, [r7, #13]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 800112a:	f107 030d 	add.w	r3, r7, #13
 800112e:	2101      	movs	r1, #1
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fd3f 	bl	8000bb4 <ST7735_WriteData>
    	_width  = ST7735_WIDTH;
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <ST7735_SetRotation+0x148>)
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_HEIGHT;
 800113c:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <ST7735_SetRotation+0x14c>)
 800113e:	22a0      	movs	r2, #160	; 0xa0
 8001140:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_XSTART;
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <ST7735_SetRotation+0x150>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_YSTART;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <ST7735_SetRotation+0x154>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
    }
      break;
 800114e:	e01d      	b.n	800118c <ST7735_SetRotation+0x128>
    case 3:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[2] | _data_rotation[3]);
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <ST7735_SetRotation+0x144>)
 8001152:	781a      	ldrb	r2, [r3, #0]
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <ST7735_SetRotation+0x144>)
 8001156:	789b      	ldrb	r3, [r3, #2]
 8001158:	4313      	orrs	r3, r2
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <ST7735_SetRotation+0x144>)
 800115e:	78db      	ldrb	r3, [r3, #3]
 8001160:	4313      	orrs	r3, r2
 8001162:	b2db      	uxtb	r3, r3
 8001164:	733b      	strb	r3, [r7, #12]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	2101      	movs	r1, #1
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fd21 	bl	8000bb4 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <ST7735_SetRotation+0x148>)
 8001174:	22a0      	movs	r2, #160	; 0xa0
 8001176:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <ST7735_SetRotation+0x14c>)
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <ST7735_SetRotation+0x150>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <ST7735_SetRotation+0x154>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
    }
      break;
 800118a:	bf00      	nop
  }
  TFT_CS_H();
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001192:	4804      	ldr	r0, [pc, #16]	; (80011a4 <ST7735_SetRotation+0x140>)
 8001194:	f000 ffee 	bl	8002174 <HAL_GPIO_WritePin>
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200002bc 	.word	0x200002bc
 80011a4:	40020400 	.word	0x40020400
 80011a8:	20000008 	.word	0x20000008
 80011ac:	2000000e 	.word	0x2000000e
 80011b0:	2000000c 	.word	0x2000000c
 80011b4:	200002bd 	.word	0x200002bd
 80011b8:	200002be 	.word	0x200002be

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_MspInit+0x4c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_MspInit+0x4c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001210:	f002 ffdc 	bl	80041cc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x8>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f000 f9c6 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <DMA1_Stream4_IRQHandler+0x10>)
 800126a:	f000 fbc3 	bl	80019f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000025c 	.word	0x2000025c

08001278 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <OTG_FS_IRQHandler+0x10>)
 800127e:	f001 fa27 	bl	80026d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200017f0 	.word	0x200017f0

0800128c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	e00a      	b.n	80012b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800129e:	f3af 8000 	nop.w
 80012a2:	4601      	mov	r1, r0
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	60ba      	str	r2, [r7, #8]
 80012aa:	b2ca      	uxtb	r2, r1
 80012ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbf0      	blt.n	800129e <_read+0x12>
	}

return len;
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
	return -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ee:	605a      	str	r2, [r3, #4]
	return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <_isatty>:

int _isatty(int file)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
	return 1;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
	return 0;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001338:	4a14      	ldr	r2, [pc, #80]	; (800138c <_sbrk+0x5c>)
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <_sbrk+0x60>)
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <_sbrk+0x64>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <_sbrk+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	429a      	cmp	r2, r3
 800135e:	d207      	bcs.n	8001370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001360:	f007 fe84 	bl	800906c <__errno>
 8001364:	4603      	mov	r3, r0
 8001366:	220c      	movs	r2, #12
 8001368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	e009      	b.n	8001384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <_sbrk+0x64>)
 8001380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20020000 	.word	0x20020000
 8001390:	00000400 	.word	0x00000400
 8001394:	200002c0 	.word	0x200002c0
 8001398:	20001f30 	.word	0x20001f30

0800139c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <SystemInit+0x20>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a6:	4a05      	ldr	r2, [pc, #20]	; (80013bc <SystemInit+0x20>)
 80013a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	; 0x30
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	2224      	movs	r2, #36	; 0x24
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f007 fe76 	bl	80090c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013dc:	4b21      	ldr	r3, [pc, #132]	; (8001464 <MX_TIM2_Init+0xa4>)
 80013de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <MX_TIM2_Init+0xa4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <MX_TIM2_Init+0xa4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <MX_TIM2_Init+0xa4>)
 80013f2:	f04f 32ff 	mov.w	r2, #4294967295
 80013f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <MX_TIM2_Init+0xa4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <MX_TIM2_Init+0xa4>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001404:	2301      	movs	r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800140c:	2301      	movs	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800141c:	2301      	movs	r3, #1
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	4619      	mov	r1, r3
 800142e:	480d      	ldr	r0, [pc, #52]	; (8001464 <MX_TIM2_Init+0xa4>)
 8001430:	f003 fb62 	bl	8004af8 <HAL_TIM_Encoder_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800143a:	f7ff fa7b 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	4619      	mov	r1, r3
 800144a:	4806      	ldr	r0, [pc, #24]	; (8001464 <MX_TIM2_Init+0xa4>)
 800144c:	f003 fc7a 	bl	8004d44 <HAL_TIMEx_MasterConfigSynchronization>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001456:	f7ff fa6d 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	3730      	adds	r7, #48	; 0x30
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200002c4 	.word	0x200002c4

08001468 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001488:	d12b      	bne.n	80014e2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <HAL_TIM_Encoder_MspInit+0x84>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a16      	ldr	r2, [pc, #88]	; (80014ec <HAL_TIM_Encoder_MspInit+0x84>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <HAL_TIM_Encoder_MspInit+0x84>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_TIM_Encoder_MspInit+0x84>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a0f      	ldr	r2, [pc, #60]	; (80014ec <HAL_TIM_Encoder_MspInit+0x84>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <HAL_TIM_Encoder_MspInit+0x84>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014c2:	2303      	movs	r3, #3
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014d2:	2301      	movs	r3, #1
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4804      	ldr	r0, [pc, #16]	; (80014f0 <HAL_TIM_Encoder_MspInit+0x88>)
 80014de:	f000 fcc5 	bl	8001e6c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	; 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020000 	.word	0x40020000

080014f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800152c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f8:	480d      	ldr	r0, [pc, #52]	; (8001530 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014fa:	490e      	ldr	r1, [pc, #56]	; (8001534 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014fc:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001510:	4c0b      	ldr	r4, [pc, #44]	; (8001540 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800151e:	f7ff ff3d 	bl	800139c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001522:	f007 fda9 	bl	8009078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001526:	f7ff f957 	bl	80007d8 <main>
  bx  lr    
 800152a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800152c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001538:	0800b4f4 	.word	0x0800b4f4
  ldr r2, =_sbss
 800153c:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8001540:	20001f2c 	.word	0x20001f2c

08001544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC_IRQHandler>
	...

08001548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <HAL_Init+0x40>)
 8001552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001556:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_Init+0x40>)
 800155e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001562:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_Init+0x40>)
 800156a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 f94f 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001576:	200f      	movs	r0, #15
 8001578:	f000 f808 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157c:	f7ff fe1e 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023c00 	.word	0x40023c00

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x54>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x58>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f967 	bl	800187e <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00e      	b.n	80015d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d80a      	bhi.n	80015d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f000 f92f 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <HAL_InitTick+0x5c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000010 	.word	0x20000010
 80015e4:	20000018 	.word	0x20000018
 80015e8:	20000014 	.word	0x20000014

080015ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x20>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x24>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <HAL_IncTick+0x24>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000018 	.word	0x20000018
 8001610:	2000030c 	.word	0x2000030c

08001614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return uwTick;
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <HAL_GetTick+0x14>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	2000030c 	.word	0x2000030c

0800162c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff ffee 	bl	8001614 <HAL_GetTick>
 8001638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001644:	d005      	beq.n	8001652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_Delay+0x44>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001652:	bf00      	nop
 8001654:	f7ff ffde 	bl	8001614 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	429a      	cmp	r2, r3
 8001662:	d8f7      	bhi.n	8001654 <HAL_Delay+0x28>
  {
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000018 	.word	0x20000018

08001674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	db0b      	blt.n	8001702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	4907      	ldr	r1, [pc, #28]	; (8001710 <__NVIC_EnableIRQ+0x38>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	2001      	movs	r0, #1
 80016fa:	fa00 f202 	lsl.w	r2, r0, r2
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff8e 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff29 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff3e 	bl	80016bc <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff8e 	bl	8001768 <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5d 	bl	8001714 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff31 	bl	80016d8 <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa2 	bl	80017d0 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff feb6 	bl	8001614 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e099      	b.n	80019e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d4:	e00f      	b.n	80018f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018d6:	f7ff fe9d 	bl	8001614 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d908      	bls.n	80018f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2220      	movs	r2, #32
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2203      	movs	r2, #3
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e078      	b.n	80019e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1e8      	bne.n	80018d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <HAL_DMA_Init+0x158>)
 8001910:	4013      	ands	r3, r2
 8001912:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001922:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800192e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4313      	orrs	r3, r2
 8001946:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	2b04      	cmp	r3, #4
 800194e:	d107      	bne.n	8001960 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	4313      	orrs	r3, r2
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4313      	orrs	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f023 0307 	bic.w	r3, r3, #7
 8001976:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	4313      	orrs	r3, r2
 8001980:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	2b04      	cmp	r3, #4
 8001988:	d117      	bne.n	80019ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4313      	orrs	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00e      	beq.n	80019ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f9e9 	bl	8001d74 <DMA_CheckFifoParam>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2240      	movs	r2, #64	; 0x40
 80019ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019b6:	2301      	movs	r3, #1
 80019b8:	e016      	b.n	80019e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f9a0 	bl	8001d08 <DMA_CalcBaseAndBitshift>
 80019c8:	4603      	mov	r3, r0
 80019ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	223f      	movs	r2, #63	; 0x3f
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	f010803f 	.word	0xf010803f

080019f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a00:	4b8e      	ldr	r3, [pc, #568]	; (8001c3c <HAL_DMA_IRQHandler+0x248>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a8e      	ldr	r2, [pc, #568]	; (8001c40 <HAL_DMA_IRQHandler+0x24c>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0a9b      	lsrs	r3, r3, #10
 8001a0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1e:	2208      	movs	r2, #8
 8001a20:	409a      	lsls	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d01a      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0204 	bic.w	r2, r2, #4
 8001a46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	2208      	movs	r2, #8
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a64:	2201      	movs	r2, #1
 8001a66:	409a      	lsls	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d012      	beq.n	8001a96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00b      	beq.n	8001a96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a82:	2201      	movs	r2, #1
 8001a84:	409a      	lsls	r2, r3
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8e:	f043 0202 	orr.w	r2, r3, #2
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d012      	beq.n	8001acc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00b      	beq.n	8001acc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab8:	2204      	movs	r2, #4
 8001aba:	409a      	lsls	r2, r3
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac4:	f043 0204 	orr.w	r2, r3, #4
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad0:	2210      	movs	r2, #16
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d043      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d03c      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aee:	2210      	movs	r2, #16
 8001af0:	409a      	lsls	r2, r3
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d018      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d108      	bne.n	8001b24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d024      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	4798      	blx	r3
 8001b22:	e01f      	b.n	8001b64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d01b      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
 8001b34:	e016      	b.n	8001b64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d107      	bne.n	8001b54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0208 	bic.w	r2, r2, #8
 8001b52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b68:	2220      	movs	r2, #32
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 808f 	beq.w	8001c94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 8087 	beq.w	8001c94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b05      	cmp	r3, #5
 8001b9c:	d136      	bne.n	8001c0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0216 	bic.w	r2, r2, #22
 8001bac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695a      	ldr	r2, [r3, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d103      	bne.n	8001bce <HAL_DMA_IRQHandler+0x1da>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d007      	beq.n	8001bde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0208 	bic.w	r2, r2, #8
 8001bdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be2:	223f      	movs	r2, #63	; 0x3f
 8001be4:	409a      	lsls	r2, r3
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d07e      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	4798      	blx	r3
        }
        return;
 8001c0a:	e079      	b.n	8001d00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d01d      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10d      	bne.n	8001c44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d031      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	4798      	blx	r3
 8001c38:	e02c      	b.n	8001c94 <HAL_DMA_IRQHandler+0x2a0>
 8001c3a:	bf00      	nop
 8001c3c:	20000010 	.word	0x20000010
 8001c40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d023      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	4798      	blx	r3
 8001c54:	e01e      	b.n	8001c94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10f      	bne.n	8001c84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0210 	bic.w	r2, r2, #16
 8001c72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d032      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d022      	beq.n	8001cee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2205      	movs	r2, #5
 8001cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d307      	bcc.n	8001cdc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f2      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0x2cc>
 8001cda:	e000      	b.n	8001cde <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001cdc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d005      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	4798      	blx	r3
 8001cfe:	e000      	b.n	8001d02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d00:	bf00      	nop
    }
  }
}
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	3b10      	subs	r3, #16
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <DMA_CalcBaseAndBitshift+0x64>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d22:	4a13      	ldr	r2, [pc, #76]	; (8001d70 <DMA_CalcBaseAndBitshift+0x68>)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d909      	bls.n	8001d4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d3e:	f023 0303 	bic.w	r3, r3, #3
 8001d42:	1d1a      	adds	r2, r3, #4
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	659a      	str	r2, [r3, #88]	; 0x58
 8001d48:	e007      	b.n	8001d5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d52:	f023 0303 	bic.w	r3, r3, #3
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	aaaaaaab 	.word	0xaaaaaaab
 8001d70:	0800b444 	.word	0x0800b444

08001d74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d11f      	bne.n	8001dce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d856      	bhi.n	8001e42 <DMA_CheckFifoParam+0xce>
 8001d94:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <DMA_CheckFifoParam+0x28>)
 8001d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9a:	bf00      	nop
 8001d9c:	08001dad 	.word	0x08001dad
 8001da0:	08001dbf 	.word	0x08001dbf
 8001da4:	08001dad 	.word	0x08001dad
 8001da8:	08001e43 	.word	0x08001e43
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d046      	beq.n	8001e46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dbc:	e043      	b.n	8001e46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dc6:	d140      	bne.n	8001e4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dcc:	e03d      	b.n	8001e4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dd6:	d121      	bne.n	8001e1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d837      	bhi.n	8001e4e <DMA_CheckFifoParam+0xda>
 8001dde:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <DMA_CheckFifoParam+0x70>)
 8001de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de4:	08001df5 	.word	0x08001df5
 8001de8:	08001dfb 	.word	0x08001dfb
 8001dec:	08001df5 	.word	0x08001df5
 8001df0:	08001e0d 	.word	0x08001e0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
      break;
 8001df8:	e030      	b.n	8001e5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d025      	beq.n	8001e52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e0a:	e022      	b.n	8001e52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e14:	d11f      	bne.n	8001e56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e1a:	e01c      	b.n	8001e56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d903      	bls.n	8001e2a <DMA_CheckFifoParam+0xb6>
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d003      	beq.n	8001e30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e28:	e018      	b.n	8001e5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e2e:	e015      	b.n	8001e5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00e      	beq.n	8001e5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e40:	e00b      	b.n	8001e5a <DMA_CheckFifoParam+0xe6>
      break;
 8001e42:	bf00      	nop
 8001e44:	e00a      	b.n	8001e5c <DMA_CheckFifoParam+0xe8>
      break;
 8001e46:	bf00      	nop
 8001e48:	e008      	b.n	8001e5c <DMA_CheckFifoParam+0xe8>
      break;
 8001e4a:	bf00      	nop
 8001e4c:	e006      	b.n	8001e5c <DMA_CheckFifoParam+0xe8>
      break;
 8001e4e:	bf00      	nop
 8001e50:	e004      	b.n	8001e5c <DMA_CheckFifoParam+0xe8>
      break;
 8001e52:	bf00      	nop
 8001e54:	e002      	b.n	8001e5c <DMA_CheckFifoParam+0xe8>
      break;   
 8001e56:	bf00      	nop
 8001e58:	e000      	b.n	8001e5c <DMA_CheckFifoParam+0xe8>
      break;
 8001e5a:	bf00      	nop
    }
  } 
  
  return status; 
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	e159      	b.n	800213c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e88:	2201      	movs	r2, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	f040 8148 	bne.w	8002136 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d005      	beq.n	8001ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d130      	bne.n	8001f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	2203      	movs	r2, #3
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 0201 	and.w	r2, r3, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d017      	beq.n	8001f5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d123      	bne.n	8001fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	08da      	lsrs	r2, r3, #3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3208      	adds	r2, #8
 8001f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	08da      	lsrs	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3208      	adds	r2, #8
 8001faa:	69b9      	ldr	r1, [r7, #24]
 8001fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0203 	and.w	r2, r3, #3
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80a2 	beq.w	8002136 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b57      	ldr	r3, [pc, #348]	; (8002154 <HAL_GPIO_Init+0x2e8>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	4a56      	ldr	r2, [pc, #344]	; (8002154 <HAL_GPIO_Init+0x2e8>)
 8001ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002000:	6453      	str	r3, [r2, #68]	; 0x44
 8002002:	4b54      	ldr	r3, [pc, #336]	; (8002154 <HAL_GPIO_Init+0x2e8>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800200e:	4a52      	ldr	r2, [pc, #328]	; (8002158 <HAL_GPIO_Init+0x2ec>)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a49      	ldr	r2, [pc, #292]	; (800215c <HAL_GPIO_Init+0x2f0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d019      	beq.n	800206e <HAL_GPIO_Init+0x202>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a48      	ldr	r2, [pc, #288]	; (8002160 <HAL_GPIO_Init+0x2f4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <HAL_GPIO_Init+0x1fe>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a47      	ldr	r2, [pc, #284]	; (8002164 <HAL_GPIO_Init+0x2f8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00d      	beq.n	8002066 <HAL_GPIO_Init+0x1fa>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a46      	ldr	r2, [pc, #280]	; (8002168 <HAL_GPIO_Init+0x2fc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d007      	beq.n	8002062 <HAL_GPIO_Init+0x1f6>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a45      	ldr	r2, [pc, #276]	; (800216c <HAL_GPIO_Init+0x300>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d101      	bne.n	800205e <HAL_GPIO_Init+0x1f2>
 800205a:	2304      	movs	r3, #4
 800205c:	e008      	b.n	8002070 <HAL_GPIO_Init+0x204>
 800205e:	2307      	movs	r3, #7
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x204>
 8002062:	2303      	movs	r3, #3
 8002064:	e004      	b.n	8002070 <HAL_GPIO_Init+0x204>
 8002066:	2302      	movs	r3, #2
 8002068:	e002      	b.n	8002070 <HAL_GPIO_Init+0x204>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_GPIO_Init+0x204>
 800206e:	2300      	movs	r3, #0
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	f002 0203 	and.w	r2, r2, #3
 8002076:	0092      	lsls	r2, r2, #2
 8002078:	4093      	lsls	r3, r2
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002080:	4935      	ldr	r1, [pc, #212]	; (8002158 <HAL_GPIO_Init+0x2ec>)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800208e:	4b38      	ldr	r3, [pc, #224]	; (8002170 <HAL_GPIO_Init+0x304>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020b2:	4a2f      	ldr	r2, [pc, #188]	; (8002170 <HAL_GPIO_Init+0x304>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020b8:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <HAL_GPIO_Init+0x304>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020dc:	4a24      	ldr	r2, [pc, #144]	; (8002170 <HAL_GPIO_Init+0x304>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020e2:	4b23      	ldr	r3, [pc, #140]	; (8002170 <HAL_GPIO_Init+0x304>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002106:	4a1a      	ldr	r2, [pc, #104]	; (8002170 <HAL_GPIO_Init+0x304>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800210c:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_GPIO_Init+0x304>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002130:	4a0f      	ldr	r2, [pc, #60]	; (8002170 <HAL_GPIO_Init+0x304>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3301      	adds	r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	2b0f      	cmp	r3, #15
 8002140:	f67f aea2 	bls.w	8001e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3724      	adds	r7, #36	; 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	40013800 	.word	0x40013800
 800215c:	40020000 	.word	0x40020000
 8002160:	40020400 	.word	0x40020400
 8002164:	40020800 	.word	0x40020800
 8002168:	40020c00 	.word	0x40020c00
 800216c:	40021000 	.word	0x40021000
 8002170:	40013c00 	.word	0x40013c00

08002174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
 8002180:	4613      	mov	r3, r2
 8002182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002184:	787b      	ldrb	r3, [r7, #1]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002190:	e003      	b.n	800219a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	041a      	lsls	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	619a      	str	r2, [r3, #24]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e12b      	b.n	8002412 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7fe fa9a 	bl	8000708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2224      	movs	r2, #36	; 0x24
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800220a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800220c:	f001 ffca 	bl	80041a4 <HAL_RCC_GetPCLK1Freq>
 8002210:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4a81      	ldr	r2, [pc, #516]	; (800241c <HAL_I2C_Init+0x274>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d807      	bhi.n	800222c <HAL_I2C_Init+0x84>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4a80      	ldr	r2, [pc, #512]	; (8002420 <HAL_I2C_Init+0x278>)
 8002220:	4293      	cmp	r3, r2
 8002222:	bf94      	ite	ls
 8002224:	2301      	movls	r3, #1
 8002226:	2300      	movhi	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	e006      	b.n	800223a <HAL_I2C_Init+0x92>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4a7d      	ldr	r2, [pc, #500]	; (8002424 <HAL_I2C_Init+0x27c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	bf94      	ite	ls
 8002234:	2301      	movls	r3, #1
 8002236:	2300      	movhi	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0e7      	b.n	8002412 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4a78      	ldr	r2, [pc, #480]	; (8002428 <HAL_I2C_Init+0x280>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	0c9b      	lsrs	r3, r3, #18
 800224c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	430a      	orrs	r2, r1
 8002260:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4a6a      	ldr	r2, [pc, #424]	; (800241c <HAL_I2C_Init+0x274>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d802      	bhi.n	800227c <HAL_I2C_Init+0xd4>
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	3301      	adds	r3, #1
 800227a:	e009      	b.n	8002290 <HAL_I2C_Init+0xe8>
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	4a69      	ldr	r2, [pc, #420]	; (800242c <HAL_I2C_Init+0x284>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	099b      	lsrs	r3, r3, #6
 800228e:	3301      	adds	r3, #1
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	430b      	orrs	r3, r1
 8002296:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	495c      	ldr	r1, [pc, #368]	; (800241c <HAL_I2C_Init+0x274>)
 80022ac:	428b      	cmp	r3, r1
 80022ae:	d819      	bhi.n	80022e4 <HAL_I2C_Init+0x13c>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1e59      	subs	r1, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80022be:	1c59      	adds	r1, r3, #1
 80022c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022c4:	400b      	ands	r3, r1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_I2C_Init+0x138>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1e59      	subs	r1, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022de:	e051      	b.n	8002384 <HAL_I2C_Init+0x1dc>
 80022e0:	2304      	movs	r3, #4
 80022e2:	e04f      	b.n	8002384 <HAL_I2C_Init+0x1dc>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d111      	bne.n	8002310 <HAL_I2C_Init+0x168>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1e58      	subs	r0, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	440b      	add	r3, r1
 80022fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002304:	2b00      	cmp	r3, #0
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	e012      	b.n	8002336 <HAL_I2C_Init+0x18e>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1e58      	subs	r0, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	0099      	lsls	r1, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	fbb0 f3f3 	udiv	r3, r0, r3
 8002326:	3301      	adds	r3, #1
 8002328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_Init+0x196>
 800233a:	2301      	movs	r3, #1
 800233c:	e022      	b.n	8002384 <HAL_I2C_Init+0x1dc>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10e      	bne.n	8002364 <HAL_I2C_Init+0x1bc>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1e58      	subs	r0, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6859      	ldr	r1, [r3, #4]
 800234e:	460b      	mov	r3, r1
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	440b      	add	r3, r1
 8002354:	fbb0 f3f3 	udiv	r3, r0, r3
 8002358:	3301      	adds	r3, #1
 800235a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002362:	e00f      	b.n	8002384 <HAL_I2C_Init+0x1dc>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1e58      	subs	r0, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	0099      	lsls	r1, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	fbb0 f3f3 	udiv	r3, r0, r3
 800237a:	3301      	adds	r3, #1
 800237c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002380:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	6809      	ldr	r1, [r1, #0]
 8002388:	4313      	orrs	r3, r2
 800238a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69da      	ldr	r2, [r3, #28]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6911      	ldr	r1, [r2, #16]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68d2      	ldr	r2, [r2, #12]
 80023be:	4311      	orrs	r1, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	430b      	orrs	r3, r1
 80023c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695a      	ldr	r2, [r3, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	000186a0 	.word	0x000186a0
 8002420:	001e847f 	.word	0x001e847f
 8002424:	003d08ff 	.word	0x003d08ff
 8002428:	431bde83 	.word	0x431bde83
 800242c:	10624dd3 	.word	0x10624dd3

08002430 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002432:	b08f      	sub	sp, #60	; 0x3c
 8002434:	af0a      	add	r7, sp, #40	; 0x28
 8002436:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e10f      	b.n	8002662 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d106      	bne.n	8002462 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f006 fafb 	bl	8008a58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2203      	movs	r2, #3
 8002466:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d102      	bne.n	800247c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f002 fde2 	bl	800504a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	687e      	ldr	r6, [r7, #4]
 800248e:	466d      	mov	r5, sp
 8002490:	f106 0410 	add.w	r4, r6, #16
 8002494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800249a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800249c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80024a4:	1d33      	adds	r3, r6, #4
 80024a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024a8:	6838      	ldr	r0, [r7, #0]
 80024aa:	f002 fcb9 	bl	8004e20 <USB_CoreInit>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0d0      	b.n	8002662 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f002 fdd0 	bl	800506c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	73fb      	strb	r3, [r7, #15]
 80024d0:	e04a      	b.n	8002568 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	333d      	adds	r3, #61	; 0x3d
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	333c      	adds	r3, #60	; 0x3c
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	b298      	uxth	r0, r3
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	3344      	adds	r3, #68	; 0x44
 800250e:	4602      	mov	r2, r0
 8002510:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	3340      	adds	r3, #64	; 0x40
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	3348      	adds	r3, #72	; 0x48
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	334c      	adds	r3, #76	; 0x4c
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	3354      	adds	r3, #84	; 0x54
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	3301      	adds	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	7bfa      	ldrb	r2, [r7, #15]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	429a      	cmp	r2, r3
 8002570:	d3af      	bcc.n	80024d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
 8002576:	e044      	b.n	8002602 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025d0:	7bfa      	ldrb	r2, [r7, #15]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	3301      	adds	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	429a      	cmp	r2, r3
 800260a:	d3b5      	bcc.n	8002578 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	603b      	str	r3, [r7, #0]
 8002612:	687e      	ldr	r6, [r7, #4]
 8002614:	466d      	mov	r5, sp
 8002616:	f106 0410 	add.w	r4, r6, #16
 800261a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800261c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800261e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002622:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002626:	e885 0003 	stmia.w	r5, {r0, r1}
 800262a:	1d33      	adds	r3, r6, #4
 800262c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800262e:	6838      	ldr	r0, [r7, #0]
 8002630:	f002 fd68 	bl	8005104 <USB_DevInit>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2202      	movs	r2, #2
 800263e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e00d      	b.n	8002662 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f003 feb7 	bl	80063ce <USB_DevDisconnect>

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800266a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_PCD_Start+0x1c>
 8002682:	2302      	movs	r3, #2
 8002684:	e020      	b.n	80026c8 <HAL_PCD_Start+0x5e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002692:	2b01      	cmp	r3, #1
 8002694:	d109      	bne.n	80026aa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800269a:	2b01      	cmp	r3, #1
 800269c:	d005      	beq.n	80026aa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f002 fcba 	bl	8005028 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 fe67 	bl	800638c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b08d      	sub	sp, #52	; 0x34
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 ff25 	bl	8006536 <USB_GetMode>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f040 848a 	bne.w	8003008 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f003 fe89 	bl	8006410 <USB_ReadInterrupts>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 8480 	beq.w	8003006 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f003 fe76 	bl	8006410 <USB_ReadInterrupts>
 8002724:	4603      	mov	r3, r0
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b02      	cmp	r3, #2
 800272c:	d107      	bne.n	800273e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f002 0202 	and.w	r2, r2, #2
 800273c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fe64 	bl	8006410 <USB_ReadInterrupts>
 8002748:	4603      	mov	r3, r0
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b10      	cmp	r3, #16
 8002750:	d161      	bne.n	8002816 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699a      	ldr	r2, [r3, #24]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0210 	bic.w	r2, r2, #16
 8002760:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	f003 020f 	and.w	r2, r3, #15
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	3304      	adds	r3, #4
 8002780:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	0c5b      	lsrs	r3, r3, #17
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	2b02      	cmp	r3, #2
 800278c:	d124      	bne.n	80027d8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d035      	beq.n	8002806 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	6a38      	ldr	r0, [r7, #32]
 80027ae:	f003 fc9b 	bl	80060e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027be:	441a      	add	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	6a1a      	ldr	r2, [r3, #32]
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027d0:	441a      	add	r2, r3
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	621a      	str	r2, [r3, #32]
 80027d6:	e016      	b.n	8002806 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	0c5b      	lsrs	r3, r3, #17
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	2b06      	cmp	r3, #6
 80027e2:	d110      	bne.n	8002806 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027ea:	2208      	movs	r2, #8
 80027ec:	4619      	mov	r1, r3
 80027ee:	6a38      	ldr	r0, [r7, #32]
 80027f0:	f003 fc7a 	bl	80060e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	6a1a      	ldr	r2, [r3, #32]
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002800:	441a      	add	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699a      	ldr	r2, [r3, #24]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0210 	orr.w	r2, r2, #16
 8002814:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f003 fdf8 	bl	8006410 <USB_ReadInterrupts>
 8002820:	4603      	mov	r3, r0
 8002822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002826:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800282a:	f040 80a7 	bne.w	800297c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f003 fdfd 	bl	8006436 <USB_ReadDevAllOutEpInterrupt>
 800283c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800283e:	e099      	b.n	8002974 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 808e 	beq.w	8002968 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f003 fe21 	bl	800649e <USB_ReadDevOutEPInterrupt>
 800285c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00c      	beq.n	8002882 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002874:	461a      	mov	r2, r3
 8002876:	2301      	movs	r3, #1
 8002878:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800287a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fec3 	bl	8003608 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00c      	beq.n	80028a6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	4413      	add	r3, r2
 8002894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002898:	461a      	mov	r2, r3
 800289a:	2308      	movs	r3, #8
 800289c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800289e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 ff99 	bl	80037d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028bc:	461a      	mov	r2, r3
 80028be:	2310      	movs	r3, #16
 80028c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d030      	beq.n	800292e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b80      	cmp	r3, #128	; 0x80
 80028d6:	d109      	bne.n	80028ec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	69fa      	ldr	r2, [r7, #28]
 80028e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80028ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	3304      	adds	r3, #4
 8002900:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	78db      	ldrb	r3, [r3, #3]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d108      	bne.n	800291c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2200      	movs	r2, #0
 800290e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	b2db      	uxtb	r3, r3
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f006 f99a 	bl	8008c50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4413      	add	r3, r2
 8002924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002928:	461a      	mov	r2, r3
 800292a:	2302      	movs	r3, #2
 800292c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f003 0320 	and.w	r3, r3, #32
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	4413      	add	r3, r2
 8002940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002944:	461a      	mov	r2, r3
 8002946:	2320      	movs	r3, #32
 8002948:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d009      	beq.n	8002968 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	4413      	add	r3, r2
 800295c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002960:	461a      	mov	r2, r3
 8002962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002966:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	3301      	adds	r3, #1
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	085b      	lsrs	r3, r3, #1
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	2b00      	cmp	r3, #0
 8002978:	f47f af62 	bne.w	8002840 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f003 fd45 	bl	8006410 <USB_ReadInterrupts>
 8002986:	4603      	mov	r3, r0
 8002988:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800298c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002990:	f040 80db 	bne.w	8002b4a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f003 fd66 	bl	800646a <USB_ReadDevAllInEpInterrupt>
 800299e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80029a4:	e0cd      	b.n	8002b42 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80c2 	beq.w	8002b36 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f003 fd8c 	bl	80064da <USB_ReadDevInEPInterrupt>
 80029c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d057      	beq.n	8002a7e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	2201      	movs	r2, #1
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69f9      	ldr	r1, [r7, #28]
 80029ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029ee:	4013      	ands	r3, r2
 80029f0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029fe:	461a      	mov	r2, r3
 8002a00:	2301      	movs	r3, #1
 8002a02:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d132      	bne.n	8002a72 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a10:	4613      	mov	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	334c      	adds	r3, #76	; 0x4c
 8002a1c:	6819      	ldr	r1, [r3, #0]
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4403      	add	r3, r0
 8002a2c:	3348      	adds	r3, #72	; 0x48
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4419      	add	r1, r3
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4403      	add	r3, r0
 8002a40:	334c      	adds	r3, #76	; 0x4c
 8002a42:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d113      	bne.n	8002a72 <HAL_PCD_IRQHandler+0x3a2>
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	3354      	adds	r3, #84	; 0x54
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d108      	bne.n	8002a72 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	f003 fd93 	bl	8006598 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	4619      	mov	r1, r3
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f006 f86e 	bl	8008b5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a94:	461a      	mov	r2, r3
 8002a96:	2308      	movs	r3, #8
 8002a98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2310      	movs	r3, #16
 8002ab4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002acc:	461a      	mov	r2, r3
 8002ace:	2340      	movs	r3, #64	; 0x40
 8002ad0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d023      	beq.n	8002b24 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002adc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ade:	6a38      	ldr	r0, [r7, #32]
 8002ae0:	f002 fc74 	bl	80053cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	3338      	adds	r3, #56	; 0x38
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	3304      	adds	r3, #4
 8002af6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	78db      	ldrb	r3, [r3, #3]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d108      	bne.n	8002b12 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2200      	movs	r2, #0
 8002b04:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f006 f8b1 	bl	8008c74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b1e:	461a      	mov	r2, r3
 8002b20:	2302      	movs	r3, #2
 8002b22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 fcdb 	bl	80034ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	3301      	adds	r3, #1
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	085b      	lsrs	r3, r3, #1
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f47f af2e 	bne.w	80029a6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f003 fc5e 	bl	8006410 <USB_ReadInterrupts>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b5e:	d122      	bne.n	8002ba6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	69fa      	ldr	r2, [r7, #28]
 8002b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d108      	bne.n	8002b90 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b86:	2100      	movs	r1, #0
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 fec3 	bl	8003914 <HAL_PCDEx_LPM_Callback>
 8002b8e:	e002      	b.n	8002b96 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f006 f84f 	bl	8008c34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 fc30 	bl	8006410 <USB_ReadInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bba:	d112      	bne.n	8002be2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d102      	bne.n	8002bd2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f006 f80b 	bl	8008be8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002be0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f003 fc12 	bl	8006410 <USB_ReadInterrupts>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf6:	f040 80b7 	bne.w	8002d68 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	69fa      	ldr	r2, [r7, #28]
 8002c04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2110      	movs	r1, #16
 8002c14:	4618      	mov	r0, r3
 8002c16:	f002 fbd9 	bl	80053cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c1e:	e046      	b.n	8002cae <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c32:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c44:	0151      	lsls	r1, r2, #5
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	440a      	add	r2, r1
 8002c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c60:	461a      	mov	r2, r3
 8002c62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c66:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c78:	0151      	lsls	r1, r2, #5
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	440a      	add	r2, r1
 8002c7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c98:	0151      	lsls	r1, r2, #5
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	440a      	add	r2, r1
 8002c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ca2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ca6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	3301      	adds	r3, #1
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d3b3      	bcc.n	8002c20 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cc6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002cca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d016      	beq.n	8002d02 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cde:	69fa      	ldr	r2, [r7, #28]
 8002ce0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ce4:	f043 030b 	orr.w	r3, r3, #11
 8002ce8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cfa:	f043 030b 	orr.w	r3, r3, #11
 8002cfe:	6453      	str	r3, [r2, #68]	; 0x44
 8002d00:	e015      	b.n	8002d2e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d14:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d18:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d28:	f043 030b 	orr.w	r3, r3, #11
 8002d2c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d3c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d40:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d52:	461a      	mov	r2, r3
 8002d54:	f003 fc20 	bl	8006598 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f003 fb4f 	bl	8006410 <USB_ReadInterrupts>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7c:	d124      	bne.n	8002dc8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f003 fbe5 	bl	8006552 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f002 fb9a 	bl	80054c6 <USB_GetDevSpeed>
 8002d92:	4603      	mov	r3, r0
 8002d94:	461a      	mov	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681c      	ldr	r4, [r3, #0]
 8002d9e:	f001 f9f5 	bl	800418c <HAL_RCC_GetHCLKFreq>
 8002da2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	4620      	mov	r0, r4
 8002dae:	f002 f899 	bl	8004ee4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f005 fef9 	bl	8008baa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f003 fb1f 	bl	8006410 <USB_ReadInterrupts>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d10a      	bne.n	8002df2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f005 fed6 	bl	8008b8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f002 0208 	and.w	r2, r2, #8
 8002df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f003 fb0a 	bl	8006410 <USB_ReadInterrupts>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e02:	2b80      	cmp	r3, #128	; 0x80
 8002e04:	d122      	bne.n	8002e4c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e12:	2301      	movs	r3, #1
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
 8002e16:	e014      	b.n	8002e42 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d105      	bne.n	8002e3c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	4619      	mov	r1, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fb27 	bl	800348a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	3301      	adds	r3, #1
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d3e5      	bcc.n	8002e18 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f003 fadd 	bl	8006410 <USB_ReadInterrupts>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e60:	d13b      	bne.n	8002eda <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e62:	2301      	movs	r3, #1
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
 8002e66:	e02b      	b.n	8002ec0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	3340      	adds	r3, #64	; 0x40
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d115      	bne.n	8002eba <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e8e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	da12      	bge.n	8002eba <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	333f      	adds	r3, #63	; 0x3f
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 fae8 	bl	800348a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d3ce      	bcc.n	8002e68 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ed8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f003 fa96 	bl	8006410 <USB_ReadInterrupts>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eee:	d155      	bne.n	8002f9c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef4:	e045      	b.n	8002f82 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d12e      	bne.n	8002f7c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	da2b      	bge.n	8002f7c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002f30:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d121      	bne.n	8002f7c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10a      	bne.n	8002f7c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f78:	6053      	str	r3, [r2, #4]
            break;
 8002f7a:	e007      	b.n	8002f8c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	3301      	adds	r3, #1
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d3b4      	bcc.n	8002ef6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002f9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f003 fa35 	bl	8006410 <USB_ReadInterrupts>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb0:	d10a      	bne.n	8002fc8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f005 fe70 	bl	8008c98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002fc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 fa1f 	bl	8006410 <USB_ReadInterrupts>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d115      	bne.n	8003008 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f005 fe60 	bl	8008cb4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6859      	ldr	r1, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	e000      	b.n	8003008 <HAL_PCD_IRQHandler+0x938>
      return;
 8003006:	bf00      	nop
    }
  }
}
 8003008:	3734      	adds	r7, #52	; 0x34
 800300a:	46bd      	mov	sp, r7
 800300c:	bd90      	pop	{r4, r7, pc}

0800300e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	460b      	mov	r3, r1
 8003018:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_PCD_SetAddress+0x1a>
 8003024:	2302      	movs	r3, #2
 8003026:	e013      	b.n	8003050 <HAL_PCD_SetAddress+0x42>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	4611      	mov	r1, r2
 8003040:	4618      	mov	r0, r3
 8003042:	f003 f97d 	bl	8006340 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	4608      	mov	r0, r1
 8003062:	4611      	mov	r1, r2
 8003064:	461a      	mov	r2, r3
 8003066:	4603      	mov	r3, r0
 8003068:	70fb      	strb	r3, [r7, #3]
 800306a:	460b      	mov	r3, r1
 800306c:	803b      	strh	r3, [r7, #0]
 800306e:	4613      	mov	r3, r2
 8003070:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800307a:	2b00      	cmp	r3, #0
 800307c:	da0f      	bge.n	800309e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	f003 020f 	and.w	r2, r3, #15
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	3338      	adds	r3, #56	; 0x38
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	4413      	add	r3, r2
 8003092:	3304      	adds	r3, #4
 8003094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	705a      	strb	r2, [r3, #1]
 800309c:	e00f      	b.n	80030be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	f003 020f 	and.w	r2, r3, #15
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	4413      	add	r3, r2
 80030b4:	3304      	adds	r3, #4
 80030b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030ca:	883a      	ldrh	r2, [r7, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	78ba      	ldrb	r2, [r7, #2]
 80030d4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	785b      	ldrb	r3, [r3, #1]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d004      	beq.n	80030e8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030e8:	78bb      	ldrb	r3, [r7, #2]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d102      	bne.n	80030f4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_PCD_EP_Open+0xaa>
 80030fe:	2302      	movs	r3, #2
 8003100:	e00e      	b.n	8003120 <HAL_PCD_EP_Open+0xc8>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68f9      	ldr	r1, [r7, #12]
 8003110:	4618      	mov	r0, r3
 8003112:	f002 f9fd 	bl	8005510 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800311e:	7afb      	ldrb	r3, [r7, #11]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003138:	2b00      	cmp	r3, #0
 800313a:	da0f      	bge.n	800315c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	f003 020f 	and.w	r2, r3, #15
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	3338      	adds	r3, #56	; 0x38
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	4413      	add	r3, r2
 8003150:	3304      	adds	r3, #4
 8003152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	705a      	strb	r2, [r3, #1]
 800315a:	e00f      	b.n	800317c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	f003 020f 	and.w	r2, r3, #15
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	3304      	adds	r3, #4
 8003174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	b2da      	uxtb	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800318e:	2b01      	cmp	r3, #1
 8003190:	d101      	bne.n	8003196 <HAL_PCD_EP_Close+0x6e>
 8003192:	2302      	movs	r3, #2
 8003194:	e00e      	b.n	80031b4 <HAL_PCD_EP_Close+0x8c>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68f9      	ldr	r1, [r7, #12]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f002 fa3b 	bl	8005620 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	460b      	mov	r3, r1
 80031ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031cc:	7afb      	ldrb	r3, [r7, #11]
 80031ce:	f003 020f 	and.w	r2, r3, #15
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4413      	add	r3, r2
 80031e2:	3304      	adds	r3, #4
 80031e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2200      	movs	r2, #0
 80031f6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	2200      	movs	r2, #0
 80031fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031fe:	7afb      	ldrb	r3, [r7, #11]
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	b2da      	uxtb	r2, r3
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d102      	bne.n	8003218 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003218:	7afb      	ldrb	r3, [r7, #11]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	461a      	mov	r2, r3
 800322e:	6979      	ldr	r1, [r7, #20]
 8003230:	f002 fd1a 	bl	8005c68 <USB_EP0StartXfer>
 8003234:	e008      	b.n	8003248 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	6979      	ldr	r1, [r7, #20]
 8003244:	f002 fac8 	bl	80057d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	460b      	mov	r3, r1
 800325c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	f003 020f 	and.w	r2, r3, #15
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4413      	add	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003274:	681b      	ldr	r3, [r3, #0]
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	460b      	mov	r3, r1
 8003290:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003292:	7afb      	ldrb	r3, [r7, #11]
 8003294:	f003 020f 	and.w	r2, r3, #15
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	3338      	adds	r3, #56	; 0x38
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4413      	add	r3, r2
 80032a6:	3304      	adds	r3, #4
 80032a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2200      	movs	r2, #0
 80032ba:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2201      	movs	r2, #1
 80032c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032c2:	7afb      	ldrb	r3, [r7, #11]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d102      	bne.n	80032dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032dc:	7afb      	ldrb	r3, [r7, #11]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	6979      	ldr	r1, [r7, #20]
 80032f4:	f002 fcb8 	bl	8005c68 <USB_EP0StartXfer>
 80032f8:	e008      	b.n	800330c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	6979      	ldr	r1, [r7, #20]
 8003308:	f002 fa66 	bl	80057d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	460b      	mov	r3, r1
 8003320:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	f003 020f 	and.w	r2, r3, #15
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	429a      	cmp	r2, r3
 800332e:	d901      	bls.n	8003334 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e050      	b.n	80033d6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003338:	2b00      	cmp	r3, #0
 800333a:	da0f      	bge.n	800335c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	f003 020f 	and.w	r2, r3, #15
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	3338      	adds	r3, #56	; 0x38
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	4413      	add	r3, r2
 8003350:	3304      	adds	r3, #4
 8003352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	705a      	strb	r2, [r3, #1]
 800335a:	e00d      	b.n	8003378 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	4613      	mov	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	3304      	adds	r3, #4
 8003370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800337e:	78fb      	ldrb	r3, [r7, #3]
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_PCD_EP_SetStall+0x82>
 8003394:	2302      	movs	r3, #2
 8003396:	e01e      	b.n	80033d6 <HAL_PCD_EP_SetStall+0xc0>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68f9      	ldr	r1, [r7, #12]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f002 fef6 	bl	8006198 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10a      	bne.n	80033cc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	b2d9      	uxtb	r1, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033c6:	461a      	mov	r2, r3
 80033c8:	f003 f8e6 	bl	8006598 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033ea:	78fb      	ldrb	r3, [r7, #3]
 80033ec:	f003 020f 	and.w	r2, r3, #15
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d901      	bls.n	80033fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e042      	b.n	8003482 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003400:	2b00      	cmp	r3, #0
 8003402:	da0f      	bge.n	8003424 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	f003 020f 	and.w	r2, r3, #15
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	3338      	adds	r3, #56	; 0x38
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	4413      	add	r3, r2
 8003418:	3304      	adds	r3, #4
 800341a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	705a      	strb	r2, [r3, #1]
 8003422:	e00f      	b.n	8003444 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	f003 020f 	and.w	r2, r3, #15
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	3304      	adds	r3, #4
 800343c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800344a:	78fb      	ldrb	r3, [r7, #3]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	b2da      	uxtb	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_PCD_EP_ClrStall+0x86>
 8003460:	2302      	movs	r3, #2
 8003462:	e00e      	b.n	8003482 <HAL_PCD_EP_ClrStall+0xa4>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68f9      	ldr	r1, [r7, #12]
 8003472:	4618      	mov	r0, r3
 8003474:	f002 fefe 	bl	8006274 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	460b      	mov	r3, r1
 8003494:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800349a:	2b00      	cmp	r3, #0
 800349c:	da0c      	bge.n	80034b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	f003 020f 	and.w	r2, r3, #15
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	3338      	adds	r3, #56	; 0x38
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	3304      	adds	r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	e00c      	b.n	80034d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	f003 020f 	and.w	r2, r3, #15
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	3304      	adds	r3, #4
 80034d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68f9      	ldr	r1, [r7, #12]
 80034d8:	4618      	mov	r0, r3
 80034da:	f002 fd1d 	bl	8005f18 <USB_EPStopXfer>
 80034de:	4603      	mov	r3, r0
 80034e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80034e2:	7afb      	ldrb	r3, [r7, #11]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08a      	sub	sp, #40	; 0x28
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	3338      	adds	r3, #56	; 0x38
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	4413      	add	r3, r2
 8003510:	3304      	adds	r3, #4
 8003512:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a1a      	ldr	r2, [r3, #32]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	429a      	cmp	r2, r3
 800351e:	d901      	bls.n	8003524 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e06c      	b.n	80035fe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	699a      	ldr	r2, [r3, #24]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	429a      	cmp	r2, r3
 8003538:	d902      	bls.n	8003540 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	3303      	adds	r3, #3
 8003544:	089b      	lsrs	r3, r3, #2
 8003546:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003548:	e02b      	b.n	80035a2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	429a      	cmp	r2, r3
 800355e:	d902      	bls.n	8003566 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3303      	adds	r3, #3
 800356a:	089b      	lsrs	r3, r3, #2
 800356c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6919      	ldr	r1, [r3, #16]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800357e:	b2db      	uxtb	r3, r3
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	4603      	mov	r3, r0
 8003584:	6978      	ldr	r0, [r7, #20]
 8003586:	f002 fd71 	bl	800606c <USB_WritePacket>

    ep->xfer_buff  += len;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	441a      	add	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a1a      	ldr	r2, [r3, #32]
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	441a      	add	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d809      	bhi.n	80035cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a1a      	ldr	r2, [r3, #32]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d203      	bcs.n	80035cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1be      	bne.n	800354a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	699a      	ldr	r2, [r3, #24]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d811      	bhi.n	80035fc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	2201      	movs	r2, #1
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	6939      	ldr	r1, [r7, #16]
 80035f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035f8:	4013      	ands	r3, r2
 80035fa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3720      	adds	r7, #32
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	333c      	adds	r3, #60	; 0x3c
 8003620:	3304      	adds	r3, #4
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	4413      	add	r3, r2
 800362e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d17b      	bne.n	8003736 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d015      	beq.n	8003674 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	4a61      	ldr	r2, [pc, #388]	; (80037d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	f240 80b9 	bls.w	80037c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80b3 	beq.w	80037c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366a:	461a      	mov	r2, r3
 800366c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003670:	6093      	str	r3, [r2, #8]
 8003672:	e0a7      	b.n	80037c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368a:	461a      	mov	r2, r3
 800368c:	2320      	movs	r3, #32
 800368e:	6093      	str	r3, [r2, #8]
 8003690:	e098      	b.n	80037c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003698:	2b00      	cmp	r3, #0
 800369a:	f040 8093 	bne.w	80037c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	4a4b      	ldr	r2, [pc, #300]	; (80037d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d90f      	bls.n	80036c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036bc:	461a      	mov	r2, r3
 80036be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036c2:	6093      	str	r3, [r2, #8]
 80036c4:	e07e      	b.n	80037c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4413      	add	r3, r2
 80036d8:	3304      	adds	r3, #4
 80036da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	0159      	lsls	r1, r3, #5
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	440b      	add	r3, r1
 80036e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f2:	1ad2      	subs	r2, r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d114      	bne.n	8003728 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d109      	bne.n	800371a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003710:	461a      	mov	r2, r3
 8003712:	2101      	movs	r1, #1
 8003714:	f002 ff40 	bl	8006598 <USB_EP0_OutStart>
 8003718:	e006      	b.n	8003728 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	441a      	add	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	4619      	mov	r1, r3
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f005 f9f8 	bl	8008b24 <HAL_PCD_DataOutStageCallback>
 8003734:	e046      	b.n	80037c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	4a26      	ldr	r2, [pc, #152]	; (80037d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d124      	bne.n	8003788 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003754:	461a      	mov	r2, r3
 8003756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800375a:	6093      	str	r3, [r2, #8]
 800375c:	e032      	b.n	80037c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003774:	461a      	mov	r2, r3
 8003776:	2320      	movs	r3, #32
 8003778:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	4619      	mov	r1, r3
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f005 f9cf 	bl	8008b24 <HAL_PCD_DataOutStageCallback>
 8003786:	e01d      	b.n	80037c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d114      	bne.n	80037b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d108      	bne.n	80037b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037b0:	461a      	mov	r2, r3
 80037b2:	2100      	movs	r1, #0
 80037b4:	f002 fef0 	bl	8006598 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	4619      	mov	r1, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f005 f9b0 	bl	8008b24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3720      	adds	r7, #32
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	4f54300a 	.word	0x4f54300a
 80037d4:	4f54310a 	.word	0x4f54310a

080037d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	333c      	adds	r3, #60	; 0x3c
 80037f0:	3304      	adds	r3, #4
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4a15      	ldr	r2, [pc, #84]	; (8003860 <PCD_EP_OutSetupPacket_int+0x88>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d90e      	bls.n	800382c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003814:	2b00      	cmp	r3, #0
 8003816:	d009      	beq.n	800382c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4413      	add	r3, r2
 8003820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003824:	461a      	mov	r2, r3
 8003826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800382a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f005 f967 	bl	8008b00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <PCD_EP_OutSetupPacket_int+0x88>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d90c      	bls.n	8003854 <PCD_EP_OutSetupPacket_int+0x7c>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d108      	bne.n	8003854 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800384c:	461a      	mov	r2, r3
 800384e:	2101      	movs	r1, #1
 8003850:	f002 fea2 	bl	8006598 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	4f54300a 	.word	0x4f54300a

08003864 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	70fb      	strb	r3, [r7, #3]
 8003870:	4613      	mov	r3, r2
 8003872:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d107      	bne.n	8003892 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003882:	883b      	ldrh	r3, [r7, #0]
 8003884:	0419      	lsls	r1, r3, #16
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	430a      	orrs	r2, r1
 800388e:	629a      	str	r2, [r3, #40]	; 0x28
 8003890:	e028      	b.n	80038e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	0c1b      	lsrs	r3, r3, #16
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	4413      	add	r3, r2
 800389e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]
 80038a4:	e00d      	b.n	80038c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	3340      	adds	r3, #64	; 0x40
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	0c1b      	lsrs	r3, r3, #16
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	4413      	add	r3, r2
 80038ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
 80038be:	3301      	adds	r3, #1
 80038c0:	73fb      	strb	r3, [r7, #15]
 80038c2:	7bfa      	ldrb	r2, [r7, #15]
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d3ec      	bcc.n	80038a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038cc:	883b      	ldrh	r3, [r7, #0]
 80038ce:	0418      	lsls	r0, r3, #16
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6819      	ldr	r1, [r3, #0]
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	4302      	orrs	r2, r0
 80038dc:	3340      	adds	r3, #64	; 0x40
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	460b      	mov	r3, r1
 80038fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	887a      	ldrh	r2, [r7, #2]
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e267      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d075      	beq.n	8003a36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800394a:	4b88      	ldr	r3, [pc, #544]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	2b04      	cmp	r3, #4
 8003954:	d00c      	beq.n	8003970 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003956:	4b85      	ldr	r3, [pc, #532]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800395e:	2b08      	cmp	r3, #8
 8003960:	d112      	bne.n	8003988 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003962:	4b82      	ldr	r3, [pc, #520]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800396a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800396e:	d10b      	bne.n	8003988 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003970:	4b7e      	ldr	r3, [pc, #504]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d05b      	beq.n	8003a34 <HAL_RCC_OscConfig+0x108>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d157      	bne.n	8003a34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e242      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003990:	d106      	bne.n	80039a0 <HAL_RCC_OscConfig+0x74>
 8003992:	4b76      	ldr	r3, [pc, #472]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a75      	ldr	r2, [pc, #468]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e01d      	b.n	80039dc <HAL_RCC_OscConfig+0xb0>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x98>
 80039aa:	4b70      	ldr	r3, [pc, #448]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a6f      	ldr	r2, [pc, #444]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b6d      	ldr	r3, [pc, #436]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6c      	ldr	r2, [pc, #432]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e00b      	b.n	80039dc <HAL_RCC_OscConfig+0xb0>
 80039c4:	4b69      	ldr	r3, [pc, #420]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a68      	ldr	r2, [pc, #416]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	4b66      	ldr	r3, [pc, #408]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a65      	ldr	r2, [pc, #404]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d013      	beq.n	8003a0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7fd fe16 	bl	8001614 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ec:	f7fd fe12 	bl	8001614 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b64      	cmp	r3, #100	; 0x64
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e207      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fe:	4b5b      	ldr	r3, [pc, #364]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0xc0>
 8003a0a:	e014      	b.n	8003a36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fd fe02 	bl	8001614 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fd fdfe 	bl	8001614 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e1f3      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a26:	4b51      	ldr	r3, [pc, #324]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0xe8>
 8003a32:	e000      	b.n	8003a36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d063      	beq.n	8003b0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a42:	4b4a      	ldr	r3, [pc, #296]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a4e:	4b47      	ldr	r3, [pc, #284]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d11c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a5a:	4b44      	ldr	r3, [pc, #272]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d116      	bne.n	8003a94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a66:	4b41      	ldr	r3, [pc, #260]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_RCC_OscConfig+0x152>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d001      	beq.n	8003a7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e1c7      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7e:	4b3b      	ldr	r3, [pc, #236]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4937      	ldr	r1, [pc, #220]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a92:	e03a      	b.n	8003b0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d020      	beq.n	8003ade <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a9c:	4b34      	ldr	r3, [pc, #208]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa2:	f7fd fdb7 	bl	8001614 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aaa:	f7fd fdb3 	bl	8001614 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e1a8      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abc:	4b2b      	ldr	r3, [pc, #172]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac8:	4b28      	ldr	r3, [pc, #160]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4925      	ldr	r1, [pc, #148]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]
 8003adc:	e015      	b.n	8003b0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fd96 	bl	8001614 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aec:	f7fd fd92 	bl	8001614 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e187      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afe:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d036      	beq.n	8003b84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d016      	beq.n	8003b4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b1e:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <HAL_RCC_OscConfig+0x248>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fd fd76 	bl	8001614 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b2c:	f7fd fd72 	bl	8001614 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e167      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x200>
 8003b4a:	e01b      	b.n	8003b84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b4c:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_RCC_OscConfig+0x248>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b52:	f7fd fd5f 	bl	8001614 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b58:	e00e      	b.n	8003b78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b5a:	f7fd fd5b 	bl	8001614 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d907      	bls.n	8003b78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e150      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	42470000 	.word	0x42470000
 8003b74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b78:	4b88      	ldr	r3, [pc, #544]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1ea      	bne.n	8003b5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8097 	beq.w	8003cc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b92:	2300      	movs	r3, #0
 8003b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b96:	4b81      	ldr	r3, [pc, #516]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10f      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	4b7d      	ldr	r3, [pc, #500]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	4a7c      	ldr	r2, [pc, #496]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb2:	4b7a      	ldr	r3, [pc, #488]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc2:	4b77      	ldr	r3, [pc, #476]	; (8003da0 <HAL_RCC_OscConfig+0x474>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d118      	bne.n	8003c00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bce:	4b74      	ldr	r3, [pc, #464]	; (8003da0 <HAL_RCC_OscConfig+0x474>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a73      	ldr	r2, [pc, #460]	; (8003da0 <HAL_RCC_OscConfig+0x474>)
 8003bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bda:	f7fd fd1b 	bl	8001614 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be2:	f7fd fd17 	bl	8001614 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e10c      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf4:	4b6a      	ldr	r3, [pc, #424]	; (8003da0 <HAL_RCC_OscConfig+0x474>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_OscConfig+0x2ea>
 8003c08:	4b64      	ldr	r3, [pc, #400]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	4a63      	ldr	r2, [pc, #396]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	6713      	str	r3, [r2, #112]	; 0x70
 8003c14:	e01c      	b.n	8003c50 <HAL_RCC_OscConfig+0x324>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x30c>
 8003c1e:	4b5f      	ldr	r3, [pc, #380]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	4a5e      	ldr	r2, [pc, #376]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c24:	f043 0304 	orr.w	r3, r3, #4
 8003c28:	6713      	str	r3, [r2, #112]	; 0x70
 8003c2a:	4b5c      	ldr	r3, [pc, #368]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	4a5b      	ldr	r2, [pc, #364]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	6713      	str	r3, [r2, #112]	; 0x70
 8003c36:	e00b      	b.n	8003c50 <HAL_RCC_OscConfig+0x324>
 8003c38:	4b58      	ldr	r3, [pc, #352]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	4a57      	ldr	r2, [pc, #348]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	6713      	str	r3, [r2, #112]	; 0x70
 8003c44:	4b55      	ldr	r3, [pc, #340]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	4a54      	ldr	r2, [pc, #336]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c4a:	f023 0304 	bic.w	r3, r3, #4
 8003c4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d015      	beq.n	8003c84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c58:	f7fd fcdc 	bl	8001614 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c60:	f7fd fcd8 	bl	8001614 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e0cb      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c76:	4b49      	ldr	r3, [pc, #292]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0ee      	beq.n	8003c60 <HAL_RCC_OscConfig+0x334>
 8003c82:	e014      	b.n	8003cae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c84:	f7fd fcc6 	bl	8001614 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c8c:	f7fd fcc2 	bl	8001614 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e0b5      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca2:	4b3e      	ldr	r3, [pc, #248]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1ee      	bne.n	8003c8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d105      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb4:	4b39      	ldr	r3, [pc, #228]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	4a38      	ldr	r2, [pc, #224]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 80a1 	beq.w	8003e0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cca:	4b34      	ldr	r3, [pc, #208]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d05c      	beq.n	8003d90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d141      	bne.n	8003d62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cde:	4b31      	ldr	r3, [pc, #196]	; (8003da4 <HAL_RCC_OscConfig+0x478>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce4:	f7fd fc96 	bl	8001614 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fd fc92 	bl	8001614 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e087      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfe:	4b27      	ldr	r3, [pc, #156]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69da      	ldr	r2, [r3, #28]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	019b      	lsls	r3, r3, #6
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	3b01      	subs	r3, #1
 8003d24:	041b      	lsls	r3, r3, #16
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	061b      	lsls	r3, r3, #24
 8003d2e:	491b      	ldr	r1, [pc, #108]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d34:	4b1b      	ldr	r3, [pc, #108]	; (8003da4 <HAL_RCC_OscConfig+0x478>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7fd fc6b 	bl	8001614 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d42:	f7fd fc67 	bl	8001614 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e05c      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d54:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x416>
 8003d60:	e054      	b.n	8003e0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d62:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <HAL_RCC_OscConfig+0x478>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7fd fc54 	bl	8001614 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fd fc50 	bl	8001614 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e045      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x444>
 8003d8e:	e03d      	b.n	8003e0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e038      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	40007000 	.word	0x40007000
 8003da4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003da8:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <HAL_RCC_OscConfig+0x4ec>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d028      	beq.n	8003e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d121      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d11a      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dd8:	4013      	ands	r3, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d111      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	3b01      	subs	r3, #1
 8003df2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d107      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d001      	beq.n	8003e0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40023800 	.word	0x40023800

08003e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0cc      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e30:	4b68      	ldr	r3, [pc, #416]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d90c      	bls.n	8003e58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b65      	ldr	r3, [pc, #404]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b63      	ldr	r3, [pc, #396]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0b8      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d020      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e70:	4b59      	ldr	r3, [pc, #356]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	4a58      	ldr	r2, [pc, #352]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e88:	4b53      	ldr	r3, [pc, #332]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4a52      	ldr	r2, [pc, #328]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e94:	4b50      	ldr	r3, [pc, #320]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	494d      	ldr	r1, [pc, #308]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d044      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d107      	bne.n	8003eca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eba:	4b47      	ldr	r3, [pc, #284]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d119      	bne.n	8003efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e07f      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d003      	beq.n	8003eda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d107      	bne.n	8003eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eda:	4b3f      	ldr	r3, [pc, #252]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d109      	bne.n	8003efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e06f      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eea:	4b3b      	ldr	r3, [pc, #236]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e067      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003efa:	4b37      	ldr	r3, [pc, #220]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f023 0203 	bic.w	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	4934      	ldr	r1, [pc, #208]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f0c:	f7fd fb82 	bl	8001614 <HAL_GetTick>
 8003f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f12:	e00a      	b.n	8003f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f14:	f7fd fb7e 	bl	8001614 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e04f      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2a:	4b2b      	ldr	r3, [pc, #172]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 020c 	and.w	r2, r3, #12
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d1eb      	bne.n	8003f14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f3c:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d20c      	bcs.n	8003f64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4a:	4b22      	ldr	r3, [pc, #136]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f52:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d001      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e032      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f70:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4916      	ldr	r1, [pc, #88]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f8e:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	490e      	ldr	r1, [pc, #56]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fa2:	f000 f82d 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	490a      	ldr	r1, [pc, #40]	; (8003fdc <HAL_RCC_ClockConfig+0x1c0>)
 8003fb4:	5ccb      	ldrb	r3, [r1, r3]
 8003fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fba:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fd fae2 	bl	800158c <HAL_InitTick>

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023c00 	.word	0x40023c00
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	0800b42c 	.word	0x0800b42c
 8003fe0:	20000010 	.word	0x20000010
 8003fe4:	20000014 	.word	0x20000014

08003fe8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <HAL_RCC_EnableCSS+0x14>)
 8003fee:	2201      	movs	r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
}
 8003ff2:	bf00      	nop
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	4247004c 	.word	0x4247004c

08004000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004004:	b090      	sub	sp, #64	; 0x40
 8004006:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	637b      	str	r3, [r7, #52]	; 0x34
 800400c:	2300      	movs	r3, #0
 800400e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004010:	2300      	movs	r3, #0
 8004012:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004018:	4b59      	ldr	r3, [pc, #356]	; (8004180 <HAL_RCC_GetSysClockFreq+0x180>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 030c 	and.w	r3, r3, #12
 8004020:	2b08      	cmp	r3, #8
 8004022:	d00d      	beq.n	8004040 <HAL_RCC_GetSysClockFreq+0x40>
 8004024:	2b08      	cmp	r3, #8
 8004026:	f200 80a1 	bhi.w	800416c <HAL_RCC_GetSysClockFreq+0x16c>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0x34>
 800402e:	2b04      	cmp	r3, #4
 8004030:	d003      	beq.n	800403a <HAL_RCC_GetSysClockFreq+0x3a>
 8004032:	e09b      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004034:	4b53      	ldr	r3, [pc, #332]	; (8004184 <HAL_RCC_GetSysClockFreq+0x184>)
 8004036:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004038:	e09b      	b.n	8004172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800403a:	4b53      	ldr	r3, [pc, #332]	; (8004188 <HAL_RCC_GetSysClockFreq+0x188>)
 800403c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800403e:	e098      	b.n	8004172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004040:	4b4f      	ldr	r3, [pc, #316]	; (8004180 <HAL_RCC_GetSysClockFreq+0x180>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004048:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800404a:	4b4d      	ldr	r3, [pc, #308]	; (8004180 <HAL_RCC_GetSysClockFreq+0x180>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d028      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004056:	4b4a      	ldr	r3, [pc, #296]	; (8004180 <HAL_RCC_GetSysClockFreq+0x180>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	099b      	lsrs	r3, r3, #6
 800405c:	2200      	movs	r2, #0
 800405e:	623b      	str	r3, [r7, #32]
 8004060:	627a      	str	r2, [r7, #36]	; 0x24
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004068:	2100      	movs	r1, #0
 800406a:	4b47      	ldr	r3, [pc, #284]	; (8004188 <HAL_RCC_GetSysClockFreq+0x188>)
 800406c:	fb03 f201 	mul.w	r2, r3, r1
 8004070:	2300      	movs	r3, #0
 8004072:	fb00 f303 	mul.w	r3, r0, r3
 8004076:	4413      	add	r3, r2
 8004078:	4a43      	ldr	r2, [pc, #268]	; (8004188 <HAL_RCC_GetSysClockFreq+0x188>)
 800407a:	fba0 1202 	umull	r1, r2, r0, r2
 800407e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004080:	460a      	mov	r2, r1
 8004082:	62ba      	str	r2, [r7, #40]	; 0x28
 8004084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004086:	4413      	add	r3, r2
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800408a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408c:	2200      	movs	r2, #0
 800408e:	61bb      	str	r3, [r7, #24]
 8004090:	61fa      	str	r2, [r7, #28]
 8004092:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004096:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800409a:	f7fc f8f1 	bl	8000280 <__aeabi_uldivmod>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4613      	mov	r3, r2
 80040a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040a6:	e053      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a8:	4b35      	ldr	r3, [pc, #212]	; (8004180 <HAL_RCC_GetSysClockFreq+0x180>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	099b      	lsrs	r3, r3, #6
 80040ae:	2200      	movs	r2, #0
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	617a      	str	r2, [r7, #20]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040ba:	f04f 0b00 	mov.w	fp, #0
 80040be:	4652      	mov	r2, sl
 80040c0:	465b      	mov	r3, fp
 80040c2:	f04f 0000 	mov.w	r0, #0
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	0159      	lsls	r1, r3, #5
 80040cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040d0:	0150      	lsls	r0, r2, #5
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	ebb2 080a 	subs.w	r8, r2, sl
 80040da:	eb63 090b 	sbc.w	r9, r3, fp
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80040ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040f2:	ebb2 0408 	subs.w	r4, r2, r8
 80040f6:	eb63 0509 	sbc.w	r5, r3, r9
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	00eb      	lsls	r3, r5, #3
 8004104:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004108:	00e2      	lsls	r2, r4, #3
 800410a:	4614      	mov	r4, r2
 800410c:	461d      	mov	r5, r3
 800410e:	eb14 030a 	adds.w	r3, r4, sl
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	eb45 030b 	adc.w	r3, r5, fp
 8004118:	607b      	str	r3, [r7, #4]
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004126:	4629      	mov	r1, r5
 8004128:	028b      	lsls	r3, r1, #10
 800412a:	4621      	mov	r1, r4
 800412c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004130:	4621      	mov	r1, r4
 8004132:	028a      	lsls	r2, r1, #10
 8004134:	4610      	mov	r0, r2
 8004136:	4619      	mov	r1, r3
 8004138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413a:	2200      	movs	r2, #0
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	60fa      	str	r2, [r7, #12]
 8004140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004144:	f7fc f89c 	bl	8000280 <__aeabi_uldivmod>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	4613      	mov	r3, r2
 800414e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_RCC_GetSysClockFreq+0x180>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	3301      	adds	r3, #1
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004164:	fbb2 f3f3 	udiv	r3, r2, r3
 8004168:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800416a:	e002      	b.n	8004172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <HAL_RCC_GetSysClockFreq+0x184>)
 800416e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004174:	4618      	mov	r0, r3
 8004176:	3740      	adds	r7, #64	; 0x40
 8004178:	46bd      	mov	sp, r7
 800417a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800
 8004184:	00f42400 	.word	0x00f42400
 8004188:	017d7840 	.word	0x017d7840

0800418c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004190:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004192:	681b      	ldr	r3, [r3, #0]
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20000010 	.word	0x20000010

080041a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041a8:	f7ff fff0 	bl	800418c <HAL_RCC_GetHCLKFreq>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	0a9b      	lsrs	r3, r3, #10
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	4903      	ldr	r1, [pc, #12]	; (80041c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ba:	5ccb      	ldrb	r3, [r1, r3]
 80041bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40023800 	.word	0x40023800
 80041c8:	0800b43c 	.word	0x0800b43c

080041cc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <HAL_RCC_NMI_IRQHandler+0x20>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d8:	2b80      	cmp	r3, #128	; 0x80
 80041da:	d104      	bne.n	80041e6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80041dc:	f000 f80a 	bl	80041f4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80041e0:	4b03      	ldr	r3, [pc, #12]	; (80041f0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80041e2:	2280      	movs	r2, #128	; 0x80
 80041e4:	701a      	strb	r2, [r3, #0]
  }
}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40023800 	.word	0x40023800
 80041f0:	4002380e 	.word	0x4002380e

080041f4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d105      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004228:	2b00      	cmp	r3, #0
 800422a:	d038      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800422c:	4b68      	ldr	r3, [pc, #416]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004232:	f7fd f9ef 	bl	8001614 <HAL_GetTick>
 8004236:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004238:	e008      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800423a:	f7fd f9eb 	bl	8001614 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e0bd      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800424c:	4b61      	ldr	r3, [pc, #388]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1f0      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	019b      	lsls	r3, r3, #6
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	071b      	lsls	r3, r3, #28
 800426a:	495a      	ldr	r1, [pc, #360]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004272:	4b57      	ldr	r3, [pc, #348]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004278:	f7fd f9cc 	bl	8001614 <HAL_GetTick>
 800427c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004280:	f7fd f9c8 	bl	8001614 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e09a      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004292:	4b50      	ldr	r3, [pc, #320]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 8083 	beq.w	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	4b48      	ldr	r3, [pc, #288]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	4a47      	ldr	r2, [pc, #284]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ba:	6413      	str	r3, [r2, #64]	; 0x40
 80042bc:	4b45      	ldr	r3, [pc, #276]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80042c8:	4b43      	ldr	r3, [pc, #268]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a42      	ldr	r2, [pc, #264]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042d4:	f7fd f99e 	bl	8001614 <HAL_GetTick>
 80042d8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042dc:	f7fd f99a 	bl	8001614 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e06c      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042ee:	4b3a      	ldr	r3, [pc, #232]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042fa:	4b36      	ldr	r3, [pc, #216]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004302:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d02f      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	429a      	cmp	r2, r3
 8004316:	d028      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004318:	4b2e      	ldr	r3, [pc, #184]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004320:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004322:	4b2e      	ldr	r3, [pc, #184]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004324:	2201      	movs	r2, #1
 8004326:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004328:	4b2c      	ldr	r3, [pc, #176]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800432e:	4a29      	ldr	r2, [pc, #164]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004334:	4b27      	ldr	r3, [pc, #156]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b01      	cmp	r3, #1
 800433e:	d114      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004340:	f7fd f968 	bl	8001614 <HAL_GetTick>
 8004344:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004346:	e00a      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004348:	f7fd f964 	bl	8001614 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	; 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e034      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435e:	4b1d      	ldr	r3, [pc, #116]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ee      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004376:	d10d      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004378:	4b16      	ldr	r3, [pc, #88]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800438c:	4911      	ldr	r1, [pc, #68]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438e:	4313      	orrs	r3, r2
 8004390:	608b      	str	r3, [r1, #8]
 8004392:	e005      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004394:	4b0f      	ldr	r3, [pc, #60]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4a0e      	ldr	r2, [pc, #56]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800439e:	6093      	str	r3, [r2, #8]
 80043a0:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ac:	4909      	ldr	r1, [pc, #36]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	7d1a      	ldrb	r2, [r3, #20]
 80043c2:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80043c4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	42470068 	.word	0x42470068
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40007000 	.word	0x40007000
 80043dc:	42470e40 	.word	0x42470e40
 80043e0:	424711e0 	.word	0x424711e0

080043e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e066      	b.n	80044c8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	7f5b      	ldrb	r3, [r3, #29]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d105      	bne.n	8004410 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fc fabe 	bl	800098c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	22ca      	movs	r2, #202	; 0xca
 800441c:	625a      	str	r2, [r3, #36]	; 0x24
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2253      	movs	r2, #83	; 0x53
 8004424:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f87a 	bl	8004520 <RTC_EnterInitMode>
 800442c:	4603      	mov	r3, r0
 800442e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d12c      	bne.n	8004490 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004448:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6899      	ldr	r1, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	68d2      	ldr	r2, [r2, #12]
 8004470:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6919      	ldr	r1, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	041a      	lsls	r2, r3, #16
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f881 	bl	800458e <RTC_ExitInitMode>
 800448c:	4603      	mov	r3, r0
 800448e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d113      	bne.n	80044be <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044a4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699a      	ldr	r2, [r3, #24]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	22ff      	movs	r2, #255	; 0xff
 80044c4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044ea:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044ec:	f7fd f892 	bl	8001614 <HAL_GetTick>
 80044f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044f2:	e009      	b.n	8004508 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044f4:	f7fd f88e 	bl	8001614 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004502:	d901      	bls.n	8004508 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e007      	b.n	8004518 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0ee      	beq.n	80044f4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800452c:	2300      	movs	r3, #0
 800452e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453a:	2b00      	cmp	r3, #0
 800453c:	d122      	bne.n	8004584 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800454c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800454e:	f7fd f861 	bl	8001614 <HAL_GetTick>
 8004552:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004554:	e00c      	b.n	8004570 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004556:	f7fd f85d 	bl	8001614 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004564:	d904      	bls.n	8004570 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2204      	movs	r2, #4
 800456a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d102      	bne.n	8004584 <RTC_EnterInitMode+0x64>
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d1e8      	bne.n	8004556 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004584:	7bfb      	ldrb	r3, [r7, #15]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045a8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10a      	bne.n	80045ce <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff ff89 	bl	80044d0 <HAL_RTC_WaitForSynchro>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d004      	beq.n	80045ce <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2204      	movs	r2, #4
 80045c8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e07b      	b.n	80046e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d108      	bne.n	8004604 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045fa:	d009      	beq.n	8004610 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	61da      	str	r2, [r3, #28]
 8004602:	e005      	b.n	8004610 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fc fa10 	bl	8000a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004646:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	ea42 0103 	orr.w	r1, r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	0c1b      	lsrs	r3, r3, #16
 80046ae:	f003 0104 	and.w	r1, r3, #4
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	f003 0210 	and.w	r2, r3, #16
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b088      	sub	sp, #32
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	603b      	str	r3, [r7, #0]
 80046f6:	4613      	mov	r3, r2
 80046f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_SPI_Transmit+0x22>
 8004708:	2302      	movs	r3, #2
 800470a:	e126      	b.n	800495a <HAL_SPI_Transmit+0x270>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004714:	f7fc ff7e 	bl	8001614 <HAL_GetTick>
 8004718:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800471a:	88fb      	ldrh	r3, [r7, #6]
 800471c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b01      	cmp	r3, #1
 8004728:	d002      	beq.n	8004730 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800472a:	2302      	movs	r3, #2
 800472c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800472e:	e10b      	b.n	8004948 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <HAL_SPI_Transmit+0x52>
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d102      	bne.n	8004742 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004740:	e102      	b.n	8004948 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2203      	movs	r2, #3
 8004746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	88fa      	ldrh	r2, [r7, #6]
 800475a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	88fa      	ldrh	r2, [r7, #6]
 8004760:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004788:	d10f      	bne.n	80047aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004798:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b4:	2b40      	cmp	r3, #64	; 0x40
 80047b6:	d007      	beq.n	80047c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d0:	d14b      	bne.n	800486a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_SPI_Transmit+0xf6>
 80047da:	8afb      	ldrh	r3, [r7, #22]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d13e      	bne.n	800485e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	881a      	ldrh	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	1c9a      	adds	r2, r3, #2
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004804:	e02b      	b.n	800485e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b02      	cmp	r3, #2
 8004812:	d112      	bne.n	800483a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	881a      	ldrh	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	1c9a      	adds	r2, r3, #2
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	86da      	strh	r2, [r3, #54]	; 0x36
 8004838:	e011      	b.n	800485e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800483a:	f7fc feeb 	bl	8001614 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d803      	bhi.n	8004852 <HAL_SPI_Transmit+0x168>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004850:	d102      	bne.n	8004858 <HAL_SPI_Transmit+0x16e>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d102      	bne.n	800485e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800485c:	e074      	b.n	8004948 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1ce      	bne.n	8004806 <HAL_SPI_Transmit+0x11c>
 8004868:	e04c      	b.n	8004904 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_SPI_Transmit+0x18e>
 8004872:	8afb      	ldrh	r3, [r7, #22]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d140      	bne.n	80048fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	7812      	ldrb	r2, [r2, #0]
 8004884:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800489e:	e02c      	b.n	80048fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d113      	bne.n	80048d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	330c      	adds	r3, #12
 80048b8:	7812      	ldrb	r2, [r2, #0]
 80048ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80048d4:	e011      	b.n	80048fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048d6:	f7fc fe9d 	bl	8001614 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d803      	bhi.n	80048ee <HAL_SPI_Transmit+0x204>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d102      	bne.n	80048f4 <HAL_SPI_Transmit+0x20a>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d102      	bne.n	80048fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048f8:	e026      	b.n	8004948 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1cd      	bne.n	80048a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	6839      	ldr	r1, [r7, #0]
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 f8b3 	bl	8004a74 <SPI_EndRxTxTransaction>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2220      	movs	r2, #32
 8004918:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10a      	bne.n	8004938 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004922:	2300      	movs	r3, #0
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	77fb      	strb	r3, [r7, #31]
 8004944:	e000      	b.n	8004948 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004946:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004958:	7ffb      	ldrb	r3, [r7, #31]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3720      	adds	r7, #32
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	4613      	mov	r3, r2
 8004972:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004974:	f7fc fe4e 	bl	8001614 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	4413      	add	r3, r2
 8004982:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004984:	f7fc fe46 	bl	8001614 <HAL_GetTick>
 8004988:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800498a:	4b39      	ldr	r3, [pc, #228]	; (8004a70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	015b      	lsls	r3, r3, #5
 8004990:	0d1b      	lsrs	r3, r3, #20
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	fb02 f303 	mul.w	r3, r2, r3
 8004998:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800499a:	e054      	b.n	8004a46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a2:	d050      	beq.n	8004a46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049a4:	f7fc fe36 	bl	8001614 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	69fa      	ldr	r2, [r7, #28]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d902      	bls.n	80049ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d13d      	bne.n	8004a36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049d2:	d111      	bne.n	80049f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049dc:	d004      	beq.n	80049e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e6:	d107      	bne.n	80049f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a00:	d10f      	bne.n	8004a22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e017      	b.n	8004a66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	bf0c      	ite	eq
 8004a56:	2301      	moveq	r3, #1
 8004a58:	2300      	movne	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d19b      	bne.n	800499c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3720      	adds	r7, #32
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000010 	.word	0x20000010

08004a74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af02      	add	r7, sp, #8
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a80:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <SPI_EndRxTxTransaction+0x7c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a1b      	ldr	r2, [pc, #108]	; (8004af4 <SPI_EndRxTxTransaction+0x80>)
 8004a86:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8a:	0d5b      	lsrs	r3, r3, #21
 8004a8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a90:	fb02 f303 	mul.w	r3, r2, r3
 8004a94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a9e:	d112      	bne.n	8004ac6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2180      	movs	r1, #128	; 0x80
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7ff ff5a 	bl	8004964 <SPI_WaitFlagStateUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d016      	beq.n	8004ae4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aba:	f043 0220 	orr.w	r2, r3, #32
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e00f      	b.n	8004ae6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004adc:	2b80      	cmp	r3, #128	; 0x80
 8004ade:	d0f2      	beq.n	8004ac6 <SPI_EndRxTxTransaction+0x52>
 8004ae0:	e000      	b.n	8004ae4 <SPI_EndRxTxTransaction+0x70>
        break;
 8004ae2:	bf00      	nop
  }

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20000010 	.word	0x20000010
 8004af4:	165e9f81 	.word	0x165e9f81

08004af8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e097      	b.n	8004c3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d106      	bne.n	8004b26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7fc fca1 	bl	8001468 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6812      	ldr	r2, [r2, #0]
 8004b38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b3c:	f023 0307 	bic.w	r3, r3, #7
 8004b40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	f000 f879 	bl	8004c44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b7a:	f023 0303 	bic.w	r3, r3, #3
 8004b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004b98:	f023 030c 	bic.w	r3, r3, #12
 8004b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	011a      	lsls	r2, r3, #4
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	031b      	lsls	r3, r3, #12
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004bd6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004bde:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	4313      	orrs	r3, r2
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a34      	ldr	r2, [pc, #208]	; (8004d28 <TIM_Base_SetConfig+0xe4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00f      	beq.n	8004c7c <TIM_Base_SetConfig+0x38>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c62:	d00b      	beq.n	8004c7c <TIM_Base_SetConfig+0x38>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a31      	ldr	r2, [pc, #196]	; (8004d2c <TIM_Base_SetConfig+0xe8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d007      	beq.n	8004c7c <TIM_Base_SetConfig+0x38>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a30      	ldr	r2, [pc, #192]	; (8004d30 <TIM_Base_SetConfig+0xec>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d003      	beq.n	8004c7c <TIM_Base_SetConfig+0x38>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a2f      	ldr	r2, [pc, #188]	; (8004d34 <TIM_Base_SetConfig+0xf0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d108      	bne.n	8004c8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a25      	ldr	r2, [pc, #148]	; (8004d28 <TIM_Base_SetConfig+0xe4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01b      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9c:	d017      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a22      	ldr	r2, [pc, #136]	; (8004d2c <TIM_Base_SetConfig+0xe8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a21      	ldr	r2, [pc, #132]	; (8004d30 <TIM_Base_SetConfig+0xec>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00f      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a20      	ldr	r2, [pc, #128]	; (8004d34 <TIM_Base_SetConfig+0xf0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00b      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a1f      	ldr	r2, [pc, #124]	; (8004d38 <TIM_Base_SetConfig+0xf4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d007      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <TIM_Base_SetConfig+0xf8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d003      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1d      	ldr	r2, [pc, #116]	; (8004d40 <TIM_Base_SetConfig+0xfc>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d108      	bne.n	8004ce0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a08      	ldr	r2, [pc, #32]	; (8004d28 <TIM_Base_SetConfig+0xe4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d103      	bne.n	8004d14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	615a      	str	r2, [r3, #20]
}
 8004d1a:	bf00      	nop
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40010000 	.word	0x40010000
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	40000800 	.word	0x40000800
 8004d34:	40000c00 	.word	0x40000c00
 8004d38:	40014000 	.word	0x40014000
 8004d3c:	40014400 	.word	0x40014400
 8004d40:	40014800 	.word	0x40014800

08004d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e050      	b.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d018      	beq.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da8:	d013      	beq.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a18      	ldr	r2, [pc, #96]	; (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00e      	beq.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a16      	ldr	r2, [pc, #88]	; (8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d009      	beq.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a15      	ldr	r2, [pc, #84]	; (8004e18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d004      	beq.n	8004dd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a13      	ldr	r2, [pc, #76]	; (8004e1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d10c      	bne.n	8004dec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40010000 	.word	0x40010000
 8004e10:	40000400 	.word	0x40000400
 8004e14:	40000800 	.word	0x40000800
 8004e18:	40000c00 	.word	0x40000c00
 8004e1c:	40014000 	.word	0x40014000

08004e20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e20:	b084      	sub	sp, #16
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	f107 001c 	add.w	r0, r7, #28
 8004e2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d122      	bne.n	8004e7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d105      	bne.n	8004e72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f001 fbee 	bl	8006654 <USB_CoreReset>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	73fb      	strb	r3, [r7, #15]
 8004e7c:	e01a      	b.n	8004eb4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f001 fbe2 	bl	8006654 <USB_CoreReset>
 8004e90:	4603      	mov	r3, r0
 8004e92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	639a      	str	r2, [r3, #56]	; 0x38
 8004ea6:	e005      	b.n	8004eb4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d10b      	bne.n	8004ed2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f043 0206 	orr.w	r2, r3, #6
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f043 0220 	orr.w	r2, r3, #32
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ede:	b004      	add	sp, #16
 8004ee0:	4770      	bx	lr
	...

08004ee4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d165      	bne.n	8004fc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4a41      	ldr	r2, [pc, #260]	; (8005000 <USB_SetTurnaroundTime+0x11c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d906      	bls.n	8004f0e <USB_SetTurnaroundTime+0x2a>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4a40      	ldr	r2, [pc, #256]	; (8005004 <USB_SetTurnaroundTime+0x120>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d202      	bcs.n	8004f0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004f08:	230f      	movs	r3, #15
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	e062      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4a3c      	ldr	r2, [pc, #240]	; (8005004 <USB_SetTurnaroundTime+0x120>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d306      	bcc.n	8004f24 <USB_SetTurnaroundTime+0x40>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4a3b      	ldr	r2, [pc, #236]	; (8005008 <USB_SetTurnaroundTime+0x124>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d202      	bcs.n	8004f24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004f1e:	230e      	movs	r3, #14
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	e057      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4a38      	ldr	r2, [pc, #224]	; (8005008 <USB_SetTurnaroundTime+0x124>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d306      	bcc.n	8004f3a <USB_SetTurnaroundTime+0x56>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4a37      	ldr	r2, [pc, #220]	; (800500c <USB_SetTurnaroundTime+0x128>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d202      	bcs.n	8004f3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f34:	230d      	movs	r3, #13
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	e04c      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4a33      	ldr	r2, [pc, #204]	; (800500c <USB_SetTurnaroundTime+0x128>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d306      	bcc.n	8004f50 <USB_SetTurnaroundTime+0x6c>
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4a32      	ldr	r2, [pc, #200]	; (8005010 <USB_SetTurnaroundTime+0x12c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d802      	bhi.n	8004f50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f4a:	230c      	movs	r3, #12
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	e041      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4a2f      	ldr	r2, [pc, #188]	; (8005010 <USB_SetTurnaroundTime+0x12c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d906      	bls.n	8004f66 <USB_SetTurnaroundTime+0x82>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4a2e      	ldr	r2, [pc, #184]	; (8005014 <USB_SetTurnaroundTime+0x130>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d802      	bhi.n	8004f66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f60:	230b      	movs	r3, #11
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	e036      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	4a2a      	ldr	r2, [pc, #168]	; (8005014 <USB_SetTurnaroundTime+0x130>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d906      	bls.n	8004f7c <USB_SetTurnaroundTime+0x98>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4a29      	ldr	r2, [pc, #164]	; (8005018 <USB_SetTurnaroundTime+0x134>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d802      	bhi.n	8004f7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f76:	230a      	movs	r3, #10
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	e02b      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4a26      	ldr	r2, [pc, #152]	; (8005018 <USB_SetTurnaroundTime+0x134>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d906      	bls.n	8004f92 <USB_SetTurnaroundTime+0xae>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4a25      	ldr	r2, [pc, #148]	; (800501c <USB_SetTurnaroundTime+0x138>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d202      	bcs.n	8004f92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f8c:	2309      	movs	r3, #9
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	e020      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4a21      	ldr	r2, [pc, #132]	; (800501c <USB_SetTurnaroundTime+0x138>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d306      	bcc.n	8004fa8 <USB_SetTurnaroundTime+0xc4>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4a20      	ldr	r2, [pc, #128]	; (8005020 <USB_SetTurnaroundTime+0x13c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d802      	bhi.n	8004fa8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	e015      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4a1d      	ldr	r2, [pc, #116]	; (8005020 <USB_SetTurnaroundTime+0x13c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d906      	bls.n	8004fbe <USB_SetTurnaroundTime+0xda>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4a1c      	ldr	r2, [pc, #112]	; (8005024 <USB_SetTurnaroundTime+0x140>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d202      	bcs.n	8004fbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004fb8:	2307      	movs	r3, #7
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	e00a      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004fbe:	2306      	movs	r3, #6
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	e007      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d102      	bne.n	8004fd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004fca:	2309      	movs	r3, #9
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	e001      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004fd0:	2309      	movs	r3, #9
 8004fd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	029b      	lsls	r3, r3, #10
 8004fe8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004fec:	431a      	orrs	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	00d8acbf 	.word	0x00d8acbf
 8005004:	00e4e1c0 	.word	0x00e4e1c0
 8005008:	00f42400 	.word	0x00f42400
 800500c:	01067380 	.word	0x01067380
 8005010:	011a499f 	.word	0x011a499f
 8005014:	01312cff 	.word	0x01312cff
 8005018:	014ca43f 	.word	0x014ca43f
 800501c:	016e3600 	.word	0x016e3600
 8005020:	01a6ab1f 	.word	0x01a6ab1f
 8005024:	01e84800 	.word	0x01e84800

08005028 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f043 0201 	orr.w	r2, r3, #1
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f023 0201 	bic.w	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d115      	bne.n	80050ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800509a:	2001      	movs	r0, #1
 800509c:	f7fc fac6 	bl	800162c <HAL_Delay>
      ms++;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3301      	adds	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f001 fa45 	bl	8006536 <USB_GetMode>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d01e      	beq.n	80050f0 <USB_SetCurrentMode+0x84>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b31      	cmp	r3, #49	; 0x31
 80050b6:	d9f0      	bls.n	800509a <USB_SetCurrentMode+0x2e>
 80050b8:	e01a      	b.n	80050f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050ba:	78fb      	ldrb	r3, [r7, #3]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d115      	bne.n	80050ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050cc:	2001      	movs	r0, #1
 80050ce:	f7fc faad 	bl	800162c <HAL_Delay>
      ms++;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3301      	adds	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f001 fa2c 	bl	8006536 <USB_GetMode>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <USB_SetCurrentMode+0x84>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b31      	cmp	r3, #49	; 0x31
 80050e8:	d9f0      	bls.n	80050cc <USB_SetCurrentMode+0x60>
 80050ea:	e001      	b.n	80050f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e005      	b.n	80050fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b32      	cmp	r3, #50	; 0x32
 80050f4:	d101      	bne.n	80050fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005104:	b084      	sub	sp, #16
 8005106:	b580      	push	{r7, lr}
 8005108:	b086      	sub	sp, #24
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800511e:	2300      	movs	r3, #0
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	e009      	b.n	8005138 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	3340      	adds	r3, #64	; 0x40
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	2200      	movs	r2, #0
 8005130:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	3301      	adds	r3, #1
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b0e      	cmp	r3, #14
 800513c:	d9f2      	bls.n	8005124 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800513e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d11c      	bne.n	800517e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005152:	f043 0302 	orr.w	r3, r3, #2
 8005156:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	639a      	str	r2, [r3, #56]	; 0x38
 800517c:	e00b      	b.n	8005196 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800519c:	461a      	mov	r2, r3
 800519e:	2300      	movs	r3, #0
 80051a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a8:	4619      	mov	r1, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b0:	461a      	mov	r2, r3
 80051b2:	680b      	ldr	r3, [r1, #0]
 80051b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d10c      	bne.n	80051d6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d104      	bne.n	80051cc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051c2:	2100      	movs	r1, #0
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f965 	bl	8005494 <USB_SetDevSpeed>
 80051ca:	e008      	b.n	80051de <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051cc:	2101      	movs	r1, #1
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f960 	bl	8005494 <USB_SetDevSpeed>
 80051d4:	e003      	b.n	80051de <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051d6:	2103      	movs	r1, #3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f95b 	bl	8005494 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051de:	2110      	movs	r1, #16
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f8f3 	bl	80053cc <USB_FlushTxFifo>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f91f 	bl	8005434 <USB_FlushRxFifo>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005206:	461a      	mov	r2, r3
 8005208:	2300      	movs	r3, #0
 800520a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005212:	461a      	mov	r2, r3
 8005214:	2300      	movs	r3, #0
 8005216:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521e:	461a      	mov	r2, r3
 8005220:	2300      	movs	r3, #0
 8005222:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005224:	2300      	movs	r3, #0
 8005226:	613b      	str	r3, [r7, #16]
 8005228:	e043      	b.n	80052b2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800523c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005240:	d118      	bne.n	8005274 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005254:	461a      	mov	r2, r3
 8005256:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800525a:	6013      	str	r3, [r2, #0]
 800525c:	e013      	b.n	8005286 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	461a      	mov	r2, r3
 800526c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	e008      	b.n	8005286 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005280:	461a      	mov	r2, r3
 8005282:	2300      	movs	r3, #0
 8005284:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005292:	461a      	mov	r2, r3
 8005294:	2300      	movs	r3, #0
 8005296:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a4:	461a      	mov	r2, r3
 80052a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	3301      	adds	r3, #1
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d3b7      	bcc.n	800522a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ba:	2300      	movs	r3, #0
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	e043      	b.n	8005348 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052d6:	d118      	bne.n	800530a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10a      	bne.n	80052f4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ea:	461a      	mov	r2, r3
 80052ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	e013      	b.n	800531c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005300:	461a      	mov	r2, r3
 8005302:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	e008      	b.n	800531c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005316:	461a      	mov	r2, r3
 8005318:	2300      	movs	r3, #0
 800531a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005328:	461a      	mov	r2, r3
 800532a:	2300      	movs	r3, #0
 800532c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533a:	461a      	mov	r2, r3
 800533c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005340:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	3301      	adds	r3, #1
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	429a      	cmp	r2, r3
 800534e:	d3b7      	bcc.n	80052c0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800535e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005362:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005370:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	2b00      	cmp	r3, #0
 8005376:	d105      	bne.n	8005384 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f043 0210 	orr.w	r2, r3, #16
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699a      	ldr	r2, [r3, #24]
 8005388:	4b0f      	ldr	r3, [pc, #60]	; (80053c8 <USB_DevInit+0x2c4>)
 800538a:	4313      	orrs	r3, r2
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005392:	2b00      	cmp	r3, #0
 8005394:	d005      	beq.n	80053a2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	f043 0208 	orr.w	r2, r3, #8
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d107      	bne.n	80053b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053b0:	f043 0304 	orr.w	r3, r3, #4
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3718      	adds	r7, #24
 80053be:	46bd      	mov	sp, r7
 80053c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053c4:	b004      	add	sp, #16
 80053c6:	4770      	bx	lr
 80053c8:	803c3800 	.word	0x803c3800

080053cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3301      	adds	r3, #1
 80053de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4a13      	ldr	r2, [pc, #76]	; (8005430 <USB_FlushTxFifo+0x64>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d901      	bls.n	80053ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e01b      	b.n	8005424 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	daf2      	bge.n	80053da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	019b      	lsls	r3, r3, #6
 80053fc:	f043 0220 	orr.w	r2, r3, #32
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3301      	adds	r3, #1
 8005408:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4a08      	ldr	r2, [pc, #32]	; (8005430 <USB_FlushTxFifo+0x64>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d901      	bls.n	8005416 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e006      	b.n	8005424 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b20      	cmp	r3, #32
 8005420:	d0f0      	beq.n	8005404 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	00030d40 	.word	0x00030d40

08005434 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3301      	adds	r3, #1
 8005444:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4a11      	ldr	r2, [pc, #68]	; (8005490 <USB_FlushRxFifo+0x5c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e018      	b.n	8005484 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	daf2      	bge.n	8005440 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2210      	movs	r2, #16
 8005462:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3301      	adds	r3, #1
 8005468:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4a08      	ldr	r2, [pc, #32]	; (8005490 <USB_FlushRxFifo+0x5c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d901      	bls.n	8005476 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e006      	b.n	8005484 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b10      	cmp	r3, #16
 8005480:	d0f0      	beq.n	8005464 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	00030d40 	.word	0x00030d40

08005494 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054b4:	4313      	orrs	r3, r2
 80054b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b087      	sub	sp, #28
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 0306 	and.w	r3, r3, #6
 80054de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d102      	bne.n	80054ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80054e6:	2300      	movs	r3, #0
 80054e8:	75fb      	strb	r3, [r7, #23]
 80054ea:	e00a      	b.n	8005502 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d002      	beq.n	80054f8 <USB_GetDevSpeed+0x32>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b06      	cmp	r3, #6
 80054f6:	d102      	bne.n	80054fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80054f8:	2302      	movs	r3, #2
 80054fa:	75fb      	strb	r3, [r7, #23]
 80054fc:	e001      	b.n	8005502 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80054fe:	230f      	movs	r3, #15
 8005500:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005502:	7dfb      	ldrb	r3, [r7, #23]
}
 8005504:	4618      	mov	r0, r3
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d13a      	bne.n	80055a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005532:	69da      	ldr	r2, [r3, #28]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	f003 030f 	and.w	r3, r3, #15
 800553c:	2101      	movs	r1, #1
 800553e:	fa01 f303 	lsl.w	r3, r1, r3
 8005542:	b29b      	uxth	r3, r3
 8005544:	68f9      	ldr	r1, [r7, #12]
 8005546:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800554a:	4313      	orrs	r3, r2
 800554c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d155      	bne.n	8005610 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	791b      	ldrb	r3, [r3, #4]
 800557e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005580:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	059b      	lsls	r3, r3, #22
 8005586:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005588:	4313      	orrs	r3, r2
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	0151      	lsls	r1, r2, #5
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	440a      	add	r2, r1
 8005592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800559a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	e036      	b.n	8005610 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a8:	69da      	ldr	r2, [r3, #28]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	2101      	movs	r1, #1
 80055b4:	fa01 f303 	lsl.w	r3, r1, r3
 80055b8:	041b      	lsls	r3, r3, #16
 80055ba:	68f9      	ldr	r1, [r7, #12]
 80055bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055c0:	4313      	orrs	r3, r2
 80055c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d11a      	bne.n	8005610 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	791b      	ldrb	r3, [r3, #4]
 80055f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055f6:	430b      	orrs	r3, r1
 80055f8:	4313      	orrs	r3, r2
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	0151      	lsls	r1, r2, #5
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	440a      	add	r2, r1
 8005602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800560e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	785b      	ldrb	r3, [r3, #1]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d161      	bne.n	8005700 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800564e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005652:	d11f      	bne.n	8005694 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005672:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	440a      	add	r2, r1
 800568a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005692:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	2101      	movs	r1, #1
 80056a6:	fa01 f303 	lsl.w	r3, r1, r3
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	43db      	mvns	r3, r3
 80056ae:	68f9      	ldr	r1, [r7, #12]
 80056b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056b4:	4013      	ands	r3, r2
 80056b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056be:	69da      	ldr	r2, [r3, #28]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	f003 030f 	and.w	r3, r3, #15
 80056c8:	2101      	movs	r1, #1
 80056ca:	fa01 f303 	lsl.w	r3, r1, r3
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	43db      	mvns	r3, r3
 80056d2:	68f9      	ldr	r1, [r7, #12]
 80056d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056d8:	4013      	ands	r3, r2
 80056da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	0159      	lsls	r1, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	440b      	add	r3, r1
 80056f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f6:	4619      	mov	r1, r3
 80056f8:	4b35      	ldr	r3, [pc, #212]	; (80057d0 <USB_DeactivateEndpoint+0x1b0>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	600b      	str	r3, [r1, #0]
 80056fe:	e060      	b.n	80057c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005712:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005716:	d11f      	bne.n	8005758 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005732:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005736:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	0151      	lsls	r1, r2, #5
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	440a      	add	r2, r1
 800574e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005752:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005756:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	2101      	movs	r1, #1
 800576a:	fa01 f303 	lsl.w	r3, r1, r3
 800576e:	041b      	lsls	r3, r3, #16
 8005770:	43db      	mvns	r3, r3
 8005772:	68f9      	ldr	r1, [r7, #12]
 8005774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005778:	4013      	ands	r3, r2
 800577a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	f003 030f 	and.w	r3, r3, #15
 800578c:	2101      	movs	r1, #1
 800578e:	fa01 f303 	lsl.w	r3, r1, r3
 8005792:	041b      	lsls	r3, r3, #16
 8005794:	43db      	mvns	r3, r3
 8005796:	68f9      	ldr	r1, [r7, #12]
 8005798:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800579c:	4013      	ands	r3, r2
 800579e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	0159      	lsls	r1, r3, #5
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	440b      	add	r3, r1
 80057b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ba:	4619      	mov	r1, r3
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <USB_DeactivateEndpoint+0x1b4>)
 80057be:	4013      	ands	r3, r2
 80057c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	ec337800 	.word	0xec337800
 80057d4:	eff37800 	.word	0xeff37800

080057d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	; 0x28
 80057dc:	af02      	add	r7, sp, #8
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	4613      	mov	r3, r2
 80057e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	785b      	ldrb	r3, [r3, #1]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	f040 815c 	bne.w	8005ab2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d132      	bne.n	8005868 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	0151      	lsls	r1, r2, #5
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	440a      	add	r2, r1
 8005818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800581c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005820:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005824:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	0151      	lsls	r1, r2, #5
 8005838:	69fa      	ldr	r2, [r7, #28]
 800583a:	440a      	add	r2, r1
 800583c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005840:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005844:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	0151      	lsls	r1, r2, #5
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	440a      	add	r2, r1
 800585c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005860:	0cdb      	lsrs	r3, r3, #19
 8005862:	04db      	lsls	r3, r3, #19
 8005864:	6113      	str	r3, [r2, #16]
 8005866:	e074      	b.n	8005952 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	0151      	lsls	r1, r2, #5
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	440a      	add	r2, r1
 800587e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005882:	0cdb      	lsrs	r3, r3, #19
 8005884:	04db      	lsls	r3, r3, #19
 8005886:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	440a      	add	r2, r1
 800589e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	6999      	ldr	r1, [r3, #24]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	440b      	add	r3, r1
 80058c4:	1e59      	subs	r1, r3, #1
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80058ce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058d0:	4b9d      	ldr	r3, [pc, #628]	; (8005b48 <USB_EPStartXfer+0x370>)
 80058d2:	400b      	ands	r3, r1
 80058d4:	69b9      	ldr	r1, [r7, #24]
 80058d6:	0148      	lsls	r0, r1, #5
 80058d8:	69f9      	ldr	r1, [r7, #28]
 80058da:	4401      	add	r1, r0
 80058dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058e0:	4313      	orrs	r3, r2
 80058e2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058fa:	69b9      	ldr	r1, [r7, #24]
 80058fc:	0148      	lsls	r0, r1, #5
 80058fe:	69f9      	ldr	r1, [r7, #28]
 8005900:	4401      	add	r1, r0
 8005902:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005906:	4313      	orrs	r3, r2
 8005908:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	791b      	ldrb	r3, [r3, #4]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d11f      	bne.n	8005952 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	440a      	add	r2, r1
 8005928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005930:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	69fa      	ldr	r2, [r7, #28]
 8005946:	440a      	add	r2, r1
 8005948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800594c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005950:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005952:	79fb      	ldrb	r3, [r7, #7]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d14b      	bne.n	80059f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d009      	beq.n	8005974 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596c:	461a      	mov	r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	791b      	ldrb	r3, [r3, #4]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d128      	bne.n	80059ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d110      	bne.n	80059ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	e00f      	b.n	80059ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	0151      	lsls	r1, r2, #5
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	440a      	add	r2, r1
 80059c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	0151      	lsls	r1, r2, #5
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	e133      	b.n	8005c58 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	69fa      	ldr	r2, [r7, #28]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a0e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	791b      	ldrb	r3, [r3, #4]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d015      	beq.n	8005a44 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 811b 	beq.w	8005c58 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	2101      	movs	r1, #1
 8005a34:	fa01 f303 	lsl.w	r3, r1, r3
 8005a38:	69f9      	ldr	r1, [r7, #28]
 8005a3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	634b      	str	r3, [r1, #52]	; 0x34
 8005a42:	e109      	b.n	8005c58 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d110      	bne.n	8005a76 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	0151      	lsls	r1, r2, #5
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	440a      	add	r2, r1
 8005a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	e00f      	b.n	8005a96 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	0151      	lsls	r1, r2, #5
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	440a      	add	r2, r1
 8005a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a94:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	6919      	ldr	r1, [r3, #16]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	781a      	ldrb	r2, [r3, #0]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	b298      	uxth	r0, r3
 8005aa4:	79fb      	ldrb	r3, [r7, #7]
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 fade 	bl	800606c <USB_WritePacket>
 8005ab0:	e0d2      	b.n	8005c58 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005acc:	0cdb      	lsrs	r3, r3, #19
 8005ace:	04db      	lsls	r3, r3, #19
 8005ad0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005af0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005af4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d126      	bne.n	8005b4c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b14:	69b9      	ldr	r1, [r7, #24]
 8005b16:	0148      	lsls	r0, r1, #5
 8005b18:	69f9      	ldr	r1, [r7, #28]
 8005b1a:	4401      	add	r1, r0
 8005b1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b20:	4313      	orrs	r3, r2
 8005b22:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	0151      	lsls	r1, r2, #5
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	440a      	add	r2, r1
 8005b3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b42:	6113      	str	r3, [r2, #16]
 8005b44:	e03a      	b.n	8005bbc <USB_EPStartXfer+0x3e4>
 8005b46:	bf00      	nop
 8005b48:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	699a      	ldr	r2, [r3, #24]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	1e5a      	subs	r2, r3, #1
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	8afa      	ldrh	r2, [r7, #22]
 8005b68:	fb03 f202 	mul.w	r2, r3, r2
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7c:	691a      	ldr	r2, [r3, #16]
 8005b7e:	8afb      	ldrh	r3, [r7, #22]
 8005b80:	04d9      	lsls	r1, r3, #19
 8005b82:	4b38      	ldr	r3, [pc, #224]	; (8005c64 <USB_EPStartXfer+0x48c>)
 8005b84:	400b      	ands	r3, r1
 8005b86:	69b9      	ldr	r1, [r7, #24]
 8005b88:	0148      	lsls	r0, r1, #5
 8005b8a:	69f9      	ldr	r1, [r7, #28]
 8005b8c:	4401      	add	r1, r0
 8005b8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b92:	4313      	orrs	r3, r2
 8005b94:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba2:	691a      	ldr	r2, [r3, #16]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bac:	69b9      	ldr	r1, [r7, #24]
 8005bae:	0148      	lsls	r0, r1, #5
 8005bb0:	69f9      	ldr	r1, [r7, #28]
 8005bb2:	4401      	add	r1, r0
 8005bb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005bbc:	79fb      	ldrb	r3, [r7, #7]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d10d      	bne.n	8005bde <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d009      	beq.n	8005bde <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	6919      	ldr	r1, [r3, #16]
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bda:	460a      	mov	r2, r1
 8005bdc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	791b      	ldrb	r3, [r3, #4]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d128      	bne.n	8005c38 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d110      	bne.n	8005c18 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	0151      	lsls	r1, r2, #5
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	440a      	add	r2, r1
 8005c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	e00f      	b.n	8005c38 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	0151      	lsls	r1, r2, #5
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3720      	adds	r7, #32
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	1ff80000 	.word	0x1ff80000

08005c68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	4613      	mov	r3, r2
 8005c74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	785b      	ldrb	r3, [r3, #1]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	f040 80ce 	bne.w	8005e26 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d132      	bne.n	8005cf8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf0:	0cdb      	lsrs	r3, r3, #19
 8005cf2:	04db      	lsls	r3, r3, #19
 8005cf4:	6113      	str	r3, [r2, #16]
 8005cf6:	e04e      	b.n	8005d96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d12:	0cdb      	lsrs	r3, r3, #19
 8005d14:	04db      	lsls	r3, r3, #19
 8005d16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d3a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	699a      	ldr	r2, [r3, #24]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d903      	bls.n	8005d50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	0151      	lsls	r1, r2, #5
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	440a      	add	r2, r1
 8005d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7c:	691a      	ldr	r2, [r3, #16]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d86:	6939      	ldr	r1, [r7, #16]
 8005d88:	0148      	lsls	r0, r1, #5
 8005d8a:	6979      	ldr	r1, [r7, #20]
 8005d8c:	4401      	add	r1, r0
 8005d8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d92:	4313      	orrs	r3, r2
 8005d94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d96:	79fb      	ldrb	r3, [r7, #7]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d11e      	bne.n	8005dda <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d009      	beq.n	8005db8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db0:	461a      	mov	r2, r3
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	0151      	lsls	r1, r2, #5
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	440a      	add	r2, r1
 8005dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	e097      	b.n	8005f0a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	0151      	lsls	r1, r2, #5
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	440a      	add	r2, r1
 8005df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005df8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 8083 	beq.w	8005f0a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	f003 030f 	and.w	r3, r3, #15
 8005e14:	2101      	movs	r1, #1
 8005e16:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1a:	6979      	ldr	r1, [r7, #20]
 8005e1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e20:	4313      	orrs	r3, r2
 8005e22:	634b      	str	r3, [r1, #52]	; 0x34
 8005e24:	e071      	b.n	8005f0a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e40:	0cdb      	lsrs	r3, r3, #19
 8005e42:	04db      	lsls	r3, r3, #19
 8005e44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	0151      	lsls	r1, r2, #5
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ea0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	691a      	ldr	r2, [r3, #16]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eb8:	6939      	ldr	r1, [r7, #16]
 8005eba:	0148      	lsls	r0, r1, #5
 8005ebc:	6979      	ldr	r1, [r7, #20]
 8005ebe:	4401      	add	r1, r0
 8005ec0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005ec8:	79fb      	ldrb	r3, [r7, #7]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d10d      	bne.n	8005eea <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d009      	beq.n	8005eea <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	6919      	ldr	r1, [r3, #16]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee6:	460a      	mov	r2, r1
 8005ee8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	0151      	lsls	r1, r2, #5
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	440a      	add	r2, r1
 8005f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	785b      	ldrb	r3, [r3, #1]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d14a      	bne.n	8005fcc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f4e:	f040 8086 	bne.w	800605e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	7812      	ldrb	r2, [r2, #0]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f74:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	7812      	ldrb	r2, [r2, #0]
 8005f8a:	0151      	lsls	r1, r2, #5
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	440a      	add	r2, r1
 8005f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d902      	bls.n	8005fb0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	75fb      	strb	r3, [r7, #23]
          break;
 8005fae:	e056      	b.n	800605e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc8:	d0e7      	beq.n	8005f9a <USB_EPStopXfer+0x82>
 8005fca:	e048      	b.n	800605e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fe4:	d13b      	bne.n	800605e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	7812      	ldrb	r2, [r2, #0]
 8005ffa:	0151      	lsls	r1, r2, #5
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	440a      	add	r2, r1
 8006000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006004:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006008:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	7812      	ldrb	r2, [r2, #0]
 800601e:	0151      	lsls	r1, r2, #5
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	440a      	add	r2, r1
 8006024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006028:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800602c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3301      	adds	r3, #1
 8006032:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f242 7210 	movw	r2, #10000	; 0x2710
 800603a:	4293      	cmp	r3, r2
 800603c:	d902      	bls.n	8006044 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	75fb      	strb	r3, [r7, #23]
          break;
 8006042:	e00c      	b.n	800605e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800605c:	d0e7      	beq.n	800602e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800605e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006060:	4618      	mov	r0, r3
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800606c:	b480      	push	{r7}
 800606e:	b089      	sub	sp, #36	; 0x24
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	4611      	mov	r1, r2
 8006078:	461a      	mov	r2, r3
 800607a:	460b      	mov	r3, r1
 800607c:	71fb      	strb	r3, [r7, #7]
 800607e:	4613      	mov	r3, r2
 8006080:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800608a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800608e:	2b00      	cmp	r3, #0
 8006090:	d123      	bne.n	80060da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006092:	88bb      	ldrh	r3, [r7, #4]
 8006094:	3303      	adds	r3, #3
 8006096:	089b      	lsrs	r3, r3, #2
 8006098:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800609a:	2300      	movs	r3, #0
 800609c:	61bb      	str	r3, [r7, #24]
 800609e:	e018      	b.n	80060d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	031a      	lsls	r2, r3, #12
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ac:	461a      	mov	r2, r3
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	3301      	adds	r3, #1
 80060b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	3301      	adds	r3, #1
 80060be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	3301      	adds	r3, #1
 80060c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	3301      	adds	r3, #1
 80060ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	3301      	adds	r3, #1
 80060d0:	61bb      	str	r3, [r7, #24]
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d3e2      	bcc.n	80060a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3724      	adds	r7, #36	; 0x24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b08b      	sub	sp, #44	; 0x2c
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	4613      	mov	r3, r2
 80060f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060fe:	88fb      	ldrh	r3, [r7, #6]
 8006100:	089b      	lsrs	r3, r3, #2
 8006102:	b29b      	uxth	r3, r3
 8006104:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006106:	88fb      	ldrh	r3, [r7, #6]
 8006108:	f003 0303 	and.w	r3, r3, #3
 800610c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800610e:	2300      	movs	r3, #0
 8006110:	623b      	str	r3, [r7, #32]
 8006112:	e014      	b.n	800613e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	3301      	adds	r3, #1
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	3301      	adds	r3, #1
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	3301      	adds	r3, #1
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	3301      	adds	r3, #1
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	3301      	adds	r3, #1
 800613c:	623b      	str	r3, [r7, #32]
 800613e:	6a3a      	ldr	r2, [r7, #32]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	429a      	cmp	r2, r3
 8006144:	d3e6      	bcc.n	8006114 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006146:	8bfb      	ldrh	r3, [r7, #30]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01e      	beq.n	800618a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006156:	461a      	mov	r2, r3
 8006158:	f107 0310 	add.w	r3, r7, #16
 800615c:	6812      	ldr	r2, [r2, #0]
 800615e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	fa22 f303 	lsr.w	r3, r2, r3
 800616c:	b2da      	uxtb	r2, r3
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	701a      	strb	r2, [r3, #0]
      i++;
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	3301      	adds	r3, #1
 8006176:	623b      	str	r3, [r7, #32]
      pDest++;
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	3301      	adds	r3, #1
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800617e:	8bfb      	ldrh	r3, [r7, #30]
 8006180:	3b01      	subs	r3, #1
 8006182:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006184:	8bfb      	ldrh	r3, [r7, #30]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1ea      	bne.n	8006160 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800618c:	4618      	mov	r0, r3
 800618e:	372c      	adds	r7, #44	; 0x2c
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	785b      	ldrb	r3, [r3, #1]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d12c      	bne.n	800620e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	db12      	blt.n	80061ec <USB_EPSetStall+0x54>
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00f      	beq.n	80061ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	0151      	lsls	r1, r2, #5
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	440a      	add	r2, r1
 80061e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	0151      	lsls	r1, r2, #5
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	440a      	add	r2, r1
 8006202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006206:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	e02b      	b.n	8006266 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	db12      	blt.n	8006246 <USB_EPSetStall+0xae>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00f      	beq.n	8006246 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	440a      	add	r2, r1
 800623c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006240:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006244:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	0151      	lsls	r1, r2, #5
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	440a      	add	r2, r1
 800625c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006260:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006264:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d128      	bne.n	80062e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	0151      	lsls	r1, r2, #5
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	440a      	add	r2, r1
 80062a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	791b      	ldrb	r3, [r3, #4]
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d003      	beq.n	80062c0 <USB_EPClearStall+0x4c>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	791b      	ldrb	r3, [r3, #4]
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d138      	bne.n	8006332 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	0151      	lsls	r1, r2, #5
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	440a      	add	r2, r1
 80062d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	e027      	b.n	8006332 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	0151      	lsls	r1, r2, #5
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	440a      	add	r2, r1
 80062f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006300:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	791b      	ldrb	r3, [r3, #4]
 8006306:	2b03      	cmp	r3, #3
 8006308:	d003      	beq.n	8006312 <USB_EPClearStall+0x9e>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	791b      	ldrb	r3, [r3, #4]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d10f      	bne.n	8006332 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	0151      	lsls	r1, r2, #5
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	440a      	add	r2, r1
 8006328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800632c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006330:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800635e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006362:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	78fb      	ldrb	r3, [r7, #3]
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006374:	68f9      	ldr	r1, [r7, #12]
 8006376:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800637a:	4313      	orrs	r3, r2
 800637c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063a6:	f023 0303 	bic.w	r3, r3, #3
 80063aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063ba:	f023 0302 	bic.w	r3, r3, #2
 80063be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b085      	sub	sp, #20
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063e8:	f023 0303 	bic.w	r3, r3, #3
 80063ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063fc:	f043 0302 	orr.w	r3, r3, #2
 8006400:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4013      	ands	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006428:	68fb      	ldr	r3, [r7, #12]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006436:	b480      	push	{r7}
 8006438:	b085      	sub	sp, #20
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	4013      	ands	r3, r2
 8006458:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	0c1b      	lsrs	r3, r3, #16
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800646a:	b480      	push	{r7}
 800646c:	b085      	sub	sp, #20
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	4013      	ands	r3, r2
 800648c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	b29b      	uxth	r3, r3
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800649e:	b480      	push	{r7}
 80064a0:	b085      	sub	sp, #20
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	460b      	mov	r3, r1
 80064a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80064ae:	78fb      	ldrb	r3, [r7, #3]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	4013      	ands	r3, r2
 80064ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064cc:	68bb      	ldr	r3, [r7, #8]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064da:	b480      	push	{r7}
 80064dc:	b087      	sub	sp, #28
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	460b      	mov	r3, r1
 80064e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	f003 030f 	and.w	r3, r3, #15
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	fa22 f303 	lsr.w	r3, r2, r3
 800650a:	01db      	lsls	r3, r3, #7
 800650c:	b2db      	uxtb	r3, r3
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006514:	78fb      	ldrb	r3, [r7, #3]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4013      	ands	r3, r2
 8006526:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006528:	68bb      	ldr	r3, [r7, #8]
}
 800652a:	4618      	mov	r0, r3
 800652c:	371c      	adds	r7, #28
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	f003 0301 	and.w	r3, r3, #1
}
 8006546:	4618      	mov	r0, r3
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006552:	b480      	push	{r7}
 8006554:	b085      	sub	sp, #20
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006570:	f023 0307 	bic.w	r3, r3, #7
 8006574:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006588:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	460b      	mov	r3, r1
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	333c      	adds	r3, #60	; 0x3c
 80065ae:	3304      	adds	r3, #4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	4a26      	ldr	r2, [pc, #152]	; (8006650 <USB_EP0_OutStart+0xb8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d90a      	bls.n	80065d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065cc:	d101      	bne.n	80065d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	e037      	b.n	8006642 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d8:	461a      	mov	r2, r3
 80065da:	2300      	movs	r3, #0
 80065dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006600:	f043 0318 	orr.w	r3, r3, #24
 8006604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006614:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006618:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800661a:	7afb      	ldrb	r3, [r7, #11]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d10f      	bne.n	8006640 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	461a      	mov	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800663a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800663e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	4f54300a 	.word	0x4f54300a

08006654 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3301      	adds	r3, #1
 8006664:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4a13      	ldr	r2, [pc, #76]	; (80066b8 <USB_CoreReset+0x64>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d901      	bls.n	8006672 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e01b      	b.n	80066aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	daf2      	bge.n	8006660 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f043 0201 	orr.w	r2, r3, #1
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3301      	adds	r3, #1
 800668e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4a09      	ldr	r2, [pc, #36]	; (80066b8 <USB_CoreReset+0x64>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d901      	bls.n	800669c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e006      	b.n	80066aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d0f0      	beq.n	800668a <USB_CoreReset+0x36>

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	00030d40 	.word	0x00030d40

080066bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80066c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80066cc:	f002 fc8a 	bl	8008fe4 <USBD_static_malloc>
 80066d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d109      	bne.n	80066ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	32b0      	adds	r2, #176	; 0xb0
 80066e2:	2100      	movs	r1, #0
 80066e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80066e8:	2302      	movs	r3, #2
 80066ea:	e0d4      	b.n	8006896 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80066ec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80066f0:	2100      	movs	r1, #0
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f002 fce4 	bl	80090c0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	32b0      	adds	r2, #176	; 0xb0
 8006702:	68f9      	ldr	r1, [r7, #12]
 8006704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	32b0      	adds	r2, #176	; 0xb0
 8006712:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	7c1b      	ldrb	r3, [r3, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d138      	bne.n	8006796 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006724:	4b5e      	ldr	r3, [pc, #376]	; (80068a0 <USBD_CDC_Init+0x1e4>)
 8006726:	7819      	ldrb	r1, [r3, #0]
 8006728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800672c:	2202      	movs	r2, #2
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f002 fb35 	bl	8008d9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006734:	4b5a      	ldr	r3, [pc, #360]	; (80068a0 <USBD_CDC_Init+0x1e4>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	f003 020f 	and.w	r2, r3, #15
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	440b      	add	r3, r1
 8006748:	3324      	adds	r3, #36	; 0x24
 800674a:	2201      	movs	r2, #1
 800674c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800674e:	4b55      	ldr	r3, [pc, #340]	; (80068a4 <USBD_CDC_Init+0x1e8>)
 8006750:	7819      	ldrb	r1, [r3, #0]
 8006752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006756:	2202      	movs	r2, #2
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f002 fb20 	bl	8008d9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800675e:	4b51      	ldr	r3, [pc, #324]	; (80068a4 <USBD_CDC_Init+0x1e8>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	f003 020f 	and.w	r2, r3, #15
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	4613      	mov	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	440b      	add	r3, r1
 8006772:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006776:	2201      	movs	r2, #1
 8006778:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800677a:	4b4b      	ldr	r3, [pc, #300]	; (80068a8 <USBD_CDC_Init+0x1ec>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	f003 020f 	and.w	r2, r3, #15
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	4613      	mov	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	440b      	add	r3, r1
 800678e:	3326      	adds	r3, #38	; 0x26
 8006790:	2210      	movs	r2, #16
 8006792:	801a      	strh	r2, [r3, #0]
 8006794:	e035      	b.n	8006802 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006796:	4b42      	ldr	r3, [pc, #264]	; (80068a0 <USBD_CDC_Init+0x1e4>)
 8006798:	7819      	ldrb	r1, [r3, #0]
 800679a:	2340      	movs	r3, #64	; 0x40
 800679c:	2202      	movs	r2, #2
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f002 fafd 	bl	8008d9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80067a4:	4b3e      	ldr	r3, [pc, #248]	; (80068a0 <USBD_CDC_Init+0x1e4>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	f003 020f 	and.w	r2, r3, #15
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	4613      	mov	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	440b      	add	r3, r1
 80067b8:	3324      	adds	r3, #36	; 0x24
 80067ba:	2201      	movs	r2, #1
 80067bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80067be:	4b39      	ldr	r3, [pc, #228]	; (80068a4 <USBD_CDC_Init+0x1e8>)
 80067c0:	7819      	ldrb	r1, [r3, #0]
 80067c2:	2340      	movs	r3, #64	; 0x40
 80067c4:	2202      	movs	r2, #2
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f002 fae9 	bl	8008d9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80067cc:	4b35      	ldr	r3, [pc, #212]	; (80068a4 <USBD_CDC_Init+0x1e8>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	f003 020f 	and.w	r2, r3, #15
 80067d4:	6879      	ldr	r1, [r7, #4]
 80067d6:	4613      	mov	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	440b      	add	r3, r1
 80067e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067e4:	2201      	movs	r2, #1
 80067e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80067e8:	4b2f      	ldr	r3, [pc, #188]	; (80068a8 <USBD_CDC_Init+0x1ec>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	f003 020f 	and.w	r2, r3, #15
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	440b      	add	r3, r1
 80067fc:	3326      	adds	r3, #38	; 0x26
 80067fe:	2210      	movs	r2, #16
 8006800:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006802:	4b29      	ldr	r3, [pc, #164]	; (80068a8 <USBD_CDC_Init+0x1ec>)
 8006804:	7819      	ldrb	r1, [r3, #0]
 8006806:	2308      	movs	r3, #8
 8006808:	2203      	movs	r2, #3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f002 fac7 	bl	8008d9e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006810:	4b25      	ldr	r3, [pc, #148]	; (80068a8 <USBD_CDC_Init+0x1ec>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	f003 020f 	and.w	r2, r3, #15
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	4613      	mov	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	440b      	add	r3, r1
 8006824:	3324      	adds	r3, #36	; 0x24
 8006826:	2201      	movs	r2, #1
 8006828:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	33b0      	adds	r3, #176	; 0xb0
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006860:	2302      	movs	r3, #2
 8006862:	e018      	b.n	8006896 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	7c1b      	ldrb	r3, [r3, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800686c:	4b0d      	ldr	r3, [pc, #52]	; (80068a4 <USBD_CDC_Init+0x1e8>)
 800686e:	7819      	ldrb	r1, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f002 fb7e 	bl	8008f7c <USBD_LL_PrepareReceive>
 8006880:	e008      	b.n	8006894 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006882:	4b08      	ldr	r3, [pc, #32]	; (80068a4 <USBD_CDC_Init+0x1e8>)
 8006884:	7819      	ldrb	r1, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800688c:	2340      	movs	r3, #64	; 0x40
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f002 fb74 	bl	8008f7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	200000a3 	.word	0x200000a3
 80068a4:	200000a4 	.word	0x200000a4
 80068a8:	200000a5 	.word	0x200000a5

080068ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80068b8:	4b3a      	ldr	r3, [pc, #232]	; (80069a4 <USBD_CDC_DeInit+0xf8>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f002 fa93 	bl	8008dea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80068c4:	4b37      	ldr	r3, [pc, #220]	; (80069a4 <USBD_CDC_DeInit+0xf8>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	f003 020f 	and.w	r2, r3, #15
 80068cc:	6879      	ldr	r1, [r7, #4]
 80068ce:	4613      	mov	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	440b      	add	r3, r1
 80068d8:	3324      	adds	r3, #36	; 0x24
 80068da:	2200      	movs	r2, #0
 80068dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80068de:	4b32      	ldr	r3, [pc, #200]	; (80069a8 <USBD_CDC_DeInit+0xfc>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f002 fa80 	bl	8008dea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80068ea:	4b2f      	ldr	r3, [pc, #188]	; (80069a8 <USBD_CDC_DeInit+0xfc>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	f003 020f 	and.w	r2, r3, #15
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	4613      	mov	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	440b      	add	r3, r1
 80068fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006902:	2200      	movs	r2, #0
 8006904:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006906:	4b29      	ldr	r3, [pc, #164]	; (80069ac <USBD_CDC_DeInit+0x100>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f002 fa6c 	bl	8008dea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006912:	4b26      	ldr	r3, [pc, #152]	; (80069ac <USBD_CDC_DeInit+0x100>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	f003 020f 	and.w	r2, r3, #15
 800691a:	6879      	ldr	r1, [r7, #4]
 800691c:	4613      	mov	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	440b      	add	r3, r1
 8006926:	3324      	adds	r3, #36	; 0x24
 8006928:	2200      	movs	r2, #0
 800692a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800692c:	4b1f      	ldr	r3, [pc, #124]	; (80069ac <USBD_CDC_DeInit+0x100>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	f003 020f 	and.w	r2, r3, #15
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	4613      	mov	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	440b      	add	r3, r1
 8006940:	3326      	adds	r3, #38	; 0x26
 8006942:	2200      	movs	r2, #0
 8006944:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	32b0      	adds	r2, #176	; 0xb0
 8006950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d01f      	beq.n	8006998 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	33b0      	adds	r3, #176	; 0xb0
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	32b0      	adds	r2, #176	; 0xb0
 8006976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697a:	4618      	mov	r0, r3
 800697c:	f002 fb40 	bl	8009000 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	32b0      	adds	r2, #176	; 0xb0
 800698a:	2100      	movs	r1, #0
 800698c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	200000a3 	.word	0x200000a3
 80069a8:	200000a4 	.word	0x200000a4
 80069ac:	200000a5 	.word	0x200000a5

080069b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	32b0      	adds	r2, #176	; 0xb0
 80069c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80069dc:	2303      	movs	r3, #3
 80069de:	e0bf      	b.n	8006b60 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d050      	beq.n	8006a8e <USBD_CDC_Setup+0xde>
 80069ec:	2b20      	cmp	r3, #32
 80069ee:	f040 80af 	bne.w	8006b50 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	88db      	ldrh	r3, [r3, #6]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d03a      	beq.n	8006a70 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	b25b      	sxtb	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	da1b      	bge.n	8006a3c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	33b0      	adds	r3, #176	; 0xb0
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006a1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	88d2      	ldrh	r2, [r2, #6]
 8006a20:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	88db      	ldrh	r3, [r3, #6]
 8006a26:	2b07      	cmp	r3, #7
 8006a28:	bf28      	it	cs
 8006a2a:	2307      	movcs	r3, #7
 8006a2c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	89fa      	ldrh	r2, [r7, #14]
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 fd89 	bl	800854c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006a3a:	e090      	b.n	8006b5e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	785a      	ldrb	r2, [r3, #1]
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	88db      	ldrh	r3, [r3, #6]
 8006a4a:	2b3f      	cmp	r3, #63	; 0x3f
 8006a4c:	d803      	bhi.n	8006a56 <USBD_CDC_Setup+0xa6>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	88db      	ldrh	r3, [r3, #6]
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	e000      	b.n	8006a58 <USBD_CDC_Setup+0xa8>
 8006a56:	2240      	movs	r2, #64	; 0x40
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006a5e:	6939      	ldr	r1, [r7, #16]
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006a66:	461a      	mov	r2, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 fd9b 	bl	80085a4 <USBD_CtlPrepareRx>
      break;
 8006a6e:	e076      	b.n	8006b5e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	33b0      	adds	r3, #176	; 0xb0
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	7850      	ldrb	r0, [r2, #1]
 8006a86:	2200      	movs	r2, #0
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	4798      	blx	r3
      break;
 8006a8c:	e067      	b.n	8006b5e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	785b      	ldrb	r3, [r3, #1]
 8006a92:	2b0b      	cmp	r3, #11
 8006a94:	d851      	bhi.n	8006b3a <USBD_CDC_Setup+0x18a>
 8006a96:	a201      	add	r2, pc, #4	; (adr r2, 8006a9c <USBD_CDC_Setup+0xec>)
 8006a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9c:	08006acd 	.word	0x08006acd
 8006aa0:	08006b49 	.word	0x08006b49
 8006aa4:	08006b3b 	.word	0x08006b3b
 8006aa8:	08006b3b 	.word	0x08006b3b
 8006aac:	08006b3b 	.word	0x08006b3b
 8006ab0:	08006b3b 	.word	0x08006b3b
 8006ab4:	08006b3b 	.word	0x08006b3b
 8006ab8:	08006b3b 	.word	0x08006b3b
 8006abc:	08006b3b 	.word	0x08006b3b
 8006ac0:	08006b3b 	.word	0x08006b3b
 8006ac4:	08006af7 	.word	0x08006af7
 8006ac8:	08006b21 	.word	0x08006b21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d107      	bne.n	8006ae8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ad8:	f107 030a 	add.w	r3, r7, #10
 8006adc:	2202      	movs	r2, #2
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f001 fd33 	bl	800854c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ae6:	e032      	b.n	8006b4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 fcbd 	bl	800846a <USBD_CtlError>
            ret = USBD_FAIL;
 8006af0:	2303      	movs	r3, #3
 8006af2:	75fb      	strb	r3, [r7, #23]
          break;
 8006af4:	e02b      	b.n	8006b4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d107      	bne.n	8006b12 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b02:	f107 030d 	add.w	r3, r7, #13
 8006b06:	2201      	movs	r2, #1
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f001 fd1e 	bl	800854c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b10:	e01d      	b.n	8006b4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f001 fca8 	bl	800846a <USBD_CtlError>
            ret = USBD_FAIL;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b1e:	e016      	b.n	8006b4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d00f      	beq.n	8006b4c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f001 fc9b 	bl	800846a <USBD_CtlError>
            ret = USBD_FAIL;
 8006b34:	2303      	movs	r3, #3
 8006b36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b38:	e008      	b.n	8006b4c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f001 fc94 	bl	800846a <USBD_CtlError>
          ret = USBD_FAIL;
 8006b42:	2303      	movs	r3, #3
 8006b44:	75fb      	strb	r3, [r7, #23]
          break;
 8006b46:	e002      	b.n	8006b4e <USBD_CDC_Setup+0x19e>
          break;
 8006b48:	bf00      	nop
 8006b4a:	e008      	b.n	8006b5e <USBD_CDC_Setup+0x1ae>
          break;
 8006b4c:	bf00      	nop
      }
      break;
 8006b4e:	e006      	b.n	8006b5e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 fc89 	bl	800846a <USBD_CtlError>
      ret = USBD_FAIL;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b5c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	32b0      	adds	r2, #176	; 0xb0
 8006b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e065      	b.n	8006c5e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	32b0      	adds	r2, #176	; 0xb0
 8006b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ba2:	78fb      	ldrb	r3, [r7, #3]
 8006ba4:	f003 020f 	and.w	r2, r3, #15
 8006ba8:	6879      	ldr	r1, [r7, #4]
 8006baa:	4613      	mov	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	440b      	add	r3, r1
 8006bb4:	3318      	adds	r3, #24
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d02f      	beq.n	8006c1c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	f003 020f 	and.w	r2, r3, #15
 8006bc2:	6879      	ldr	r1, [r7, #4]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	440b      	add	r3, r1
 8006bce:	3318      	adds	r3, #24
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	78fb      	ldrb	r3, [r7, #3]
 8006bd4:	f003 010f 	and.w	r1, r3, #15
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	440b      	add	r3, r1
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4403      	add	r3, r0
 8006be4:	3348      	adds	r3, #72	; 0x48
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006bec:	fb01 f303 	mul.w	r3, r1, r3
 8006bf0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d112      	bne.n	8006c1c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	f003 020f 	and.w	r2, r3, #15
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	440b      	add	r3, r1
 8006c08:	3318      	adds	r3, #24
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c0e:	78f9      	ldrb	r1, [r7, #3]
 8006c10:	2300      	movs	r3, #0
 8006c12:	2200      	movs	r2, #0
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f002 f990 	bl	8008f3a <USBD_LL_Transmit>
 8006c1a:	e01f      	b.n	8006c5c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	33b0      	adds	r3, #176	; 0xb0
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d010      	beq.n	8006c5c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	33b0      	adds	r3, #176	; 0xb0
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006c58:	78fa      	ldrb	r2, [r7, #3]
 8006c5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b084      	sub	sp, #16
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	460b      	mov	r3, r1
 8006c70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	32b0      	adds	r2, #176	; 0xb0
 8006c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	32b0      	adds	r2, #176	; 0xb0
 8006c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e01a      	b.n	8006cce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f002 f98e 	bl	8008fbe <USBD_LL_GetRxDataSize>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	33b0      	adds	r3, #176	; 0xb0
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006cc8:	4611      	mov	r1, r2
 8006cca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	32b0      	adds	r2, #176	; 0xb0
 8006ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e025      	b.n	8006d44 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	33b0      	adds	r3, #176	; 0xb0
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d01a      	beq.n	8006d42 <USBD_CDC_EP0_RxReady+0x6c>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006d12:	2bff      	cmp	r3, #255	; 0xff
 8006d14:	d015      	beq.n	8006d42 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	33b0      	adds	r3, #176	; 0xb0
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006d2e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006d36:	b292      	uxth	r2, r2
 8006d38:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	22ff      	movs	r2, #255	; 0xff
 8006d3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d54:	2182      	movs	r1, #130	; 0x82
 8006d56:	4818      	ldr	r0, [pc, #96]	; (8006db8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d58:	f000 fd4f 	bl	80077fa <USBD_GetEpDesc>
 8006d5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d5e:	2101      	movs	r1, #1
 8006d60:	4815      	ldr	r0, [pc, #84]	; (8006db8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d62:	f000 fd4a 	bl	80077fa <USBD_GetEpDesc>
 8006d66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d68:	2181      	movs	r1, #129	; 0x81
 8006d6a:	4813      	ldr	r0, [pc, #76]	; (8006db8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d6c:	f000 fd45 	bl	80077fa <USBD_GetEpDesc>
 8006d70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2210      	movs	r2, #16
 8006d7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d006      	beq.n	8006d92 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d8c:	711a      	strb	r2, [r3, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d006      	beq.n	8006da6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006da0:	711a      	strb	r2, [r3, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2243      	movs	r2, #67	; 0x43
 8006daa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006dac:	4b02      	ldr	r3, [pc, #8]	; (8006db8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20000060 	.word	0x20000060

08006dbc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006dc4:	2182      	movs	r1, #130	; 0x82
 8006dc6:	4818      	ldr	r0, [pc, #96]	; (8006e28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006dc8:	f000 fd17 	bl	80077fa <USBD_GetEpDesc>
 8006dcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006dce:	2101      	movs	r1, #1
 8006dd0:	4815      	ldr	r0, [pc, #84]	; (8006e28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006dd2:	f000 fd12 	bl	80077fa <USBD_GetEpDesc>
 8006dd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006dd8:	2181      	movs	r1, #129	; 0x81
 8006dda:	4813      	ldr	r0, [pc, #76]	; (8006e28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ddc:	f000 fd0d 	bl	80077fa <USBD_GetEpDesc>
 8006de0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	2210      	movs	r2, #16
 8006dec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d006      	beq.n	8006e02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	2200      	movs	r2, #0
 8006df8:	711a      	strb	r2, [r3, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f042 0202 	orr.w	r2, r2, #2
 8006e00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d006      	beq.n	8006e16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	711a      	strb	r2, [r3, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f042 0202 	orr.w	r2, r2, #2
 8006e14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2243      	movs	r2, #67	; 0x43
 8006e1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e1c:	4b02      	ldr	r3, [pc, #8]	; (8006e28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20000060 	.word	0x20000060

08006e2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006e34:	2182      	movs	r1, #130	; 0x82
 8006e36:	4818      	ldr	r0, [pc, #96]	; (8006e98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e38:	f000 fcdf 	bl	80077fa <USBD_GetEpDesc>
 8006e3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006e3e:	2101      	movs	r1, #1
 8006e40:	4815      	ldr	r0, [pc, #84]	; (8006e98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e42:	f000 fcda 	bl	80077fa <USBD_GetEpDesc>
 8006e46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006e48:	2181      	movs	r1, #129	; 0x81
 8006e4a:	4813      	ldr	r0, [pc, #76]	; (8006e98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e4c:	f000 fcd5 	bl	80077fa <USBD_GetEpDesc>
 8006e50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d002      	beq.n	8006e5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2210      	movs	r2, #16
 8006e5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d006      	beq.n	8006e72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e6c:	711a      	strb	r2, [r3, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d006      	beq.n	8006e86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e80:	711a      	strb	r2, [r3, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2243      	movs	r2, #67	; 0x43
 8006e8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e8c:	4b02      	ldr	r3, [pc, #8]	; (8006e98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000060 	.word	0x20000060

08006e9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	220a      	movs	r2, #10
 8006ea8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006eaa:	4b03      	ldr	r3, [pc, #12]	; (8006eb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	2000001c 	.word	0x2000001c

08006ebc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e009      	b.n	8006ee4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	33b0      	adds	r3, #176	; 0xb0
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	32b0      	adds	r2, #176	; 0xb0
 8006f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e008      	b.n	8006f28 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	371c      	adds	r7, #28
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	32b0      	adds	r2, #176	; 0xb0
 8006f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e004      	b.n	8006f62 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
	...

08006f70 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	32b0      	adds	r2, #176	; 0xb0
 8006f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f86:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	32b0      	adds	r2, #176	; 0xb0
 8006f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e025      	b.n	8006fee <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d11f      	bne.n	8006fec <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006fb4:	4b10      	ldr	r3, [pc, #64]	; (8006ff8 <USBD_CDC_TransmitPacket+0x88>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	f003 020f 	and.w	r2, r3, #15
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4403      	add	r3, r0
 8006fce:	3318      	adds	r3, #24
 8006fd0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006fd2:	4b09      	ldr	r3, [pc, #36]	; (8006ff8 <USBD_CDC_TransmitPacket+0x88>)
 8006fd4:	7819      	ldrb	r1, [r3, #0]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 ffa9 	bl	8008f3a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	200000a3 	.word	0x200000a3

08006ffc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	32b0      	adds	r2, #176	; 0xb0
 800700e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007012:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	32b0      	adds	r2, #176	; 0xb0
 800701e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007026:	2303      	movs	r3, #3
 8007028:	e018      	b.n	800705c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	7c1b      	ldrb	r3, [r3, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10a      	bne.n	8007048 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007032:	4b0c      	ldr	r3, [pc, #48]	; (8007064 <USBD_CDC_ReceivePacket+0x68>)
 8007034:	7819      	ldrb	r1, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800703c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 ff9b 	bl	8008f7c <USBD_LL_PrepareReceive>
 8007046:	e008      	b.n	800705a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007048:	4b06      	ldr	r3, [pc, #24]	; (8007064 <USBD_CDC_ReceivePacket+0x68>)
 800704a:	7819      	ldrb	r1, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007052:	2340      	movs	r3, #64	; 0x40
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 ff91 	bl	8008f7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	200000a4 	.word	0x200000a4

08007068 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	4613      	mov	r3, r2
 8007074:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800707c:	2303      	movs	r3, #3
 800707e:	e01f      	b.n	80070c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	79fa      	ldrb	r2, [r7, #7]
 80070b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f001 fe0b 	bl	8008cd0 <USBD_LL_Init>
 80070ba:	4603      	mov	r3, r0
 80070bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80070be:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80070dc:	2303      	movs	r3, #3
 80070de:	e025      	b.n	800712c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	32ae      	adds	r2, #174	; 0xae
 80070f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00f      	beq.n	800711c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	32ae      	adds	r2, #174	; 0xae
 8007106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	f107 020e 	add.w	r2, r7, #14
 8007110:	4610      	mov	r0, r2
 8007112:	4798      	blx	r3
 8007114:	4602      	mov	r2, r0
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007122:	1c5a      	adds	r2, r3, #1
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 fe13 	bl	8008d68 <USBD_LL_Start>
 8007142:	4603      	mov	r3, r0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007154:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007156:	4618      	mov	r0, r3
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b084      	sub	sp, #16
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	460b      	mov	r3, r1
 800716c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007178:	2b00      	cmp	r3, #0
 800717a:	d009      	beq.n	8007190 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	78fa      	ldrb	r2, [r7, #3]
 8007186:	4611      	mov	r1, r2
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	4798      	blx	r3
 800718c:	4603      	mov	r3, r0
 800718e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	460b      	mov	r3, r1
 80071a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	78fa      	ldrb	r2, [r7, #3]
 80071b4:	4611      	mov	r1, r2
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	4798      	blx	r3
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80071c0:	2303      	movs	r3, #3
 80071c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b084      	sub	sp, #16
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f001 f908 	bl	80083f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80071f4:	461a      	mov	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007202:	f003 031f 	and.w	r3, r3, #31
 8007206:	2b02      	cmp	r3, #2
 8007208:	d01a      	beq.n	8007240 <USBD_LL_SetupStage+0x72>
 800720a:	2b02      	cmp	r3, #2
 800720c:	d822      	bhi.n	8007254 <USBD_LL_SetupStage+0x86>
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <USBD_LL_SetupStage+0x4a>
 8007212:	2b01      	cmp	r3, #1
 8007214:	d00a      	beq.n	800722c <USBD_LL_SetupStage+0x5e>
 8007216:	e01d      	b.n	8007254 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fb5f 	bl	80078e4 <USBD_StdDevReq>
 8007226:	4603      	mov	r3, r0
 8007228:	73fb      	strb	r3, [r7, #15]
      break;
 800722a:	e020      	b.n	800726e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fbc7 	bl	80079c8 <USBD_StdItfReq>
 800723a:	4603      	mov	r3, r0
 800723c:	73fb      	strb	r3, [r7, #15]
      break;
 800723e:	e016      	b.n	800726e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fc29 	bl	8007aa0 <USBD_StdEPReq>
 800724e:	4603      	mov	r3, r0
 8007250:	73fb      	strb	r3, [r7, #15]
      break;
 8007252:	e00c      	b.n	800726e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800725a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800725e:	b2db      	uxtb	r3, r3
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 fde0 	bl	8008e28 <USBD_LL_StallEP>
 8007268:	4603      	mov	r3, r0
 800726a:	73fb      	strb	r3, [r7, #15]
      break;
 800726c:	bf00      	nop
  }

  return ret;
 800726e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	460b      	mov	r3, r1
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800728a:	7afb      	ldrb	r3, [r7, #11]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d16e      	bne.n	800736e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007296:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800729e:	2b03      	cmp	r3, #3
 80072a0:	f040 8098 	bne.w	80073d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d913      	bls.n	80072d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	1ad2      	subs	r2, r2, r3
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	4293      	cmp	r3, r2
 80072c8:	bf28      	it	cs
 80072ca:	4613      	movcs	r3, r2
 80072cc:	461a      	mov	r2, r3
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f001 f984 	bl	80085de <USBD_CtlContinueRx>
 80072d6:	e07d      	b.n	80073d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d014      	beq.n	8007310 <USBD_LL_DataOutStage+0x98>
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d81d      	bhi.n	8007326 <USBD_LL_DataOutStage+0xae>
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d002      	beq.n	80072f4 <USBD_LL_DataOutStage+0x7c>
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d003      	beq.n	80072fa <USBD_LL_DataOutStage+0x82>
 80072f2:	e018      	b.n	8007326 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	75bb      	strb	r3, [r7, #22]
            break;
 80072f8:	e018      	b.n	800732c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007300:	b2db      	uxtb	r3, r3
 8007302:	4619      	mov	r1, r3
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 fa5e 	bl	80077c6 <USBD_CoreFindIF>
 800730a:	4603      	mov	r3, r0
 800730c:	75bb      	strb	r3, [r7, #22]
            break;
 800730e:	e00d      	b.n	800732c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007316:	b2db      	uxtb	r3, r3
 8007318:	4619      	mov	r1, r3
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 fa60 	bl	80077e0 <USBD_CoreFindEP>
 8007320:	4603      	mov	r3, r0
 8007322:	75bb      	strb	r3, [r7, #22]
            break;
 8007324:	e002      	b.n	800732c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	75bb      	strb	r3, [r7, #22]
            break;
 800732a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800732c:	7dbb      	ldrb	r3, [r7, #22]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d119      	bne.n	8007366 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b03      	cmp	r3, #3
 800733c:	d113      	bne.n	8007366 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800733e:	7dba      	ldrb	r2, [r7, #22]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	32ae      	adds	r2, #174	; 0xae
 8007344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00b      	beq.n	8007366 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800734e:	7dba      	ldrb	r2, [r7, #22]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007356:	7dba      	ldrb	r2, [r7, #22]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	32ae      	adds	r2, #174	; 0xae
 800735c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f001 f94a 	bl	8008600 <USBD_CtlSendStatus>
 800736c:	e032      	b.n	80073d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800736e:	7afb      	ldrb	r3, [r7, #11]
 8007370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007374:	b2db      	uxtb	r3, r3
 8007376:	4619      	mov	r1, r3
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 fa31 	bl	80077e0 <USBD_CoreFindEP>
 800737e:	4603      	mov	r3, r0
 8007380:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007382:	7dbb      	ldrb	r3, [r7, #22]
 8007384:	2bff      	cmp	r3, #255	; 0xff
 8007386:	d025      	beq.n	80073d4 <USBD_LL_DataOutStage+0x15c>
 8007388:	7dbb      	ldrb	r3, [r7, #22]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d122      	bne.n	80073d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b03      	cmp	r3, #3
 8007398:	d117      	bne.n	80073ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800739a:	7dba      	ldrb	r2, [r7, #22]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	32ae      	adds	r2, #174	; 0xae
 80073a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00f      	beq.n	80073ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80073aa:	7dba      	ldrb	r2, [r7, #22]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80073b2:	7dba      	ldrb	r2, [r7, #22]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	32ae      	adds	r2, #174	; 0xae
 80073b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	7afa      	ldrb	r2, [r7, #11]
 80073c0:	4611      	mov	r1, r2
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	4798      	blx	r3
 80073c6:	4603      	mov	r3, r0
 80073c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80073ca:	7dfb      	ldrb	r3, [r7, #23]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80073d0:	7dfb      	ldrb	r3, [r7, #23]
 80073d2:	e000      	b.n	80073d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b086      	sub	sp, #24
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	60f8      	str	r0, [r7, #12]
 80073e6:	460b      	mov	r3, r1
 80073e8:	607a      	str	r2, [r7, #4]
 80073ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80073ec:	7afb      	ldrb	r3, [r7, #11]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d16f      	bne.n	80074d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3314      	adds	r3, #20
 80073f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d15a      	bne.n	80074b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	429a      	cmp	r2, r3
 800740c:	d914      	bls.n	8007438 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	689a      	ldr	r2, [r3, #8]
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	1ad2      	subs	r2, r2, r3
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	461a      	mov	r2, r3
 8007422:	6879      	ldr	r1, [r7, #4]
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f001 f8ac 	bl	8008582 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800742a:	2300      	movs	r3, #0
 800742c:	2200      	movs	r2, #0
 800742e:	2100      	movs	r1, #0
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f001 fda3 	bl	8008f7c <USBD_LL_PrepareReceive>
 8007436:	e03f      	b.n	80074b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	68da      	ldr	r2, [r3, #12]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	429a      	cmp	r2, r3
 8007442:	d11c      	bne.n	800747e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800744c:	429a      	cmp	r2, r3
 800744e:	d316      	bcc.n	800747e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800745a:	429a      	cmp	r2, r3
 800745c:	d20f      	bcs.n	800747e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800745e:	2200      	movs	r2, #0
 8007460:	2100      	movs	r1, #0
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f001 f88d 	bl	8008582 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007470:	2300      	movs	r3, #0
 8007472:	2200      	movs	r2, #0
 8007474:	2100      	movs	r1, #0
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f001 fd80 	bl	8008f7c <USBD_LL_PrepareReceive>
 800747c:	e01c      	b.n	80074b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b03      	cmp	r3, #3
 8007488:	d10f      	bne.n	80074aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d009      	beq.n	80074aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80074aa:	2180      	movs	r1, #128	; 0x80
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f001 fcbb 	bl	8008e28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f001 f8b7 	bl	8008626 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d03a      	beq.n	8007538 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f7ff fe42 	bl	800714c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80074d0:	e032      	b.n	8007538 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80074d2:	7afb      	ldrb	r3, [r7, #11]
 80074d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	4619      	mov	r1, r3
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 f97f 	bl	80077e0 <USBD_CoreFindEP>
 80074e2:	4603      	mov	r3, r0
 80074e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
 80074e8:	2bff      	cmp	r3, #255	; 0xff
 80074ea:	d025      	beq.n	8007538 <USBD_LL_DataInStage+0x15a>
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d122      	bne.n	8007538 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d11c      	bne.n	8007538 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80074fe:	7dfa      	ldrb	r2, [r7, #23]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	32ae      	adds	r2, #174	; 0xae
 8007504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d014      	beq.n	8007538 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800750e:	7dfa      	ldrb	r2, [r7, #23]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007516:	7dfa      	ldrb	r2, [r7, #23]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	32ae      	adds	r2, #174	; 0xae
 800751c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	7afa      	ldrb	r2, [r7, #11]
 8007524:	4611      	mov	r1, r2
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	4798      	blx	r3
 800752a:	4603      	mov	r3, r0
 800752c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800752e:	7dbb      	ldrb	r3, [r7, #22]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007534:	7dbb      	ldrb	r3, [r7, #22]
 8007536:	e000      	b.n	800753a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757a:	2b00      	cmp	r3, #0
 800757c:	d014      	beq.n	80075a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00e      	beq.n	80075a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6852      	ldr	r2, [r2, #4]
 8007596:	b2d2      	uxtb	r2, r2
 8007598:	4611      	mov	r1, r2
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	4798      	blx	r3
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80075a4:	2303      	movs	r3, #3
 80075a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075a8:	2340      	movs	r3, #64	; 0x40
 80075aa:	2200      	movs	r2, #0
 80075ac:	2100      	movs	r1, #0
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f001 fbf5 	bl	8008d9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2240      	movs	r2, #64	; 0x40
 80075c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075c4:	2340      	movs	r3, #64	; 0x40
 80075c6:	2200      	movs	r2, #0
 80075c8:	2180      	movs	r1, #128	; 0x80
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f001 fbe7 	bl	8008d9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2240      	movs	r2, #64	; 0x40
 80075da:	621a      	str	r2, [r3, #32]

  return ret;
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	460b      	mov	r3, r1
 80075f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	78fa      	ldrb	r2, [r7, #3]
 80075f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007606:	b480      	push	{r7}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007614:	b2da      	uxtb	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2204      	movs	r2, #4
 8007620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b04      	cmp	r3, #4
 8007644:	d106      	bne.n	8007654 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800764c:	b2da      	uxtb	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b03      	cmp	r3, #3
 8007674:	d110      	bne.n	8007698 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00b      	beq.n	8007698 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d005      	beq.n	8007698 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007692:	69db      	ldr	r3, [r3, #28]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	460b      	mov	r3, r1
 80076ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	32ae      	adds	r2, #174	; 0xae
 80076b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e01c      	b.n	80076fe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b03      	cmp	r3, #3
 80076ce:	d115      	bne.n	80076fc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	32ae      	adds	r2, #174	; 0xae
 80076da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00b      	beq.n	80076fc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	32ae      	adds	r2, #174	; 0xae
 80076ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	78fa      	ldrb	r2, [r7, #3]
 80076f6:	4611      	mov	r1, r2
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	460b      	mov	r3, r1
 8007710:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	32ae      	adds	r2, #174	; 0xae
 800771c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007724:	2303      	movs	r3, #3
 8007726:	e01c      	b.n	8007762 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b03      	cmp	r3, #3
 8007732:	d115      	bne.n	8007760 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	32ae      	adds	r2, #174	; 0xae
 800773e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00b      	beq.n	8007760 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	32ae      	adds	r2, #174	; 0xae
 8007752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	78fa      	ldrb	r2, [r7, #3]
 800775a:	4611      	mov	r1, r2
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007788:	2300      	movs	r3, #0
 800778a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00e      	beq.n	80077bc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	6852      	ldr	r2, [r2, #4]
 80077aa:	b2d2      	uxtb	r2, r2
 80077ac:	4611      	mov	r1, r2
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	4798      	blx	r3
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80077b8:	2303      	movs	r3, #3
 80077ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80077d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80077ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b086      	sub	sp, #24
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	460b      	mov	r3, r1
 8007804:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800780e:	2300      	movs	r3, #0
 8007810:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	885b      	ldrh	r3, [r3, #2]
 8007816:	b29a      	uxth	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	b29b      	uxth	r3, r3
 800781e:	429a      	cmp	r2, r3
 8007820:	d920      	bls.n	8007864 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	b29b      	uxth	r3, r3
 8007828:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800782a:	e013      	b.n	8007854 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800782c:	f107 030a 	add.w	r3, r7, #10
 8007830:	4619      	mov	r1, r3
 8007832:	6978      	ldr	r0, [r7, #20]
 8007834:	f000 f81b 	bl	800786e <USBD_GetNextDesc>
 8007838:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	785b      	ldrb	r3, [r3, #1]
 800783e:	2b05      	cmp	r3, #5
 8007840:	d108      	bne.n	8007854 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	789b      	ldrb	r3, [r3, #2]
 800784a:	78fa      	ldrb	r2, [r7, #3]
 800784c:	429a      	cmp	r2, r3
 800784e:	d008      	beq.n	8007862 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007850:	2300      	movs	r3, #0
 8007852:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	885b      	ldrh	r3, [r3, #2]
 8007858:	b29a      	uxth	r2, r3
 800785a:	897b      	ldrh	r3, [r7, #10]
 800785c:	429a      	cmp	r2, r3
 800785e:	d8e5      	bhi.n	800782c <USBD_GetEpDesc+0x32>
 8007860:	e000      	b.n	8007864 <USBD_GetEpDesc+0x6a>
          break;
 8007862:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007864:	693b      	ldr	r3, [r7, #16]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800786e:	b480      	push	{r7}
 8007870:	b085      	sub	sp, #20
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	881a      	ldrh	r2, [r3, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	b29b      	uxth	r3, r3
 8007886:	4413      	add	r3, r2
 8007888:	b29a      	uxth	r2, r3
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4413      	add	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800789a:	68fb      	ldr	r3, [r7, #12]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	3301      	adds	r3, #1
 80078be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80078c6:	8a3b      	ldrh	r3, [r7, #16]
 80078c8:	021b      	lsls	r3, r3, #8
 80078ca:	b21a      	sxth	r2, r3
 80078cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	b21b      	sxth	r3, r3
 80078d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80078d6:	89fb      	ldrh	r3, [r7, #14]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	371c      	adds	r7, #28
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078fa:	2b40      	cmp	r3, #64	; 0x40
 80078fc:	d005      	beq.n	800790a <USBD_StdDevReq+0x26>
 80078fe:	2b40      	cmp	r3, #64	; 0x40
 8007900:	d857      	bhi.n	80079b2 <USBD_StdDevReq+0xce>
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00f      	beq.n	8007926 <USBD_StdDevReq+0x42>
 8007906:	2b20      	cmp	r3, #32
 8007908:	d153      	bne.n	80079b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	32ae      	adds	r2, #174	; 0xae
 8007914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	4798      	blx	r3
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]
      break;
 8007924:	e04a      	b.n	80079bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	785b      	ldrb	r3, [r3, #1]
 800792a:	2b09      	cmp	r3, #9
 800792c:	d83b      	bhi.n	80079a6 <USBD_StdDevReq+0xc2>
 800792e:	a201      	add	r2, pc, #4	; (adr r2, 8007934 <USBD_StdDevReq+0x50>)
 8007930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007934:	08007989 	.word	0x08007989
 8007938:	0800799d 	.word	0x0800799d
 800793c:	080079a7 	.word	0x080079a7
 8007940:	08007993 	.word	0x08007993
 8007944:	080079a7 	.word	0x080079a7
 8007948:	08007967 	.word	0x08007967
 800794c:	0800795d 	.word	0x0800795d
 8007950:	080079a7 	.word	0x080079a7
 8007954:	0800797f 	.word	0x0800797f
 8007958:	08007971 	.word	0x08007971
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fa3c 	bl	8007ddc <USBD_GetDescriptor>
          break;
 8007964:	e024      	b.n	80079b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fba1 	bl	80080b0 <USBD_SetAddress>
          break;
 800796e:	e01f      	b.n	80079b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fbe0 	bl	8008138 <USBD_SetConfig>
 8007978:	4603      	mov	r3, r0
 800797a:	73fb      	strb	r3, [r7, #15]
          break;
 800797c:	e018      	b.n	80079b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fc83 	bl	800828c <USBD_GetConfig>
          break;
 8007986:	e013      	b.n	80079b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fcb4 	bl	80082f8 <USBD_GetStatus>
          break;
 8007990:	e00e      	b.n	80079b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fce3 	bl	8008360 <USBD_SetFeature>
          break;
 800799a:	e009      	b.n	80079b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fd07 	bl	80083b2 <USBD_ClrFeature>
          break;
 80079a4:	e004      	b.n	80079b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fd5e 	bl	800846a <USBD_CtlError>
          break;
 80079ae:	bf00      	nop
      }
      break;
 80079b0:	e004      	b.n	80079bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fd58 	bl	800846a <USBD_CtlError>
      break;
 80079ba:	bf00      	nop
  }

  return ret;
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop

080079c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079de:	2b40      	cmp	r3, #64	; 0x40
 80079e0:	d005      	beq.n	80079ee <USBD_StdItfReq+0x26>
 80079e2:	2b40      	cmp	r3, #64	; 0x40
 80079e4:	d852      	bhi.n	8007a8c <USBD_StdItfReq+0xc4>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <USBD_StdItfReq+0x26>
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d14e      	bne.n	8007a8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	3b01      	subs	r3, #1
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d840      	bhi.n	8007a7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	889b      	ldrh	r3, [r3, #4]
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d836      	bhi.n	8007a74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	889b      	ldrh	r3, [r3, #4]
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7ff fed9 	bl	80077c6 <USBD_CoreFindIF>
 8007a14:	4603      	mov	r3, r0
 8007a16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	2bff      	cmp	r3, #255	; 0xff
 8007a1c:	d01d      	beq.n	8007a5a <USBD_StdItfReq+0x92>
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d11a      	bne.n	8007a5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007a24:	7bba      	ldrb	r2, [r7, #14]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	32ae      	adds	r2, #174	; 0xae
 8007a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00f      	beq.n	8007a54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007a34:	7bba      	ldrb	r2, [r7, #14]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a3c:	7bba      	ldrb	r2, [r7, #14]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	32ae      	adds	r2, #174	; 0xae
 8007a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	4798      	blx	r3
 8007a4e:	4603      	mov	r3, r0
 8007a50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007a52:	e004      	b.n	8007a5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007a54:	2303      	movs	r3, #3
 8007a56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007a58:	e001      	b.n	8007a5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	88db      	ldrh	r3, [r3, #6]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d110      	bne.n	8007a88 <USBD_StdItfReq+0xc0>
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10d      	bne.n	8007a88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fdc7 	bl	8008600 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a72:	e009      	b.n	8007a88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fcf7 	bl	800846a <USBD_CtlError>
          break;
 8007a7c:	e004      	b.n	8007a88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fcf2 	bl	800846a <USBD_CtlError>
          break;
 8007a86:	e000      	b.n	8007a8a <USBD_StdItfReq+0xc2>
          break;
 8007a88:	bf00      	nop
      }
      break;
 8007a8a:	e004      	b.n	8007a96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fceb 	bl	800846a <USBD_CtlError>
      break;
 8007a94:	bf00      	nop
  }

  return ret;
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	889b      	ldrh	r3, [r3, #4]
 8007ab2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007abc:	2b40      	cmp	r3, #64	; 0x40
 8007abe:	d007      	beq.n	8007ad0 <USBD_StdEPReq+0x30>
 8007ac0:	2b40      	cmp	r3, #64	; 0x40
 8007ac2:	f200 817f 	bhi.w	8007dc4 <USBD_StdEPReq+0x324>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d02a      	beq.n	8007b20 <USBD_StdEPReq+0x80>
 8007aca:	2b20      	cmp	r3, #32
 8007acc:	f040 817a 	bne.w	8007dc4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7ff fe83 	bl	80077e0 <USBD_CoreFindEP>
 8007ada:	4603      	mov	r3, r0
 8007adc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ade:	7b7b      	ldrb	r3, [r7, #13]
 8007ae0:	2bff      	cmp	r3, #255	; 0xff
 8007ae2:	f000 8174 	beq.w	8007dce <USBD_StdEPReq+0x32e>
 8007ae6:	7b7b      	ldrb	r3, [r7, #13]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f040 8170 	bne.w	8007dce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007aee:	7b7a      	ldrb	r2, [r7, #13]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007af6:	7b7a      	ldrb	r2, [r7, #13]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	32ae      	adds	r2, #174	; 0xae
 8007afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 8163 	beq.w	8007dce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007b08:	7b7a      	ldrb	r2, [r7, #13]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	32ae      	adds	r2, #174	; 0xae
 8007b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	4798      	blx	r3
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b1e:	e156      	b.n	8007dce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	785b      	ldrb	r3, [r3, #1]
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d008      	beq.n	8007b3a <USBD_StdEPReq+0x9a>
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	f300 8145 	bgt.w	8007db8 <USBD_StdEPReq+0x318>
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 809b 	beq.w	8007c6a <USBD_StdEPReq+0x1ca>
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d03c      	beq.n	8007bb2 <USBD_StdEPReq+0x112>
 8007b38:	e13e      	b.n	8007db8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d002      	beq.n	8007b4c <USBD_StdEPReq+0xac>
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d016      	beq.n	8007b78 <USBD_StdEPReq+0xd8>
 8007b4a:	e02c      	b.n	8007ba6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00d      	beq.n	8007b6e <USBD_StdEPReq+0xce>
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	2b80      	cmp	r3, #128	; 0x80
 8007b56:	d00a      	beq.n	8007b6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 f963 	bl	8008e28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b62:	2180      	movs	r1, #128	; 0x80
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 f95f 	bl	8008e28 <USBD_LL_StallEP>
 8007b6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b6c:	e020      	b.n	8007bb0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fc7a 	bl	800846a <USBD_CtlError>
              break;
 8007b76:	e01b      	b.n	8007bb0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	885b      	ldrh	r3, [r3, #2]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10e      	bne.n	8007b9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00b      	beq.n	8007b9e <USBD_StdEPReq+0xfe>
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	2b80      	cmp	r3, #128	; 0x80
 8007b8a:	d008      	beq.n	8007b9e <USBD_StdEPReq+0xfe>
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	88db      	ldrh	r3, [r3, #6]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d104      	bne.n	8007b9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b94:	7bbb      	ldrb	r3, [r7, #14]
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f001 f945 	bl	8008e28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fd2e 	bl	8008600 <USBD_CtlSendStatus>

              break;
 8007ba4:	e004      	b.n	8007bb0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fc5e 	bl	800846a <USBD_CtlError>
              break;
 8007bae:	bf00      	nop
          }
          break;
 8007bb0:	e107      	b.n	8007dc2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d002      	beq.n	8007bc4 <USBD_StdEPReq+0x124>
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d016      	beq.n	8007bf0 <USBD_StdEPReq+0x150>
 8007bc2:	e04b      	b.n	8007c5c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bc4:	7bbb      	ldrb	r3, [r7, #14]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00d      	beq.n	8007be6 <USBD_StdEPReq+0x146>
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
 8007bcc:	2b80      	cmp	r3, #128	; 0x80
 8007bce:	d00a      	beq.n	8007be6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 f927 	bl	8008e28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bda:	2180      	movs	r1, #128	; 0x80
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 f923 	bl	8008e28 <USBD_LL_StallEP>
 8007be2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007be4:	e040      	b.n	8007c68 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fc3e 	bl	800846a <USBD_CtlError>
              break;
 8007bee:	e03b      	b.n	8007c68 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	885b      	ldrh	r3, [r3, #2]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d136      	bne.n	8007c66 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d004      	beq.n	8007c0c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f001 f92d 	bl	8008e66 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fcf7 	bl	8008600 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7ff fde2 	bl	80077e0 <USBD_CoreFindEP>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c20:	7b7b      	ldrb	r3, [r7, #13]
 8007c22:	2bff      	cmp	r3, #255	; 0xff
 8007c24:	d01f      	beq.n	8007c66 <USBD_StdEPReq+0x1c6>
 8007c26:	7b7b      	ldrb	r3, [r7, #13]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d11c      	bne.n	8007c66 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007c2c:	7b7a      	ldrb	r2, [r7, #13]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007c34:	7b7a      	ldrb	r2, [r7, #13]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	32ae      	adds	r2, #174	; 0xae
 8007c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d010      	beq.n	8007c66 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c44:	7b7a      	ldrb	r2, [r7, #13]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	32ae      	adds	r2, #174	; 0xae
 8007c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	4798      	blx	r3
 8007c56:	4603      	mov	r3, r0
 8007c58:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007c5a:	e004      	b.n	8007c66 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fc03 	bl	800846a <USBD_CtlError>
              break;
 8007c64:	e000      	b.n	8007c68 <USBD_StdEPReq+0x1c8>
              break;
 8007c66:	bf00      	nop
          }
          break;
 8007c68:	e0ab      	b.n	8007dc2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d002      	beq.n	8007c7c <USBD_StdEPReq+0x1dc>
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d032      	beq.n	8007ce0 <USBD_StdEPReq+0x240>
 8007c7a:	e097      	b.n	8007dac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d007      	beq.n	8007c92 <USBD_StdEPReq+0x1f2>
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	2b80      	cmp	r3, #128	; 0x80
 8007c86:	d004      	beq.n	8007c92 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fbed 	bl	800846a <USBD_CtlError>
                break;
 8007c90:	e091      	b.n	8007db6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	da0b      	bge.n	8007cb2 <USBD_StdEPReq+0x212>
 8007c9a:	7bbb      	ldrb	r3, [r7, #14]
 8007c9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	3310      	adds	r3, #16
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	4413      	add	r3, r2
 8007cae:	3304      	adds	r3, #4
 8007cb0:	e00b      	b.n	8007cca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cb8:	4613      	mov	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	3304      	adds	r3, #4
 8007cca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fc37 	bl	800854c <USBD_CtlSendData>
              break;
 8007cde:	e06a      	b.n	8007db6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	da11      	bge.n	8007d0c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	f003 020f 	and.w	r2, r3, #15
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	440b      	add	r3, r1
 8007cfa:	3324      	adds	r3, #36	; 0x24
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d117      	bne.n	8007d32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fbb0 	bl	800846a <USBD_CtlError>
                  break;
 8007d0a:	e054      	b.n	8007db6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
 8007d0e:	f003 020f 	and.w	r2, r3, #15
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	440b      	add	r3, r1
 8007d1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d104      	bne.n	8007d32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fb9d 	bl	800846a <USBD_CtlError>
                  break;
 8007d30:	e041      	b.n	8007db6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	da0b      	bge.n	8007d52 <USBD_StdEPReq+0x2b2>
 8007d3a:	7bbb      	ldrb	r3, [r7, #14]
 8007d3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d40:	4613      	mov	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4413      	add	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	3310      	adds	r3, #16
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	3304      	adds	r3, #4
 8007d50:	e00b      	b.n	8007d6a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d52:	7bbb      	ldrb	r3, [r7, #14]
 8007d54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d58:	4613      	mov	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4413      	add	r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	4413      	add	r3, r2
 8007d68:	3304      	adds	r3, #4
 8007d6a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <USBD_StdEPReq+0x2d8>
 8007d72:	7bbb      	ldrb	r3, [r7, #14]
 8007d74:	2b80      	cmp	r3, #128	; 0x80
 8007d76:	d103      	bne.n	8007d80 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	e00e      	b.n	8007d9e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 f88d 	bl	8008ea4 <USBD_LL_IsStallEP>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2201      	movs	r2, #1
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	e002      	b.n	8007d9e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2202      	movs	r2, #2
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fbd1 	bl	800854c <USBD_CtlSendData>
              break;
 8007daa:	e004      	b.n	8007db6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fb5b 	bl	800846a <USBD_CtlError>
              break;
 8007db4:	bf00      	nop
          }
          break;
 8007db6:	e004      	b.n	8007dc2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fb55 	bl	800846a <USBD_CtlError>
          break;
 8007dc0:	bf00      	nop
      }
      break;
 8007dc2:	e005      	b.n	8007dd0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fb4f 	bl	800846a <USBD_CtlError>
      break;
 8007dcc:	e000      	b.n	8007dd0 <USBD_StdEPReq+0x330>
      break;
 8007dce:	bf00      	nop
  }

  return ret;
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007dee:	2300      	movs	r3, #0
 8007df0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	885b      	ldrh	r3, [r3, #2]
 8007df6:	0a1b      	lsrs	r3, r3, #8
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	2b06      	cmp	r3, #6
 8007dfe:	f200 8128 	bhi.w	8008052 <USBD_GetDescriptor+0x276>
 8007e02:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <USBD_GetDescriptor+0x2c>)
 8007e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e08:	08007e25 	.word	0x08007e25
 8007e0c:	08007e3d 	.word	0x08007e3d
 8007e10:	08007e7d 	.word	0x08007e7d
 8007e14:	08008053 	.word	0x08008053
 8007e18:	08008053 	.word	0x08008053
 8007e1c:	08007ff3 	.word	0x08007ff3
 8007e20:	0800801f 	.word	0x0800801f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	7c12      	ldrb	r2, [r2, #16]
 8007e30:	f107 0108 	add.w	r1, r7, #8
 8007e34:	4610      	mov	r0, r2
 8007e36:	4798      	blx	r3
 8007e38:	60f8      	str	r0, [r7, #12]
      break;
 8007e3a:	e112      	b.n	8008062 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	7c1b      	ldrb	r3, [r3, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10d      	bne.n	8007e60 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4c:	f107 0208 	add.w	r2, r7, #8
 8007e50:	4610      	mov	r0, r2
 8007e52:	4798      	blx	r3
 8007e54:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e5e:	e100      	b.n	8008062 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	f107 0208 	add.w	r2, r7, #8
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	4798      	blx	r3
 8007e70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3301      	adds	r3, #1
 8007e76:	2202      	movs	r2, #2
 8007e78:	701a      	strb	r2, [r3, #0]
      break;
 8007e7a:	e0f2      	b.n	8008062 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	885b      	ldrh	r3, [r3, #2]
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b05      	cmp	r3, #5
 8007e84:	f200 80ac 	bhi.w	8007fe0 <USBD_GetDescriptor+0x204>
 8007e88:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <USBD_GetDescriptor+0xb4>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007ea9 	.word	0x08007ea9
 8007e94:	08007edd 	.word	0x08007edd
 8007e98:	08007f11 	.word	0x08007f11
 8007e9c:	08007f45 	.word	0x08007f45
 8007ea0:	08007f79 	.word	0x08007f79
 8007ea4:	08007fad 	.word	0x08007fad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00b      	beq.n	8007ecc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	7c12      	ldrb	r2, [r2, #16]
 8007ec0:	f107 0108 	add.w	r1, r7, #8
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	4798      	blx	r3
 8007ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eca:	e091      	b.n	8007ff0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 facb 	bl	800846a <USBD_CtlError>
            err++;
 8007ed4:	7afb      	ldrb	r3, [r7, #11]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eda:	e089      	b.n	8007ff0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00b      	beq.n	8007f00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	7c12      	ldrb	r2, [r2, #16]
 8007ef4:	f107 0108 	add.w	r1, r7, #8
 8007ef8:	4610      	mov	r0, r2
 8007efa:	4798      	blx	r3
 8007efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007efe:	e077      	b.n	8007ff0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fab1 	bl	800846a <USBD_CtlError>
            err++;
 8007f08:	7afb      	ldrb	r3, [r7, #11]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f0e:	e06f      	b.n	8007ff0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00b      	beq.n	8007f34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	7c12      	ldrb	r2, [r2, #16]
 8007f28:	f107 0108 	add.w	r1, r7, #8
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	4798      	blx	r3
 8007f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f32:	e05d      	b.n	8007ff0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa97 	bl	800846a <USBD_CtlError>
            err++;
 8007f3c:	7afb      	ldrb	r3, [r7, #11]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	72fb      	strb	r3, [r7, #11]
          break;
 8007f42:	e055      	b.n	8007ff0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00b      	beq.n	8007f68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	7c12      	ldrb	r2, [r2, #16]
 8007f5c:	f107 0108 	add.w	r1, r7, #8
 8007f60:	4610      	mov	r0, r2
 8007f62:	4798      	blx	r3
 8007f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f66:	e043      	b.n	8007ff0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fa7d 	bl	800846a <USBD_CtlError>
            err++;
 8007f70:	7afb      	ldrb	r3, [r7, #11]
 8007f72:	3301      	adds	r3, #1
 8007f74:	72fb      	strb	r3, [r7, #11]
          break;
 8007f76:	e03b      	b.n	8007ff0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00b      	beq.n	8007f9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	7c12      	ldrb	r2, [r2, #16]
 8007f90:	f107 0108 	add.w	r1, r7, #8
 8007f94:	4610      	mov	r0, r2
 8007f96:	4798      	blx	r3
 8007f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f9a:	e029      	b.n	8007ff0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fa63 	bl	800846a <USBD_CtlError>
            err++;
 8007fa4:	7afb      	ldrb	r3, [r7, #11]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8007faa:	e021      	b.n	8007ff0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00b      	beq.n	8007fd0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	7c12      	ldrb	r2, [r2, #16]
 8007fc4:	f107 0108 	add.w	r1, r7, #8
 8007fc8:	4610      	mov	r0, r2
 8007fca:	4798      	blx	r3
 8007fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fce:	e00f      	b.n	8007ff0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fa49 	bl	800846a <USBD_CtlError>
            err++;
 8007fd8:	7afb      	ldrb	r3, [r7, #11]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8007fde:	e007      	b.n	8007ff0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fa41 	bl	800846a <USBD_CtlError>
          err++;
 8007fe8:	7afb      	ldrb	r3, [r7, #11]
 8007fea:	3301      	adds	r3, #1
 8007fec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007fee:	bf00      	nop
      }
      break;
 8007ff0:	e037      	b.n	8008062 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	7c1b      	ldrb	r3, [r3, #16]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d109      	bne.n	800800e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008002:	f107 0208 	add.w	r2, r7, #8
 8008006:	4610      	mov	r0, r2
 8008008:	4798      	blx	r3
 800800a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800800c:	e029      	b.n	8008062 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fa2a 	bl	800846a <USBD_CtlError>
        err++;
 8008016:	7afb      	ldrb	r3, [r7, #11]
 8008018:	3301      	adds	r3, #1
 800801a:	72fb      	strb	r3, [r7, #11]
      break;
 800801c:	e021      	b.n	8008062 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	7c1b      	ldrb	r3, [r3, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10d      	bne.n	8008042 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800802c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802e:	f107 0208 	add.w	r2, r7, #8
 8008032:	4610      	mov	r0, r2
 8008034:	4798      	blx	r3
 8008036:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	3301      	adds	r3, #1
 800803c:	2207      	movs	r2, #7
 800803e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008040:	e00f      	b.n	8008062 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fa10 	bl	800846a <USBD_CtlError>
        err++;
 800804a:	7afb      	ldrb	r3, [r7, #11]
 800804c:	3301      	adds	r3, #1
 800804e:	72fb      	strb	r3, [r7, #11]
      break;
 8008050:	e007      	b.n	8008062 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fa08 	bl	800846a <USBD_CtlError>
      err++;
 800805a:	7afb      	ldrb	r3, [r7, #11]
 800805c:	3301      	adds	r3, #1
 800805e:	72fb      	strb	r3, [r7, #11]
      break;
 8008060:	bf00      	nop
  }

  if (err != 0U)
 8008062:	7afb      	ldrb	r3, [r7, #11]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d11e      	bne.n	80080a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	88db      	ldrh	r3, [r3, #6]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d016      	beq.n	800809e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008070:	893b      	ldrh	r3, [r7, #8]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00e      	beq.n	8008094 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	88da      	ldrh	r2, [r3, #6]
 800807a:	893b      	ldrh	r3, [r7, #8]
 800807c:	4293      	cmp	r3, r2
 800807e:	bf28      	it	cs
 8008080:	4613      	movcs	r3, r2
 8008082:	b29b      	uxth	r3, r3
 8008084:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008086:	893b      	ldrh	r3, [r7, #8]
 8008088:	461a      	mov	r2, r3
 800808a:	68f9      	ldr	r1, [r7, #12]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fa5d 	bl	800854c <USBD_CtlSendData>
 8008092:	e009      	b.n	80080a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f9e7 	bl	800846a <USBD_CtlError>
 800809c:	e004      	b.n	80080a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 faae 	bl	8008600 <USBD_CtlSendStatus>
 80080a4:	e000      	b.n	80080a8 <USBD_GetDescriptor+0x2cc>
    return;
 80080a6:	bf00      	nop
  }
}
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop

080080b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	889b      	ldrh	r3, [r3, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d131      	bne.n	8008126 <USBD_SetAddress+0x76>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	88db      	ldrh	r3, [r3, #6]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d12d      	bne.n	8008126 <USBD_SetAddress+0x76>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	885b      	ldrh	r3, [r3, #2]
 80080ce:	2b7f      	cmp	r3, #127	; 0x7f
 80080d0:	d829      	bhi.n	8008126 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	885b      	ldrh	r3, [r3, #2]
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d104      	bne.n	80080f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f9bc 	bl	800846a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080f2:	e01d      	b.n	8008130 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	7bfa      	ldrb	r2, [r7, #15]
 80080f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fefb 	bl	8008efc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa7a 	bl	8008600 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d004      	beq.n	800811c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2202      	movs	r2, #2
 8008116:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800811a:	e009      	b.n	8008130 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008124:	e004      	b.n	8008130 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f99e 	bl	800846a <USBD_CtlError>
  }
}
 800812e:	bf00      	nop
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	885b      	ldrh	r3, [r3, #2]
 800814a:	b2da      	uxtb	r2, r3
 800814c:	4b4e      	ldr	r3, [pc, #312]	; (8008288 <USBD_SetConfig+0x150>)
 800814e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008150:	4b4d      	ldr	r3, [pc, #308]	; (8008288 <USBD_SetConfig+0x150>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d905      	bls.n	8008164 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f985 	bl	800846a <USBD_CtlError>
    return USBD_FAIL;
 8008160:	2303      	movs	r3, #3
 8008162:	e08c      	b.n	800827e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b02      	cmp	r3, #2
 800816e:	d002      	beq.n	8008176 <USBD_SetConfig+0x3e>
 8008170:	2b03      	cmp	r3, #3
 8008172:	d029      	beq.n	80081c8 <USBD_SetConfig+0x90>
 8008174:	e075      	b.n	8008262 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008176:	4b44      	ldr	r3, [pc, #272]	; (8008288 <USBD_SetConfig+0x150>)
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d020      	beq.n	80081c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800817e:	4b42      	ldr	r3, [pc, #264]	; (8008288 <USBD_SetConfig+0x150>)
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008188:	4b3f      	ldr	r3, [pc, #252]	; (8008288 <USBD_SetConfig+0x150>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	4619      	mov	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7fe ffe7 	bl	8007162 <USBD_SetClassConfig>
 8008194:	4603      	mov	r3, r0
 8008196:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008198:	7bfb      	ldrb	r3, [r7, #15]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d008      	beq.n	80081b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f962 	bl	800846a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2202      	movs	r2, #2
 80081aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80081ae:	e065      	b.n	800827c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fa25 	bl	8008600 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2203      	movs	r2, #3
 80081ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80081be:	e05d      	b.n	800827c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fa1d 	bl	8008600 <USBD_CtlSendStatus>
      break;
 80081c6:	e059      	b.n	800827c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80081c8:	4b2f      	ldr	r3, [pc, #188]	; (8008288 <USBD_SetConfig+0x150>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d112      	bne.n	80081f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80081d8:	4b2b      	ldr	r3, [pc, #172]	; (8008288 <USBD_SetConfig+0x150>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	461a      	mov	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081e2:	4b29      	ldr	r3, [pc, #164]	; (8008288 <USBD_SetConfig+0x150>)
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7fe ffd6 	bl	800719a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fa06 	bl	8008600 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80081f4:	e042      	b.n	800827c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80081f6:	4b24      	ldr	r3, [pc, #144]	; (8008288 <USBD_SetConfig+0x150>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	429a      	cmp	r2, r3
 8008202:	d02a      	beq.n	800825a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	b2db      	uxtb	r3, r3
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7fe ffc4 	bl	800719a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008212:	4b1d      	ldr	r3, [pc, #116]	; (8008288 <USBD_SetConfig+0x150>)
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800821c:	4b1a      	ldr	r3, [pc, #104]	; (8008288 <USBD_SetConfig+0x150>)
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	4619      	mov	r1, r3
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7fe ff9d 	bl	8007162 <USBD_SetClassConfig>
 8008228:	4603      	mov	r3, r0
 800822a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00f      	beq.n	8008252 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f918 	bl	800846a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7fe ffa9 	bl	800719a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008250:	e014      	b.n	800827c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f9d4 	bl	8008600 <USBD_CtlSendStatus>
      break;
 8008258:	e010      	b.n	800827c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f9d0 	bl	8008600 <USBD_CtlSendStatus>
      break;
 8008260:	e00c      	b.n	800827c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f900 	bl	800846a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800826a:	4b07      	ldr	r3, [pc, #28]	; (8008288 <USBD_SetConfig+0x150>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7fe ff92 	bl	800719a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008276:	2303      	movs	r3, #3
 8008278:	73fb      	strb	r3, [r7, #15]
      break;
 800827a:	bf00      	nop
  }

  return ret;
 800827c:	7bfb      	ldrb	r3, [r7, #15]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000310 	.word	0x20000310

0800828c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	88db      	ldrh	r3, [r3, #6]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d004      	beq.n	80082a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f8e2 	bl	800846a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80082a6:	e023      	b.n	80082f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	dc02      	bgt.n	80082ba <USBD_GetConfig+0x2e>
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	dc03      	bgt.n	80082c0 <USBD_GetConfig+0x34>
 80082b8:	e015      	b.n	80082e6 <USBD_GetConfig+0x5a>
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d00b      	beq.n	80082d6 <USBD_GetConfig+0x4a>
 80082be:	e012      	b.n	80082e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3308      	adds	r3, #8
 80082ca:	2201      	movs	r2, #1
 80082cc:	4619      	mov	r1, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f93c 	bl	800854c <USBD_CtlSendData>
        break;
 80082d4:	e00c      	b.n	80082f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3304      	adds	r3, #4
 80082da:	2201      	movs	r2, #1
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f934 	bl	800854c <USBD_CtlSendData>
        break;
 80082e4:	e004      	b.n	80082f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f8be 	bl	800846a <USBD_CtlError>
        break;
 80082ee:	bf00      	nop
}
 80082f0:	bf00      	nop
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008308:	b2db      	uxtb	r3, r3
 800830a:	3b01      	subs	r3, #1
 800830c:	2b02      	cmp	r3, #2
 800830e:	d81e      	bhi.n	800834e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	88db      	ldrh	r3, [r3, #6]
 8008314:	2b02      	cmp	r3, #2
 8008316:	d004      	beq.n	8008322 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f8a5 	bl	800846a <USBD_CtlError>
        break;
 8008320:	e01a      	b.n	8008358 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800832e:	2b00      	cmp	r3, #0
 8008330:	d005      	beq.n	800833e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	f043 0202 	orr.w	r2, r3, #2
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	330c      	adds	r3, #12
 8008342:	2202      	movs	r2, #2
 8008344:	4619      	mov	r1, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f900 	bl	800854c <USBD_CtlSendData>
      break;
 800834c:	e004      	b.n	8008358 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f88a 	bl	800846a <USBD_CtlError>
      break;
 8008356:	bf00      	nop
  }
}
 8008358:	bf00      	nop
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	885b      	ldrh	r3, [r3, #2]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d107      	bne.n	8008382 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 f940 	bl	8008600 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008380:	e013      	b.n	80083aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	885b      	ldrh	r3, [r3, #2]
 8008386:	2b02      	cmp	r3, #2
 8008388:	d10b      	bne.n	80083a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	889b      	ldrh	r3, [r3, #4]
 800838e:	0a1b      	lsrs	r3, r3, #8
 8008390:	b29b      	uxth	r3, r3
 8008392:	b2da      	uxtb	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f930 	bl	8008600 <USBD_CtlSendStatus>
}
 80083a0:	e003      	b.n	80083aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f860 	bl	800846a <USBD_CtlError>
}
 80083aa:	bf00      	nop
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b082      	sub	sp, #8
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	3b01      	subs	r3, #1
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d80b      	bhi.n	80083e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	885b      	ldrh	r3, [r3, #2]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d10c      	bne.n	80083ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f910 	bl	8008600 <USBD_CtlSendStatus>
      }
      break;
 80083e0:	e004      	b.n	80083ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f840 	bl	800846a <USBD_CtlError>
      break;
 80083ea:	e000      	b.n	80083ee <USBD_ClrFeature+0x3c>
      break;
 80083ec:	bf00      	nop
  }
}
 80083ee:	bf00      	nop
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b084      	sub	sp, #16
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	781a      	ldrb	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3301      	adds	r3, #1
 8008410:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	781a      	ldrb	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3301      	adds	r3, #1
 800841e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f7ff fa41 	bl	80078a8 <SWAPBYTE>
 8008426:	4603      	mov	r3, r0
 8008428:	461a      	mov	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3301      	adds	r3, #1
 8008432:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	3301      	adds	r3, #1
 8008438:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f7ff fa34 	bl	80078a8 <SWAPBYTE>
 8008440:	4603      	mov	r3, r0
 8008442:	461a      	mov	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3301      	adds	r3, #1
 800844c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3301      	adds	r3, #1
 8008452:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f7ff fa27 	bl	80078a8 <SWAPBYTE>
 800845a:	4603      	mov	r3, r0
 800845c:	461a      	mov	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	80da      	strh	r2, [r3, #6]
}
 8008462:	bf00      	nop
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b082      	sub	sp, #8
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008474:	2180      	movs	r1, #128	; 0x80
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fcd6 	bl	8008e28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800847c:	2100      	movs	r1, #0
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fcd2 	bl	8008e28 <USBD_LL_StallEP>
}
 8008484:	bf00      	nop
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008498:	2300      	movs	r3, #0
 800849a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d036      	beq.n	8008510 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80084a6:	6938      	ldr	r0, [r7, #16]
 80084a8:	f000 f836 	bl	8008518 <USBD_GetLen>
 80084ac:	4603      	mov	r3, r0
 80084ae:	3301      	adds	r3, #1
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	4413      	add	r3, r2
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	7812      	ldrb	r2, [r2, #0]
 80084c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
 80084c8:	3301      	adds	r3, #1
 80084ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80084cc:	7dfb      	ldrb	r3, [r7, #23]
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	4413      	add	r3, r2
 80084d2:	2203      	movs	r2, #3
 80084d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
 80084d8:	3301      	adds	r3, #1
 80084da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80084dc:	e013      	b.n	8008506 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80084de:	7dfb      	ldrb	r3, [r7, #23]
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	4413      	add	r3, r2
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	7812      	ldrb	r2, [r2, #0]
 80084e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	3301      	adds	r3, #1
 80084ee:	613b      	str	r3, [r7, #16]
    idx++;
 80084f0:	7dfb      	ldrb	r3, [r7, #23]
 80084f2:	3301      	adds	r3, #1
 80084f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80084f6:	7dfb      	ldrb	r3, [r7, #23]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	4413      	add	r3, r2
 80084fc:	2200      	movs	r2, #0
 80084fe:	701a      	strb	r2, [r3, #0]
    idx++;
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	3301      	adds	r3, #1
 8008504:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e7      	bne.n	80084de <USBD_GetString+0x52>
 800850e:	e000      	b.n	8008512 <USBD_GetString+0x86>
    return;
 8008510:	bf00      	nop
  }
}
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008520:	2300      	movs	r3, #0
 8008522:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008528:	e005      	b.n	8008536 <USBD_GetLen+0x1e>
  {
    len++;
 800852a:	7bfb      	ldrb	r3, [r7, #15]
 800852c:	3301      	adds	r3, #1
 800852e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	3301      	adds	r3, #1
 8008534:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1f5      	bne.n	800852a <USBD_GetLen+0x12>
  }

  return len;
 800853e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2202      	movs	r2, #2
 800855c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	2100      	movs	r1, #0
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fce1 	bl	8008f3a <USBD_LL_Transmit>

  return USBD_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	2100      	movs	r1, #0
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 fcd0 	bl	8008f3a <USBD_LL_Transmit>

  return USBD_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2203      	movs	r2, #3
 80085b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	2100      	movs	r1, #0
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 fcd4 	bl	8008f7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	2100      	movs	r1, #0
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 fcc3 	bl	8008f7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2204      	movs	r2, #4
 800860c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008610:	2300      	movs	r3, #0
 8008612:	2200      	movs	r2, #0
 8008614:	2100      	movs	r1, #0
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fc8f 	bl	8008f3a <USBD_LL_Transmit>

  return USBD_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b082      	sub	sp, #8
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2205      	movs	r2, #5
 8008632:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008636:	2300      	movs	r3, #0
 8008638:	2200      	movs	r2, #0
 800863a:	2100      	movs	r1, #0
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fc9d 	bl	8008f7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008650:	2200      	movs	r2, #0
 8008652:	4912      	ldr	r1, [pc, #72]	; (800869c <MX_USB_DEVICE_Init+0x50>)
 8008654:	4812      	ldr	r0, [pc, #72]	; (80086a0 <MX_USB_DEVICE_Init+0x54>)
 8008656:	f7fe fd07 	bl	8007068 <USBD_Init>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008660:	f7f8 f968 	bl	8000934 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008664:	490f      	ldr	r1, [pc, #60]	; (80086a4 <MX_USB_DEVICE_Init+0x58>)
 8008666:	480e      	ldr	r0, [pc, #56]	; (80086a0 <MX_USB_DEVICE_Init+0x54>)
 8008668:	f7fe fd2e 	bl	80070c8 <USBD_RegisterClass>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008672:	f7f8 f95f 	bl	8000934 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008676:	490c      	ldr	r1, [pc, #48]	; (80086a8 <MX_USB_DEVICE_Init+0x5c>)
 8008678:	4809      	ldr	r0, [pc, #36]	; (80086a0 <MX_USB_DEVICE_Init+0x54>)
 800867a:	f7fe fc1f 	bl	8006ebc <USBD_CDC_RegisterInterface>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008684:	f7f8 f956 	bl	8000934 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008688:	4805      	ldr	r0, [pc, #20]	; (80086a0 <MX_USB_DEVICE_Init+0x54>)
 800868a:	f7fe fd53 	bl	8007134 <USBD_Start>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008694:	f7f8 f94e 	bl	8000934 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008698:	bf00      	nop
 800869a:	bd80      	pop	{r7, pc}
 800869c:	200000bc 	.word	0x200000bc
 80086a0:	20000314 	.word	0x20000314
 80086a4:	20000028 	.word	0x20000028
 80086a8:	200000a8 	.word	0x200000a8

080086ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80086b0:	2200      	movs	r2, #0
 80086b2:	4905      	ldr	r1, [pc, #20]	; (80086c8 <CDC_Init_FS+0x1c>)
 80086b4:	4805      	ldr	r0, [pc, #20]	; (80086cc <CDC_Init_FS+0x20>)
 80086b6:	f7fe fc1b 	bl	8006ef0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80086ba:	4905      	ldr	r1, [pc, #20]	; (80086d0 <CDC_Init_FS+0x24>)
 80086bc:	4803      	ldr	r0, [pc, #12]	; (80086cc <CDC_Init_FS+0x20>)
 80086be:	f7fe fc39 	bl	8006f34 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80086c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20000df0 	.word	0x20000df0
 80086cc:	20000314 	.word	0x20000314
 80086d0:	200005f0 	.word	0x200005f0

080086d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80086d4:	b480      	push	{r7}
 80086d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80086d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80086da:	4618      	mov	r0, r3
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	4603      	mov	r3, r0
 80086ec:	6039      	str	r1, [r7, #0]
 80086ee:	71fb      	strb	r3, [r7, #7]
 80086f0:	4613      	mov	r3, r2
 80086f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80086f4:	79fb      	ldrb	r3, [r7, #7]
 80086f6:	2b23      	cmp	r3, #35	; 0x23
 80086f8:	d84a      	bhi.n	8008790 <CDC_Control_FS+0xac>
 80086fa:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <CDC_Control_FS+0x1c>)
 80086fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008700:	08008791 	.word	0x08008791
 8008704:	08008791 	.word	0x08008791
 8008708:	08008791 	.word	0x08008791
 800870c:	08008791 	.word	0x08008791
 8008710:	08008791 	.word	0x08008791
 8008714:	08008791 	.word	0x08008791
 8008718:	08008791 	.word	0x08008791
 800871c:	08008791 	.word	0x08008791
 8008720:	08008791 	.word	0x08008791
 8008724:	08008791 	.word	0x08008791
 8008728:	08008791 	.word	0x08008791
 800872c:	08008791 	.word	0x08008791
 8008730:	08008791 	.word	0x08008791
 8008734:	08008791 	.word	0x08008791
 8008738:	08008791 	.word	0x08008791
 800873c:	08008791 	.word	0x08008791
 8008740:	08008791 	.word	0x08008791
 8008744:	08008791 	.word	0x08008791
 8008748:	08008791 	.word	0x08008791
 800874c:	08008791 	.word	0x08008791
 8008750:	08008791 	.word	0x08008791
 8008754:	08008791 	.word	0x08008791
 8008758:	08008791 	.word	0x08008791
 800875c:	08008791 	.word	0x08008791
 8008760:	08008791 	.word	0x08008791
 8008764:	08008791 	.word	0x08008791
 8008768:	08008791 	.word	0x08008791
 800876c:	08008791 	.word	0x08008791
 8008770:	08008791 	.word	0x08008791
 8008774:	08008791 	.word	0x08008791
 8008778:	08008791 	.word	0x08008791
 800877c:	08008791 	.word	0x08008791
 8008780:	08008791 	.word	0x08008791
 8008784:	08008791 	.word	0x08008791
 8008788:	08008791 	.word	0x08008791
 800878c:	08008791 	.word	0x08008791
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008790:	bf00      	nop
  }

  return (USBD_OK);
 8008792:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008794:	4618      	mov	r0, r3
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80087aa:	6879      	ldr	r1, [r7, #4]
 80087ac:	4805      	ldr	r0, [pc, #20]	; (80087c4 <CDC_Receive_FS+0x24>)
 80087ae:	f7fe fbc1 	bl	8006f34 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80087b2:	4804      	ldr	r0, [pc, #16]	; (80087c4 <CDC_Receive_FS+0x24>)
 80087b4:	f7fe fc22 	bl	8006ffc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80087b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20000314 	.word	0x20000314

080087c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80087d4:	2300      	movs	r3, #0
 80087d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80087d8:	4b0d      	ldr	r3, [pc, #52]	; (8008810 <CDC_Transmit_FS+0x48>)
 80087da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e00b      	b.n	8008806 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80087ee:	887b      	ldrh	r3, [r7, #2]
 80087f0:	461a      	mov	r2, r3
 80087f2:	6879      	ldr	r1, [r7, #4]
 80087f4:	4806      	ldr	r0, [pc, #24]	; (8008810 <CDC_Transmit_FS+0x48>)
 80087f6:	f7fe fb7b 	bl	8006ef0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80087fa:	4805      	ldr	r0, [pc, #20]	; (8008810 <CDC_Transmit_FS+0x48>)
 80087fc:	f7fe fbb8 	bl	8006f70 <USBD_CDC_TransmitPacket>
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008804:	7bfb      	ldrb	r3, [r7, #15]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20000314 	.word	0x20000314

08008814 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	4613      	mov	r3, r2
 8008820:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008826:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800882a:	4618      	mov	r0, r3
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
	...

08008838 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	4603      	mov	r3, r0
 8008840:	6039      	str	r1, [r7, #0]
 8008842:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	2212      	movs	r2, #18
 8008848:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800884a:	4b03      	ldr	r3, [pc, #12]	; (8008858 <USBD_FS_DeviceDescriptor+0x20>)
}
 800884c:	4618      	mov	r0, r3
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr
 8008858:	200000d8 	.word	0x200000d8

0800885c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	4603      	mov	r3, r0
 8008864:	6039      	str	r1, [r7, #0]
 8008866:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2204      	movs	r2, #4
 800886c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800886e:	4b03      	ldr	r3, [pc, #12]	; (800887c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008870:	4618      	mov	r0, r3
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	200000ec 	.word	0x200000ec

08008880 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	4603      	mov	r3, r0
 8008888:	6039      	str	r1, [r7, #0]
 800888a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800888c:	79fb      	ldrb	r3, [r7, #7]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d105      	bne.n	800889e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	4907      	ldr	r1, [pc, #28]	; (80088b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008896:	4808      	ldr	r0, [pc, #32]	; (80088b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008898:	f7ff fdf8 	bl	800848c <USBD_GetString>
 800889c:	e004      	b.n	80088a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	4904      	ldr	r1, [pc, #16]	; (80088b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80088a2:	4805      	ldr	r0, [pc, #20]	; (80088b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80088a4:	f7ff fdf2 	bl	800848c <USBD_GetString>
  }
  return USBD_StrDesc;
 80088a8:	4b02      	ldr	r3, [pc, #8]	; (80088b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	200015f0 	.word	0x200015f0
 80088b8:	0800a020 	.word	0x0800a020

080088bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	4603      	mov	r3, r0
 80088c4:	6039      	str	r1, [r7, #0]
 80088c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80088c8:	683a      	ldr	r2, [r7, #0]
 80088ca:	4904      	ldr	r1, [pc, #16]	; (80088dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80088cc:	4804      	ldr	r0, [pc, #16]	; (80088e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80088ce:	f7ff fddd 	bl	800848c <USBD_GetString>
  return USBD_StrDesc;
 80088d2:	4b02      	ldr	r3, [pc, #8]	; (80088dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	200015f0 	.word	0x200015f0
 80088e0:	0800a038 	.word	0x0800a038

080088e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	4603      	mov	r3, r0
 80088ec:	6039      	str	r1, [r7, #0]
 80088ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	221a      	movs	r2, #26
 80088f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80088f6:	f000 f843 	bl	8008980 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80088fa:	4b02      	ldr	r3, [pc, #8]	; (8008904 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	200000f0 	.word	0x200000f0

08008908 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	6039      	str	r1, [r7, #0]
 8008912:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008914:	79fb      	ldrb	r3, [r7, #7]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d105      	bne.n	8008926 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	4907      	ldr	r1, [pc, #28]	; (800893c <USBD_FS_ConfigStrDescriptor+0x34>)
 800891e:	4808      	ldr	r0, [pc, #32]	; (8008940 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008920:	f7ff fdb4 	bl	800848c <USBD_GetString>
 8008924:	e004      	b.n	8008930 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	4904      	ldr	r1, [pc, #16]	; (800893c <USBD_FS_ConfigStrDescriptor+0x34>)
 800892a:	4805      	ldr	r0, [pc, #20]	; (8008940 <USBD_FS_ConfigStrDescriptor+0x38>)
 800892c:	f7ff fdae 	bl	800848c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008930:	4b02      	ldr	r3, [pc, #8]	; (800893c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008932:	4618      	mov	r0, r3
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	200015f0 	.word	0x200015f0
 8008940:	0800a04c 	.word	0x0800a04c

08008944 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	4603      	mov	r3, r0
 800894c:	6039      	str	r1, [r7, #0]
 800894e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008950:	79fb      	ldrb	r3, [r7, #7]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d105      	bne.n	8008962 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008956:	683a      	ldr	r2, [r7, #0]
 8008958:	4907      	ldr	r1, [pc, #28]	; (8008978 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800895a:	4808      	ldr	r0, [pc, #32]	; (800897c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800895c:	f7ff fd96 	bl	800848c <USBD_GetString>
 8008960:	e004      	b.n	800896c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	4904      	ldr	r1, [pc, #16]	; (8008978 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008966:	4805      	ldr	r0, [pc, #20]	; (800897c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008968:	f7ff fd90 	bl	800848c <USBD_GetString>
  }
  return USBD_StrDesc;
 800896c:	4b02      	ldr	r3, [pc, #8]	; (8008978 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800896e:	4618      	mov	r0, r3
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	200015f0 	.word	0x200015f0
 800897c:	0800a058 	.word	0x0800a058

08008980 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008986:	4b0f      	ldr	r3, [pc, #60]	; (80089c4 <Get_SerialNum+0x44>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800898c:	4b0e      	ldr	r3, [pc, #56]	; (80089c8 <Get_SerialNum+0x48>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008992:	4b0e      	ldr	r3, [pc, #56]	; (80089cc <Get_SerialNum+0x4c>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4413      	add	r3, r2
 800899e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d009      	beq.n	80089ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80089a6:	2208      	movs	r2, #8
 80089a8:	4909      	ldr	r1, [pc, #36]	; (80089d0 <Get_SerialNum+0x50>)
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f000 f814 	bl	80089d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80089b0:	2204      	movs	r2, #4
 80089b2:	4908      	ldr	r1, [pc, #32]	; (80089d4 <Get_SerialNum+0x54>)
 80089b4:	68b8      	ldr	r0, [r7, #8]
 80089b6:	f000 f80f 	bl	80089d8 <IntToUnicode>
  }
}
 80089ba:	bf00      	nop
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	1fff7a10 	.word	0x1fff7a10
 80089c8:	1fff7a14 	.word	0x1fff7a14
 80089cc:	1fff7a18 	.word	0x1fff7a18
 80089d0:	200000f2 	.word	0x200000f2
 80089d4:	20000102 	.word	0x20000102

080089d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	4613      	mov	r3, r2
 80089e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80089ea:	2300      	movs	r3, #0
 80089ec:	75fb      	strb	r3, [r7, #23]
 80089ee:	e027      	b.n	8008a40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	0f1b      	lsrs	r3, r3, #28
 80089f4:	2b09      	cmp	r3, #9
 80089f6:	d80b      	bhi.n	8008a10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	0f1b      	lsrs	r3, r3, #28
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	7dfb      	ldrb	r3, [r7, #23]
 8008a00:	005b      	lsls	r3, r3, #1
 8008a02:	4619      	mov	r1, r3
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	440b      	add	r3, r1
 8008a08:	3230      	adds	r2, #48	; 0x30
 8008a0a:	b2d2      	uxtb	r2, r2
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	e00a      	b.n	8008a26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	0f1b      	lsrs	r3, r3, #28
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	7dfb      	ldrb	r3, [r7, #23]
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	440b      	add	r3, r1
 8008a20:	3237      	adds	r2, #55	; 0x37
 8008a22:	b2d2      	uxtb	r2, r2
 8008a24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	011b      	lsls	r3, r3, #4
 8008a2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008a2c:	7dfb      	ldrb	r3, [r7, #23]
 8008a2e:	005b      	lsls	r3, r3, #1
 8008a30:	3301      	adds	r3, #1
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	4413      	add	r3, r2
 8008a36:	2200      	movs	r2, #0
 8008a38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008a3a:	7dfb      	ldrb	r3, [r7, #23]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	75fb      	strb	r3, [r7, #23]
 8008a40:	7dfa      	ldrb	r2, [r7, #23]
 8008a42:	79fb      	ldrb	r3, [r7, #7]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d3d3      	bcc.n	80089f0 <IntToUnicode+0x18>
  }
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	371c      	adds	r7, #28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
	...

08008a58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b08a      	sub	sp, #40	; 0x28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a60:	f107 0314 	add.w	r3, r7, #20
 8008a64:	2200      	movs	r2, #0
 8008a66:	601a      	str	r2, [r3, #0]
 8008a68:	605a      	str	r2, [r3, #4]
 8008a6a:	609a      	str	r2, [r3, #8]
 8008a6c:	60da      	str	r2, [r3, #12]
 8008a6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a78:	d13a      	bne.n	8008af0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	613b      	str	r3, [r7, #16]
 8008a7e:	4b1e      	ldr	r3, [pc, #120]	; (8008af8 <HAL_PCD_MspInit+0xa0>)
 8008a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a82:	4a1d      	ldr	r2, [pc, #116]	; (8008af8 <HAL_PCD_MspInit+0xa0>)
 8008a84:	f043 0301 	orr.w	r3, r3, #1
 8008a88:	6313      	str	r3, [r2, #48]	; 0x30
 8008a8a:	4b1b      	ldr	r3, [pc, #108]	; (8008af8 <HAL_PCD_MspInit+0xa0>)
 8008a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	613b      	str	r3, [r7, #16]
 8008a94:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008a96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008aa8:	230a      	movs	r3, #10
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008aac:	f107 0314 	add.w	r3, r7, #20
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	4812      	ldr	r0, [pc, #72]	; (8008afc <HAL_PCD_MspInit+0xa4>)
 8008ab4:	f7f9 f9da 	bl	8001e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ab8:	4b0f      	ldr	r3, [pc, #60]	; (8008af8 <HAL_PCD_MspInit+0xa0>)
 8008aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008abc:	4a0e      	ldr	r2, [pc, #56]	; (8008af8 <HAL_PCD_MspInit+0xa0>)
 8008abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ac2:	6353      	str	r3, [r2, #52]	; 0x34
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	60fb      	str	r3, [r7, #12]
 8008ac8:	4b0b      	ldr	r3, [pc, #44]	; (8008af8 <HAL_PCD_MspInit+0xa0>)
 8008aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008acc:	4a0a      	ldr	r2, [pc, #40]	; (8008af8 <HAL_PCD_MspInit+0xa0>)
 8008ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ad2:	6453      	str	r3, [r2, #68]	; 0x44
 8008ad4:	4b08      	ldr	r3, [pc, #32]	; (8008af8 <HAL_PCD_MspInit+0xa0>)
 8008ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008adc:	60fb      	str	r3, [r7, #12]
 8008ade:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	2043      	movs	r0, #67	; 0x43
 8008ae6:	f7f8 fea0 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008aea:	2043      	movs	r0, #67	; 0x43
 8008aec:	f7f8 feb9 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008af0:	bf00      	nop
 8008af2:	3728      	adds	r7, #40	; 0x28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	40023800 	.word	0x40023800
 8008afc:	40020000 	.word	0x40020000

08008b00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008b14:	4619      	mov	r1, r3
 8008b16:	4610      	mov	r0, r2
 8008b18:	f7fe fb59 	bl	80071ce <USBD_LL_SetupStage>
}
 8008b1c:	bf00      	nop
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008b36:	78fa      	ldrb	r2, [r7, #3]
 8008b38:	6879      	ldr	r1, [r7, #4]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	00db      	lsls	r3, r3, #3
 8008b3e:	4413      	add	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	440b      	add	r3, r1
 8008b44:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	78fb      	ldrb	r3, [r7, #3]
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	f7fe fb93 	bl	8007278 <USBD_LL_DataOutStage>
}
 8008b52:	bf00      	nop
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b082      	sub	sp, #8
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	460b      	mov	r3, r1
 8008b64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008b6c:	78fa      	ldrb	r2, [r7, #3]
 8008b6e:	6879      	ldr	r1, [r7, #4]
 8008b70:	4613      	mov	r3, r2
 8008b72:	00db      	lsls	r3, r3, #3
 8008b74:	4413      	add	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	440b      	add	r3, r1
 8008b7a:	334c      	adds	r3, #76	; 0x4c
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	78fb      	ldrb	r3, [r7, #3]
 8008b80:	4619      	mov	r1, r3
 8008b82:	f7fe fc2c 	bl	80073de <USBD_LL_DataInStage>
}
 8008b86:	bf00      	nop
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b082      	sub	sp, #8
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fe fd60 	bl	8007662 <USBD_LL_SOF>
}
 8008ba2:	bf00      	nop
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d001      	beq.n	8008bc2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008bbe:	f7f7 feb9 	bl	8000934 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bc8:	7bfa      	ldrb	r2, [r7, #15]
 8008bca:	4611      	mov	r1, r2
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7fe fd0a 	bl	80075e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fe fcb2 	bl	8007542 <USBD_LL_Reset>
}
 8008bde:	bf00      	nop
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
	...

08008be8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fe fd05 	bl	8007606 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	6812      	ldr	r2, [r2, #0]
 8008c0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c0e:	f043 0301 	orr.w	r3, r3, #1
 8008c12:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d005      	beq.n	8008c28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c1c:	4b04      	ldr	r3, [pc, #16]	; (8008c30 <HAL_PCD_SuspendCallback+0x48>)
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	4a03      	ldr	r2, [pc, #12]	; (8008c30 <HAL_PCD_SuspendCallback+0x48>)
 8008c22:	f043 0306 	orr.w	r3, r3, #6
 8008c26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008c28:	bf00      	nop
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	e000ed00 	.word	0xe000ed00

08008c34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fe fcf5 	bl	8007632 <USBD_LL_Resume>
}
 8008c48:	bf00      	nop
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c62:	78fa      	ldrb	r2, [r7, #3]
 8008c64:	4611      	mov	r1, r2
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7fe fd4d 	bl	8007706 <USBD_LL_IsoOUTIncomplete>
}
 8008c6c:	bf00      	nop
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c86:	78fa      	ldrb	r2, [r7, #3]
 8008c88:	4611      	mov	r1, r2
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fe fd09 	bl	80076a2 <USBD_LL_IsoINIncomplete>
}
 8008c90:	bf00      	nop
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fe fd5f 	bl	800776a <USBD_LL_DevConnected>
}
 8008cac:	bf00      	nop
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fe fd5c 	bl	8007780 <USBD_LL_DevDisconnected>
}
 8008cc8:	bf00      	nop
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d13c      	bne.n	8008d5a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ce0:	4a20      	ldr	r2, [pc, #128]	; (8008d64 <USBD_LL_Init+0x94>)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a1e      	ldr	r2, [pc, #120]	; (8008d64 <USBD_LL_Init+0x94>)
 8008cec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008cf0:	4b1c      	ldr	r3, [pc, #112]	; (8008d64 <USBD_LL_Init+0x94>)
 8008cf2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008cf6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008cf8:	4b1a      	ldr	r3, [pc, #104]	; (8008d64 <USBD_LL_Init+0x94>)
 8008cfa:	2204      	movs	r2, #4
 8008cfc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008cfe:	4b19      	ldr	r3, [pc, #100]	; (8008d64 <USBD_LL_Init+0x94>)
 8008d00:	2202      	movs	r2, #2
 8008d02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d04:	4b17      	ldr	r3, [pc, #92]	; (8008d64 <USBD_LL_Init+0x94>)
 8008d06:	2200      	movs	r2, #0
 8008d08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d0a:	4b16      	ldr	r3, [pc, #88]	; (8008d64 <USBD_LL_Init+0x94>)
 8008d0c:	2202      	movs	r2, #2
 8008d0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d10:	4b14      	ldr	r3, [pc, #80]	; (8008d64 <USBD_LL_Init+0x94>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008d16:	4b13      	ldr	r3, [pc, #76]	; (8008d64 <USBD_LL_Init+0x94>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008d1c:	4b11      	ldr	r3, [pc, #68]	; (8008d64 <USBD_LL_Init+0x94>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008d22:	4b10      	ldr	r3, [pc, #64]	; (8008d64 <USBD_LL_Init+0x94>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008d28:	4b0e      	ldr	r3, [pc, #56]	; (8008d64 <USBD_LL_Init+0x94>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008d2e:	480d      	ldr	r0, [pc, #52]	; (8008d64 <USBD_LL_Init+0x94>)
 8008d30:	f7f9 fb7e 	bl	8002430 <HAL_PCD_Init>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d001      	beq.n	8008d3e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008d3a:	f7f7 fdfb 	bl	8000934 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008d3e:	2180      	movs	r1, #128	; 0x80
 8008d40:	4808      	ldr	r0, [pc, #32]	; (8008d64 <USBD_LL_Init+0x94>)
 8008d42:	f7fa fdd6 	bl	80038f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d46:	2240      	movs	r2, #64	; 0x40
 8008d48:	2100      	movs	r1, #0
 8008d4a:	4806      	ldr	r0, [pc, #24]	; (8008d64 <USBD_LL_Init+0x94>)
 8008d4c:	f7fa fd8a 	bl	8003864 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d50:	2280      	movs	r2, #128	; 0x80
 8008d52:	2101      	movs	r1, #1
 8008d54:	4803      	ldr	r0, [pc, #12]	; (8008d64 <USBD_LL_Init+0x94>)
 8008d56:	f7fa fd85 	bl	8003864 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	200017f0 	.word	0x200017f0

08008d68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7f9 fc73 	bl	800266a <HAL_PCD_Start>
 8008d84:	4603      	mov	r3, r0
 8008d86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f000 f942 	bl	8009014 <USBD_Get_USB_Status>
 8008d90:	4603      	mov	r3, r0
 8008d92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d94:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	4608      	mov	r0, r1
 8008da8:	4611      	mov	r1, r2
 8008daa:	461a      	mov	r2, r3
 8008dac:	4603      	mov	r3, r0
 8008dae:	70fb      	strb	r3, [r7, #3]
 8008db0:	460b      	mov	r3, r1
 8008db2:	70bb      	strb	r3, [r7, #2]
 8008db4:	4613      	mov	r3, r2
 8008db6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008dc6:	78bb      	ldrb	r3, [r7, #2]
 8008dc8:	883a      	ldrh	r2, [r7, #0]
 8008dca:	78f9      	ldrb	r1, [r7, #3]
 8008dcc:	f7fa f944 	bl	8003058 <HAL_PCD_EP_Open>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 f91c 	bl	8009014 <USBD_Get_USB_Status>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	460b      	mov	r3, r1
 8008df4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e04:	78fa      	ldrb	r2, [r7, #3]
 8008e06:	4611      	mov	r1, r2
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7fa f98d 	bl	8003128 <HAL_PCD_EP_Close>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f000 f8fd 	bl	8009014 <USBD_Get_USB_Status>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e42:	78fa      	ldrb	r2, [r7, #3]
 8008e44:	4611      	mov	r1, r2
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fa fa65 	bl	8003316 <HAL_PCD_EP_SetStall>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 f8de 	bl	8009014 <USBD_Get_USB_Status>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b084      	sub	sp, #16
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	460b      	mov	r3, r1
 8008e70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e72:	2300      	movs	r3, #0
 8008e74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e80:	78fa      	ldrb	r2, [r7, #3]
 8008e82:	4611      	mov	r1, r2
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7fa faaa 	bl	80033de <HAL_PCD_EP_ClrStall>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 f8bf 	bl	8009014 <USBD_Get_USB_Status>
 8008e96:	4603      	mov	r3, r0
 8008e98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	460b      	mov	r3, r1
 8008eae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008eb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	da0b      	bge.n	8008ed8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ec0:	78fb      	ldrb	r3, [r7, #3]
 8008ec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ec6:	68f9      	ldr	r1, [r7, #12]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	00db      	lsls	r3, r3, #3
 8008ecc:	4413      	add	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	440b      	add	r3, r1
 8008ed2:	333e      	adds	r3, #62	; 0x3e
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	e00b      	b.n	8008ef0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ed8:	78fb      	ldrb	r3, [r7, #3]
 8008eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ede:	68f9      	ldr	r1, [r7, #12]
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	00db      	lsls	r3, r3, #3
 8008ee4:	4413      	add	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	440b      	add	r3, r1
 8008eea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008eee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3714      	adds	r7, #20
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f16:	78fa      	ldrb	r2, [r7, #3]
 8008f18:	4611      	mov	r1, r2
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fa f877 	bl	800300e <HAL_PCD_SetAddress>
 8008f20:	4603      	mov	r3, r0
 8008f22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 f874 	bl	8009014 <USBD_Get_USB_Status>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f30:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b086      	sub	sp, #24
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	60f8      	str	r0, [r7, #12]
 8008f42:	607a      	str	r2, [r7, #4]
 8008f44:	603b      	str	r3, [r7, #0]
 8008f46:	460b      	mov	r3, r1
 8008f48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f58:	7af9      	ldrb	r1, [r7, #11]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	f7fa f990 	bl	8003282 <HAL_PCD_EP_Transmit>
 8008f62:	4603      	mov	r3, r0
 8008f64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 f853 	bl	8009014 <USBD_Get_USB_Status>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f72:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3718      	adds	r7, #24
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	607a      	str	r2, [r7, #4]
 8008f86:	603b      	str	r3, [r7, #0]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f9a:	7af9      	ldrb	r1, [r7, #11]
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	f7fa f90c 	bl	80031bc <HAL_PCD_EP_Receive>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa8:	7dfb      	ldrb	r3, [r7, #23]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 f832 	bl	8009014 <USBD_Get_USB_Status>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008fb4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3718      	adds	r7, #24
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b082      	sub	sp, #8
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fd0:	78fa      	ldrb	r2, [r7, #3]
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fa f93c 	bl	8003252 <HAL_PCD_EP_GetRxCount>
 8008fda:	4603      	mov	r3, r0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008fec:	4b03      	ldr	r3, [pc, #12]	; (8008ffc <USBD_static_malloc+0x18>)
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	370c      	adds	r7, #12
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	20001cfc 	.word	0x20001cfc

08009000 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]

}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009022:	79fb      	ldrb	r3, [r7, #7]
 8009024:	2b03      	cmp	r3, #3
 8009026:	d817      	bhi.n	8009058 <USBD_Get_USB_Status+0x44>
 8009028:	a201      	add	r2, pc, #4	; (adr r2, 8009030 <USBD_Get_USB_Status+0x1c>)
 800902a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902e:	bf00      	nop
 8009030:	08009041 	.word	0x08009041
 8009034:	08009047 	.word	0x08009047
 8009038:	0800904d 	.word	0x0800904d
 800903c:	08009053 	.word	0x08009053
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	73fb      	strb	r3, [r7, #15]
    break;
 8009044:	e00b      	b.n	800905e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009046:	2303      	movs	r3, #3
 8009048:	73fb      	strb	r3, [r7, #15]
    break;
 800904a:	e008      	b.n	800905e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800904c:	2301      	movs	r3, #1
 800904e:	73fb      	strb	r3, [r7, #15]
    break;
 8009050:	e005      	b.n	800905e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009052:	2303      	movs	r3, #3
 8009054:	73fb      	strb	r3, [r7, #15]
    break;
 8009056:	e002      	b.n	800905e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009058:	2303      	movs	r3, #3
 800905a:	73fb      	strb	r3, [r7, #15]
    break;
 800905c:	bf00      	nop
  }
  return usb_status;
 800905e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3714      	adds	r7, #20
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <__errno>:
 800906c:	4b01      	ldr	r3, [pc, #4]	; (8009074 <__errno+0x8>)
 800906e:	6818      	ldr	r0, [r3, #0]
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	2000010c 	.word	0x2000010c

08009078 <__libc_init_array>:
 8009078:	b570      	push	{r4, r5, r6, lr}
 800907a:	4d0d      	ldr	r5, [pc, #52]	; (80090b0 <__libc_init_array+0x38>)
 800907c:	4c0d      	ldr	r4, [pc, #52]	; (80090b4 <__libc_init_array+0x3c>)
 800907e:	1b64      	subs	r4, r4, r5
 8009080:	10a4      	asrs	r4, r4, #2
 8009082:	2600      	movs	r6, #0
 8009084:	42a6      	cmp	r6, r4
 8009086:	d109      	bne.n	800909c <__libc_init_array+0x24>
 8009088:	4d0b      	ldr	r5, [pc, #44]	; (80090b8 <__libc_init_array+0x40>)
 800908a:	4c0c      	ldr	r4, [pc, #48]	; (80090bc <__libc_init_array+0x44>)
 800908c:	f000 ffae 	bl	8009fec <_init>
 8009090:	1b64      	subs	r4, r4, r5
 8009092:	10a4      	asrs	r4, r4, #2
 8009094:	2600      	movs	r6, #0
 8009096:	42a6      	cmp	r6, r4
 8009098:	d105      	bne.n	80090a6 <__libc_init_array+0x2e>
 800909a:	bd70      	pop	{r4, r5, r6, pc}
 800909c:	f855 3b04 	ldr.w	r3, [r5], #4
 80090a0:	4798      	blx	r3
 80090a2:	3601      	adds	r6, #1
 80090a4:	e7ee      	b.n	8009084 <__libc_init_array+0xc>
 80090a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80090aa:	4798      	blx	r3
 80090ac:	3601      	adds	r6, #1
 80090ae:	e7f2      	b.n	8009096 <__libc_init_array+0x1e>
 80090b0:	0800b4ec 	.word	0x0800b4ec
 80090b4:	0800b4ec 	.word	0x0800b4ec
 80090b8:	0800b4ec 	.word	0x0800b4ec
 80090bc:	0800b4f0 	.word	0x0800b4f0

080090c0 <memset>:
 80090c0:	4402      	add	r2, r0
 80090c2:	4603      	mov	r3, r0
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d100      	bne.n	80090ca <memset+0xa>
 80090c8:	4770      	bx	lr
 80090ca:	f803 1b01 	strb.w	r1, [r3], #1
 80090ce:	e7f9      	b.n	80090c4 <memset+0x4>

080090d0 <__sfputc_r>:
 80090d0:	6893      	ldr	r3, [r2, #8]
 80090d2:	3b01      	subs	r3, #1
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	b410      	push	{r4}
 80090d8:	6093      	str	r3, [r2, #8]
 80090da:	da08      	bge.n	80090ee <__sfputc_r+0x1e>
 80090dc:	6994      	ldr	r4, [r2, #24]
 80090de:	42a3      	cmp	r3, r4
 80090e0:	db01      	blt.n	80090e6 <__sfputc_r+0x16>
 80090e2:	290a      	cmp	r1, #10
 80090e4:	d103      	bne.n	80090ee <__sfputc_r+0x1e>
 80090e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090ea:	f000 baf7 	b.w	80096dc <__swbuf_r>
 80090ee:	6813      	ldr	r3, [r2, #0]
 80090f0:	1c58      	adds	r0, r3, #1
 80090f2:	6010      	str	r0, [r2, #0]
 80090f4:	7019      	strb	r1, [r3, #0]
 80090f6:	4608      	mov	r0, r1
 80090f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <__sfputs_r>:
 80090fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009100:	4606      	mov	r6, r0
 8009102:	460f      	mov	r7, r1
 8009104:	4614      	mov	r4, r2
 8009106:	18d5      	adds	r5, r2, r3
 8009108:	42ac      	cmp	r4, r5
 800910a:	d101      	bne.n	8009110 <__sfputs_r+0x12>
 800910c:	2000      	movs	r0, #0
 800910e:	e007      	b.n	8009120 <__sfputs_r+0x22>
 8009110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009114:	463a      	mov	r2, r7
 8009116:	4630      	mov	r0, r6
 8009118:	f7ff ffda 	bl	80090d0 <__sfputc_r>
 800911c:	1c43      	adds	r3, r0, #1
 800911e:	d1f3      	bne.n	8009108 <__sfputs_r+0xa>
 8009120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009124 <_vfiprintf_r>:
 8009124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009128:	460d      	mov	r5, r1
 800912a:	b09d      	sub	sp, #116	; 0x74
 800912c:	4614      	mov	r4, r2
 800912e:	4698      	mov	r8, r3
 8009130:	4606      	mov	r6, r0
 8009132:	b118      	cbz	r0, 800913c <_vfiprintf_r+0x18>
 8009134:	6983      	ldr	r3, [r0, #24]
 8009136:	b90b      	cbnz	r3, 800913c <_vfiprintf_r+0x18>
 8009138:	f000 fcaa 	bl	8009a90 <__sinit>
 800913c:	4b89      	ldr	r3, [pc, #548]	; (8009364 <_vfiprintf_r+0x240>)
 800913e:	429d      	cmp	r5, r3
 8009140:	d11b      	bne.n	800917a <_vfiprintf_r+0x56>
 8009142:	6875      	ldr	r5, [r6, #4]
 8009144:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009146:	07d9      	lsls	r1, r3, #31
 8009148:	d405      	bmi.n	8009156 <_vfiprintf_r+0x32>
 800914a:	89ab      	ldrh	r3, [r5, #12]
 800914c:	059a      	lsls	r2, r3, #22
 800914e:	d402      	bmi.n	8009156 <_vfiprintf_r+0x32>
 8009150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009152:	f000 fd3b 	bl	8009bcc <__retarget_lock_acquire_recursive>
 8009156:	89ab      	ldrh	r3, [r5, #12]
 8009158:	071b      	lsls	r3, r3, #28
 800915a:	d501      	bpl.n	8009160 <_vfiprintf_r+0x3c>
 800915c:	692b      	ldr	r3, [r5, #16]
 800915e:	b9eb      	cbnz	r3, 800919c <_vfiprintf_r+0x78>
 8009160:	4629      	mov	r1, r5
 8009162:	4630      	mov	r0, r6
 8009164:	f000 fb0c 	bl	8009780 <__swsetup_r>
 8009168:	b1c0      	cbz	r0, 800919c <_vfiprintf_r+0x78>
 800916a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800916c:	07dc      	lsls	r4, r3, #31
 800916e:	d50e      	bpl.n	800918e <_vfiprintf_r+0x6a>
 8009170:	f04f 30ff 	mov.w	r0, #4294967295
 8009174:	b01d      	add	sp, #116	; 0x74
 8009176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800917a:	4b7b      	ldr	r3, [pc, #492]	; (8009368 <_vfiprintf_r+0x244>)
 800917c:	429d      	cmp	r5, r3
 800917e:	d101      	bne.n	8009184 <_vfiprintf_r+0x60>
 8009180:	68b5      	ldr	r5, [r6, #8]
 8009182:	e7df      	b.n	8009144 <_vfiprintf_r+0x20>
 8009184:	4b79      	ldr	r3, [pc, #484]	; (800936c <_vfiprintf_r+0x248>)
 8009186:	429d      	cmp	r5, r3
 8009188:	bf08      	it	eq
 800918a:	68f5      	ldreq	r5, [r6, #12]
 800918c:	e7da      	b.n	8009144 <_vfiprintf_r+0x20>
 800918e:	89ab      	ldrh	r3, [r5, #12]
 8009190:	0598      	lsls	r0, r3, #22
 8009192:	d4ed      	bmi.n	8009170 <_vfiprintf_r+0x4c>
 8009194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009196:	f000 fd1a 	bl	8009bce <__retarget_lock_release_recursive>
 800919a:	e7e9      	b.n	8009170 <_vfiprintf_r+0x4c>
 800919c:	2300      	movs	r3, #0
 800919e:	9309      	str	r3, [sp, #36]	; 0x24
 80091a0:	2320      	movs	r3, #32
 80091a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80091aa:	2330      	movs	r3, #48	; 0x30
 80091ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009370 <_vfiprintf_r+0x24c>
 80091b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091b4:	f04f 0901 	mov.w	r9, #1
 80091b8:	4623      	mov	r3, r4
 80091ba:	469a      	mov	sl, r3
 80091bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091c0:	b10a      	cbz	r2, 80091c6 <_vfiprintf_r+0xa2>
 80091c2:	2a25      	cmp	r2, #37	; 0x25
 80091c4:	d1f9      	bne.n	80091ba <_vfiprintf_r+0x96>
 80091c6:	ebba 0b04 	subs.w	fp, sl, r4
 80091ca:	d00b      	beq.n	80091e4 <_vfiprintf_r+0xc0>
 80091cc:	465b      	mov	r3, fp
 80091ce:	4622      	mov	r2, r4
 80091d0:	4629      	mov	r1, r5
 80091d2:	4630      	mov	r0, r6
 80091d4:	f7ff ff93 	bl	80090fe <__sfputs_r>
 80091d8:	3001      	adds	r0, #1
 80091da:	f000 80aa 	beq.w	8009332 <_vfiprintf_r+0x20e>
 80091de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091e0:	445a      	add	r2, fp
 80091e2:	9209      	str	r2, [sp, #36]	; 0x24
 80091e4:	f89a 3000 	ldrb.w	r3, [sl]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 80a2 	beq.w	8009332 <_vfiprintf_r+0x20e>
 80091ee:	2300      	movs	r3, #0
 80091f0:	f04f 32ff 	mov.w	r2, #4294967295
 80091f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091f8:	f10a 0a01 	add.w	sl, sl, #1
 80091fc:	9304      	str	r3, [sp, #16]
 80091fe:	9307      	str	r3, [sp, #28]
 8009200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009204:	931a      	str	r3, [sp, #104]	; 0x68
 8009206:	4654      	mov	r4, sl
 8009208:	2205      	movs	r2, #5
 800920a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800920e:	4858      	ldr	r0, [pc, #352]	; (8009370 <_vfiprintf_r+0x24c>)
 8009210:	f7f6 ffe6 	bl	80001e0 <memchr>
 8009214:	9a04      	ldr	r2, [sp, #16]
 8009216:	b9d8      	cbnz	r0, 8009250 <_vfiprintf_r+0x12c>
 8009218:	06d1      	lsls	r1, r2, #27
 800921a:	bf44      	itt	mi
 800921c:	2320      	movmi	r3, #32
 800921e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009222:	0713      	lsls	r3, r2, #28
 8009224:	bf44      	itt	mi
 8009226:	232b      	movmi	r3, #43	; 0x2b
 8009228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800922c:	f89a 3000 	ldrb.w	r3, [sl]
 8009230:	2b2a      	cmp	r3, #42	; 0x2a
 8009232:	d015      	beq.n	8009260 <_vfiprintf_r+0x13c>
 8009234:	9a07      	ldr	r2, [sp, #28]
 8009236:	4654      	mov	r4, sl
 8009238:	2000      	movs	r0, #0
 800923a:	f04f 0c0a 	mov.w	ip, #10
 800923e:	4621      	mov	r1, r4
 8009240:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009244:	3b30      	subs	r3, #48	; 0x30
 8009246:	2b09      	cmp	r3, #9
 8009248:	d94e      	bls.n	80092e8 <_vfiprintf_r+0x1c4>
 800924a:	b1b0      	cbz	r0, 800927a <_vfiprintf_r+0x156>
 800924c:	9207      	str	r2, [sp, #28]
 800924e:	e014      	b.n	800927a <_vfiprintf_r+0x156>
 8009250:	eba0 0308 	sub.w	r3, r0, r8
 8009254:	fa09 f303 	lsl.w	r3, r9, r3
 8009258:	4313      	orrs	r3, r2
 800925a:	9304      	str	r3, [sp, #16]
 800925c:	46a2      	mov	sl, r4
 800925e:	e7d2      	b.n	8009206 <_vfiprintf_r+0xe2>
 8009260:	9b03      	ldr	r3, [sp, #12]
 8009262:	1d19      	adds	r1, r3, #4
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	9103      	str	r1, [sp, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	bfbb      	ittet	lt
 800926c:	425b      	neglt	r3, r3
 800926e:	f042 0202 	orrlt.w	r2, r2, #2
 8009272:	9307      	strge	r3, [sp, #28]
 8009274:	9307      	strlt	r3, [sp, #28]
 8009276:	bfb8      	it	lt
 8009278:	9204      	strlt	r2, [sp, #16]
 800927a:	7823      	ldrb	r3, [r4, #0]
 800927c:	2b2e      	cmp	r3, #46	; 0x2e
 800927e:	d10c      	bne.n	800929a <_vfiprintf_r+0x176>
 8009280:	7863      	ldrb	r3, [r4, #1]
 8009282:	2b2a      	cmp	r3, #42	; 0x2a
 8009284:	d135      	bne.n	80092f2 <_vfiprintf_r+0x1ce>
 8009286:	9b03      	ldr	r3, [sp, #12]
 8009288:	1d1a      	adds	r2, r3, #4
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	9203      	str	r2, [sp, #12]
 800928e:	2b00      	cmp	r3, #0
 8009290:	bfb8      	it	lt
 8009292:	f04f 33ff 	movlt.w	r3, #4294967295
 8009296:	3402      	adds	r4, #2
 8009298:	9305      	str	r3, [sp, #20]
 800929a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009380 <_vfiprintf_r+0x25c>
 800929e:	7821      	ldrb	r1, [r4, #0]
 80092a0:	2203      	movs	r2, #3
 80092a2:	4650      	mov	r0, sl
 80092a4:	f7f6 ff9c 	bl	80001e0 <memchr>
 80092a8:	b140      	cbz	r0, 80092bc <_vfiprintf_r+0x198>
 80092aa:	2340      	movs	r3, #64	; 0x40
 80092ac:	eba0 000a 	sub.w	r0, r0, sl
 80092b0:	fa03 f000 	lsl.w	r0, r3, r0
 80092b4:	9b04      	ldr	r3, [sp, #16]
 80092b6:	4303      	orrs	r3, r0
 80092b8:	3401      	adds	r4, #1
 80092ba:	9304      	str	r3, [sp, #16]
 80092bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092c0:	482c      	ldr	r0, [pc, #176]	; (8009374 <_vfiprintf_r+0x250>)
 80092c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092c6:	2206      	movs	r2, #6
 80092c8:	f7f6 ff8a 	bl	80001e0 <memchr>
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d03f      	beq.n	8009350 <_vfiprintf_r+0x22c>
 80092d0:	4b29      	ldr	r3, [pc, #164]	; (8009378 <_vfiprintf_r+0x254>)
 80092d2:	bb1b      	cbnz	r3, 800931c <_vfiprintf_r+0x1f8>
 80092d4:	9b03      	ldr	r3, [sp, #12]
 80092d6:	3307      	adds	r3, #7
 80092d8:	f023 0307 	bic.w	r3, r3, #7
 80092dc:	3308      	adds	r3, #8
 80092de:	9303      	str	r3, [sp, #12]
 80092e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e2:	443b      	add	r3, r7
 80092e4:	9309      	str	r3, [sp, #36]	; 0x24
 80092e6:	e767      	b.n	80091b8 <_vfiprintf_r+0x94>
 80092e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80092ec:	460c      	mov	r4, r1
 80092ee:	2001      	movs	r0, #1
 80092f0:	e7a5      	b.n	800923e <_vfiprintf_r+0x11a>
 80092f2:	2300      	movs	r3, #0
 80092f4:	3401      	adds	r4, #1
 80092f6:	9305      	str	r3, [sp, #20]
 80092f8:	4619      	mov	r1, r3
 80092fa:	f04f 0c0a 	mov.w	ip, #10
 80092fe:	4620      	mov	r0, r4
 8009300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009304:	3a30      	subs	r2, #48	; 0x30
 8009306:	2a09      	cmp	r2, #9
 8009308:	d903      	bls.n	8009312 <_vfiprintf_r+0x1ee>
 800930a:	2b00      	cmp	r3, #0
 800930c:	d0c5      	beq.n	800929a <_vfiprintf_r+0x176>
 800930e:	9105      	str	r1, [sp, #20]
 8009310:	e7c3      	b.n	800929a <_vfiprintf_r+0x176>
 8009312:	fb0c 2101 	mla	r1, ip, r1, r2
 8009316:	4604      	mov	r4, r0
 8009318:	2301      	movs	r3, #1
 800931a:	e7f0      	b.n	80092fe <_vfiprintf_r+0x1da>
 800931c:	ab03      	add	r3, sp, #12
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	462a      	mov	r2, r5
 8009322:	4b16      	ldr	r3, [pc, #88]	; (800937c <_vfiprintf_r+0x258>)
 8009324:	a904      	add	r1, sp, #16
 8009326:	4630      	mov	r0, r6
 8009328:	f3af 8000 	nop.w
 800932c:	4607      	mov	r7, r0
 800932e:	1c78      	adds	r0, r7, #1
 8009330:	d1d6      	bne.n	80092e0 <_vfiprintf_r+0x1bc>
 8009332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009334:	07d9      	lsls	r1, r3, #31
 8009336:	d405      	bmi.n	8009344 <_vfiprintf_r+0x220>
 8009338:	89ab      	ldrh	r3, [r5, #12]
 800933a:	059a      	lsls	r2, r3, #22
 800933c:	d402      	bmi.n	8009344 <_vfiprintf_r+0x220>
 800933e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009340:	f000 fc45 	bl	8009bce <__retarget_lock_release_recursive>
 8009344:	89ab      	ldrh	r3, [r5, #12]
 8009346:	065b      	lsls	r3, r3, #25
 8009348:	f53f af12 	bmi.w	8009170 <_vfiprintf_r+0x4c>
 800934c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800934e:	e711      	b.n	8009174 <_vfiprintf_r+0x50>
 8009350:	ab03      	add	r3, sp, #12
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	462a      	mov	r2, r5
 8009356:	4b09      	ldr	r3, [pc, #36]	; (800937c <_vfiprintf_r+0x258>)
 8009358:	a904      	add	r1, sp, #16
 800935a:	4630      	mov	r0, r6
 800935c:	f000 f880 	bl	8009460 <_printf_i>
 8009360:	e7e4      	b.n	800932c <_vfiprintf_r+0x208>
 8009362:	bf00      	nop
 8009364:	0800b4a4 	.word	0x0800b4a4
 8009368:	0800b4c4 	.word	0x0800b4c4
 800936c:	0800b484 	.word	0x0800b484
 8009370:	0800b450 	.word	0x0800b450
 8009374:	0800b45a 	.word	0x0800b45a
 8009378:	00000000 	.word	0x00000000
 800937c:	080090ff 	.word	0x080090ff
 8009380:	0800b456 	.word	0x0800b456

08009384 <_printf_common>:
 8009384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009388:	4616      	mov	r6, r2
 800938a:	4699      	mov	r9, r3
 800938c:	688a      	ldr	r2, [r1, #8]
 800938e:	690b      	ldr	r3, [r1, #16]
 8009390:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009394:	4293      	cmp	r3, r2
 8009396:	bfb8      	it	lt
 8009398:	4613      	movlt	r3, r2
 800939a:	6033      	str	r3, [r6, #0]
 800939c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093a0:	4607      	mov	r7, r0
 80093a2:	460c      	mov	r4, r1
 80093a4:	b10a      	cbz	r2, 80093aa <_printf_common+0x26>
 80093a6:	3301      	adds	r3, #1
 80093a8:	6033      	str	r3, [r6, #0]
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	0699      	lsls	r1, r3, #26
 80093ae:	bf42      	ittt	mi
 80093b0:	6833      	ldrmi	r3, [r6, #0]
 80093b2:	3302      	addmi	r3, #2
 80093b4:	6033      	strmi	r3, [r6, #0]
 80093b6:	6825      	ldr	r5, [r4, #0]
 80093b8:	f015 0506 	ands.w	r5, r5, #6
 80093bc:	d106      	bne.n	80093cc <_printf_common+0x48>
 80093be:	f104 0a19 	add.w	sl, r4, #25
 80093c2:	68e3      	ldr	r3, [r4, #12]
 80093c4:	6832      	ldr	r2, [r6, #0]
 80093c6:	1a9b      	subs	r3, r3, r2
 80093c8:	42ab      	cmp	r3, r5
 80093ca:	dc26      	bgt.n	800941a <_printf_common+0x96>
 80093cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093d0:	1e13      	subs	r3, r2, #0
 80093d2:	6822      	ldr	r2, [r4, #0]
 80093d4:	bf18      	it	ne
 80093d6:	2301      	movne	r3, #1
 80093d8:	0692      	lsls	r2, r2, #26
 80093da:	d42b      	bmi.n	8009434 <_printf_common+0xb0>
 80093dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093e0:	4649      	mov	r1, r9
 80093e2:	4638      	mov	r0, r7
 80093e4:	47c0      	blx	r8
 80093e6:	3001      	adds	r0, #1
 80093e8:	d01e      	beq.n	8009428 <_printf_common+0xa4>
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	68e5      	ldr	r5, [r4, #12]
 80093ee:	6832      	ldr	r2, [r6, #0]
 80093f0:	f003 0306 	and.w	r3, r3, #6
 80093f4:	2b04      	cmp	r3, #4
 80093f6:	bf08      	it	eq
 80093f8:	1aad      	subeq	r5, r5, r2
 80093fa:	68a3      	ldr	r3, [r4, #8]
 80093fc:	6922      	ldr	r2, [r4, #16]
 80093fe:	bf0c      	ite	eq
 8009400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009404:	2500      	movne	r5, #0
 8009406:	4293      	cmp	r3, r2
 8009408:	bfc4      	itt	gt
 800940a:	1a9b      	subgt	r3, r3, r2
 800940c:	18ed      	addgt	r5, r5, r3
 800940e:	2600      	movs	r6, #0
 8009410:	341a      	adds	r4, #26
 8009412:	42b5      	cmp	r5, r6
 8009414:	d11a      	bne.n	800944c <_printf_common+0xc8>
 8009416:	2000      	movs	r0, #0
 8009418:	e008      	b.n	800942c <_printf_common+0xa8>
 800941a:	2301      	movs	r3, #1
 800941c:	4652      	mov	r2, sl
 800941e:	4649      	mov	r1, r9
 8009420:	4638      	mov	r0, r7
 8009422:	47c0      	blx	r8
 8009424:	3001      	adds	r0, #1
 8009426:	d103      	bne.n	8009430 <_printf_common+0xac>
 8009428:	f04f 30ff 	mov.w	r0, #4294967295
 800942c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009430:	3501      	adds	r5, #1
 8009432:	e7c6      	b.n	80093c2 <_printf_common+0x3e>
 8009434:	18e1      	adds	r1, r4, r3
 8009436:	1c5a      	adds	r2, r3, #1
 8009438:	2030      	movs	r0, #48	; 0x30
 800943a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800943e:	4422      	add	r2, r4
 8009440:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009444:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009448:	3302      	adds	r3, #2
 800944a:	e7c7      	b.n	80093dc <_printf_common+0x58>
 800944c:	2301      	movs	r3, #1
 800944e:	4622      	mov	r2, r4
 8009450:	4649      	mov	r1, r9
 8009452:	4638      	mov	r0, r7
 8009454:	47c0      	blx	r8
 8009456:	3001      	adds	r0, #1
 8009458:	d0e6      	beq.n	8009428 <_printf_common+0xa4>
 800945a:	3601      	adds	r6, #1
 800945c:	e7d9      	b.n	8009412 <_printf_common+0x8e>
	...

08009460 <_printf_i>:
 8009460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009464:	7e0f      	ldrb	r7, [r1, #24]
 8009466:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009468:	2f78      	cmp	r7, #120	; 0x78
 800946a:	4691      	mov	r9, r2
 800946c:	4680      	mov	r8, r0
 800946e:	460c      	mov	r4, r1
 8009470:	469a      	mov	sl, r3
 8009472:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009476:	d807      	bhi.n	8009488 <_printf_i+0x28>
 8009478:	2f62      	cmp	r7, #98	; 0x62
 800947a:	d80a      	bhi.n	8009492 <_printf_i+0x32>
 800947c:	2f00      	cmp	r7, #0
 800947e:	f000 80d8 	beq.w	8009632 <_printf_i+0x1d2>
 8009482:	2f58      	cmp	r7, #88	; 0x58
 8009484:	f000 80a3 	beq.w	80095ce <_printf_i+0x16e>
 8009488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800948c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009490:	e03a      	b.n	8009508 <_printf_i+0xa8>
 8009492:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009496:	2b15      	cmp	r3, #21
 8009498:	d8f6      	bhi.n	8009488 <_printf_i+0x28>
 800949a:	a101      	add	r1, pc, #4	; (adr r1, 80094a0 <_printf_i+0x40>)
 800949c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094a0:	080094f9 	.word	0x080094f9
 80094a4:	0800950d 	.word	0x0800950d
 80094a8:	08009489 	.word	0x08009489
 80094ac:	08009489 	.word	0x08009489
 80094b0:	08009489 	.word	0x08009489
 80094b4:	08009489 	.word	0x08009489
 80094b8:	0800950d 	.word	0x0800950d
 80094bc:	08009489 	.word	0x08009489
 80094c0:	08009489 	.word	0x08009489
 80094c4:	08009489 	.word	0x08009489
 80094c8:	08009489 	.word	0x08009489
 80094cc:	08009619 	.word	0x08009619
 80094d0:	0800953d 	.word	0x0800953d
 80094d4:	080095fb 	.word	0x080095fb
 80094d8:	08009489 	.word	0x08009489
 80094dc:	08009489 	.word	0x08009489
 80094e0:	0800963b 	.word	0x0800963b
 80094e4:	08009489 	.word	0x08009489
 80094e8:	0800953d 	.word	0x0800953d
 80094ec:	08009489 	.word	0x08009489
 80094f0:	08009489 	.word	0x08009489
 80094f4:	08009603 	.word	0x08009603
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	1d1a      	adds	r2, r3, #4
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	602a      	str	r2, [r5, #0]
 8009500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009508:	2301      	movs	r3, #1
 800950a:	e0a3      	b.n	8009654 <_printf_i+0x1f4>
 800950c:	6820      	ldr	r0, [r4, #0]
 800950e:	6829      	ldr	r1, [r5, #0]
 8009510:	0606      	lsls	r6, r0, #24
 8009512:	f101 0304 	add.w	r3, r1, #4
 8009516:	d50a      	bpl.n	800952e <_printf_i+0xce>
 8009518:	680e      	ldr	r6, [r1, #0]
 800951a:	602b      	str	r3, [r5, #0]
 800951c:	2e00      	cmp	r6, #0
 800951e:	da03      	bge.n	8009528 <_printf_i+0xc8>
 8009520:	232d      	movs	r3, #45	; 0x2d
 8009522:	4276      	negs	r6, r6
 8009524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009528:	485e      	ldr	r0, [pc, #376]	; (80096a4 <_printf_i+0x244>)
 800952a:	230a      	movs	r3, #10
 800952c:	e019      	b.n	8009562 <_printf_i+0x102>
 800952e:	680e      	ldr	r6, [r1, #0]
 8009530:	602b      	str	r3, [r5, #0]
 8009532:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009536:	bf18      	it	ne
 8009538:	b236      	sxthne	r6, r6
 800953a:	e7ef      	b.n	800951c <_printf_i+0xbc>
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	6820      	ldr	r0, [r4, #0]
 8009540:	1d19      	adds	r1, r3, #4
 8009542:	6029      	str	r1, [r5, #0]
 8009544:	0601      	lsls	r1, r0, #24
 8009546:	d501      	bpl.n	800954c <_printf_i+0xec>
 8009548:	681e      	ldr	r6, [r3, #0]
 800954a:	e002      	b.n	8009552 <_printf_i+0xf2>
 800954c:	0646      	lsls	r6, r0, #25
 800954e:	d5fb      	bpl.n	8009548 <_printf_i+0xe8>
 8009550:	881e      	ldrh	r6, [r3, #0]
 8009552:	4854      	ldr	r0, [pc, #336]	; (80096a4 <_printf_i+0x244>)
 8009554:	2f6f      	cmp	r7, #111	; 0x6f
 8009556:	bf0c      	ite	eq
 8009558:	2308      	moveq	r3, #8
 800955a:	230a      	movne	r3, #10
 800955c:	2100      	movs	r1, #0
 800955e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009562:	6865      	ldr	r5, [r4, #4]
 8009564:	60a5      	str	r5, [r4, #8]
 8009566:	2d00      	cmp	r5, #0
 8009568:	bfa2      	ittt	ge
 800956a:	6821      	ldrge	r1, [r4, #0]
 800956c:	f021 0104 	bicge.w	r1, r1, #4
 8009570:	6021      	strge	r1, [r4, #0]
 8009572:	b90e      	cbnz	r6, 8009578 <_printf_i+0x118>
 8009574:	2d00      	cmp	r5, #0
 8009576:	d04d      	beq.n	8009614 <_printf_i+0x1b4>
 8009578:	4615      	mov	r5, r2
 800957a:	fbb6 f1f3 	udiv	r1, r6, r3
 800957e:	fb03 6711 	mls	r7, r3, r1, r6
 8009582:	5dc7      	ldrb	r7, [r0, r7]
 8009584:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009588:	4637      	mov	r7, r6
 800958a:	42bb      	cmp	r3, r7
 800958c:	460e      	mov	r6, r1
 800958e:	d9f4      	bls.n	800957a <_printf_i+0x11a>
 8009590:	2b08      	cmp	r3, #8
 8009592:	d10b      	bne.n	80095ac <_printf_i+0x14c>
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	07de      	lsls	r6, r3, #31
 8009598:	d508      	bpl.n	80095ac <_printf_i+0x14c>
 800959a:	6923      	ldr	r3, [r4, #16]
 800959c:	6861      	ldr	r1, [r4, #4]
 800959e:	4299      	cmp	r1, r3
 80095a0:	bfde      	ittt	le
 80095a2:	2330      	movle	r3, #48	; 0x30
 80095a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095ac:	1b52      	subs	r2, r2, r5
 80095ae:	6122      	str	r2, [r4, #16]
 80095b0:	f8cd a000 	str.w	sl, [sp]
 80095b4:	464b      	mov	r3, r9
 80095b6:	aa03      	add	r2, sp, #12
 80095b8:	4621      	mov	r1, r4
 80095ba:	4640      	mov	r0, r8
 80095bc:	f7ff fee2 	bl	8009384 <_printf_common>
 80095c0:	3001      	adds	r0, #1
 80095c2:	d14c      	bne.n	800965e <_printf_i+0x1fe>
 80095c4:	f04f 30ff 	mov.w	r0, #4294967295
 80095c8:	b004      	add	sp, #16
 80095ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ce:	4835      	ldr	r0, [pc, #212]	; (80096a4 <_printf_i+0x244>)
 80095d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80095d4:	6829      	ldr	r1, [r5, #0]
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80095dc:	6029      	str	r1, [r5, #0]
 80095de:	061d      	lsls	r5, r3, #24
 80095e0:	d514      	bpl.n	800960c <_printf_i+0x1ac>
 80095e2:	07df      	lsls	r7, r3, #31
 80095e4:	bf44      	itt	mi
 80095e6:	f043 0320 	orrmi.w	r3, r3, #32
 80095ea:	6023      	strmi	r3, [r4, #0]
 80095ec:	b91e      	cbnz	r6, 80095f6 <_printf_i+0x196>
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	f023 0320 	bic.w	r3, r3, #32
 80095f4:	6023      	str	r3, [r4, #0]
 80095f6:	2310      	movs	r3, #16
 80095f8:	e7b0      	b.n	800955c <_printf_i+0xfc>
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	f043 0320 	orr.w	r3, r3, #32
 8009600:	6023      	str	r3, [r4, #0]
 8009602:	2378      	movs	r3, #120	; 0x78
 8009604:	4828      	ldr	r0, [pc, #160]	; (80096a8 <_printf_i+0x248>)
 8009606:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800960a:	e7e3      	b.n	80095d4 <_printf_i+0x174>
 800960c:	0659      	lsls	r1, r3, #25
 800960e:	bf48      	it	mi
 8009610:	b2b6      	uxthmi	r6, r6
 8009612:	e7e6      	b.n	80095e2 <_printf_i+0x182>
 8009614:	4615      	mov	r5, r2
 8009616:	e7bb      	b.n	8009590 <_printf_i+0x130>
 8009618:	682b      	ldr	r3, [r5, #0]
 800961a:	6826      	ldr	r6, [r4, #0]
 800961c:	6961      	ldr	r1, [r4, #20]
 800961e:	1d18      	adds	r0, r3, #4
 8009620:	6028      	str	r0, [r5, #0]
 8009622:	0635      	lsls	r5, r6, #24
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	d501      	bpl.n	800962c <_printf_i+0x1cc>
 8009628:	6019      	str	r1, [r3, #0]
 800962a:	e002      	b.n	8009632 <_printf_i+0x1d2>
 800962c:	0670      	lsls	r0, r6, #25
 800962e:	d5fb      	bpl.n	8009628 <_printf_i+0x1c8>
 8009630:	8019      	strh	r1, [r3, #0]
 8009632:	2300      	movs	r3, #0
 8009634:	6123      	str	r3, [r4, #16]
 8009636:	4615      	mov	r5, r2
 8009638:	e7ba      	b.n	80095b0 <_printf_i+0x150>
 800963a:	682b      	ldr	r3, [r5, #0]
 800963c:	1d1a      	adds	r2, r3, #4
 800963e:	602a      	str	r2, [r5, #0]
 8009640:	681d      	ldr	r5, [r3, #0]
 8009642:	6862      	ldr	r2, [r4, #4]
 8009644:	2100      	movs	r1, #0
 8009646:	4628      	mov	r0, r5
 8009648:	f7f6 fdca 	bl	80001e0 <memchr>
 800964c:	b108      	cbz	r0, 8009652 <_printf_i+0x1f2>
 800964e:	1b40      	subs	r0, r0, r5
 8009650:	6060      	str	r0, [r4, #4]
 8009652:	6863      	ldr	r3, [r4, #4]
 8009654:	6123      	str	r3, [r4, #16]
 8009656:	2300      	movs	r3, #0
 8009658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800965c:	e7a8      	b.n	80095b0 <_printf_i+0x150>
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	462a      	mov	r2, r5
 8009662:	4649      	mov	r1, r9
 8009664:	4640      	mov	r0, r8
 8009666:	47d0      	blx	sl
 8009668:	3001      	adds	r0, #1
 800966a:	d0ab      	beq.n	80095c4 <_printf_i+0x164>
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	079b      	lsls	r3, r3, #30
 8009670:	d413      	bmi.n	800969a <_printf_i+0x23a>
 8009672:	68e0      	ldr	r0, [r4, #12]
 8009674:	9b03      	ldr	r3, [sp, #12]
 8009676:	4298      	cmp	r0, r3
 8009678:	bfb8      	it	lt
 800967a:	4618      	movlt	r0, r3
 800967c:	e7a4      	b.n	80095c8 <_printf_i+0x168>
 800967e:	2301      	movs	r3, #1
 8009680:	4632      	mov	r2, r6
 8009682:	4649      	mov	r1, r9
 8009684:	4640      	mov	r0, r8
 8009686:	47d0      	blx	sl
 8009688:	3001      	adds	r0, #1
 800968a:	d09b      	beq.n	80095c4 <_printf_i+0x164>
 800968c:	3501      	adds	r5, #1
 800968e:	68e3      	ldr	r3, [r4, #12]
 8009690:	9903      	ldr	r1, [sp, #12]
 8009692:	1a5b      	subs	r3, r3, r1
 8009694:	42ab      	cmp	r3, r5
 8009696:	dcf2      	bgt.n	800967e <_printf_i+0x21e>
 8009698:	e7eb      	b.n	8009672 <_printf_i+0x212>
 800969a:	2500      	movs	r5, #0
 800969c:	f104 0619 	add.w	r6, r4, #25
 80096a0:	e7f5      	b.n	800968e <_printf_i+0x22e>
 80096a2:	bf00      	nop
 80096a4:	0800b461 	.word	0x0800b461
 80096a8:	0800b472 	.word	0x0800b472

080096ac <iprintf>:
 80096ac:	b40f      	push	{r0, r1, r2, r3}
 80096ae:	4b0a      	ldr	r3, [pc, #40]	; (80096d8 <iprintf+0x2c>)
 80096b0:	b513      	push	{r0, r1, r4, lr}
 80096b2:	681c      	ldr	r4, [r3, #0]
 80096b4:	b124      	cbz	r4, 80096c0 <iprintf+0x14>
 80096b6:	69a3      	ldr	r3, [r4, #24]
 80096b8:	b913      	cbnz	r3, 80096c0 <iprintf+0x14>
 80096ba:	4620      	mov	r0, r4
 80096bc:	f000 f9e8 	bl	8009a90 <__sinit>
 80096c0:	ab05      	add	r3, sp, #20
 80096c2:	9a04      	ldr	r2, [sp, #16]
 80096c4:	68a1      	ldr	r1, [r4, #8]
 80096c6:	9301      	str	r3, [sp, #4]
 80096c8:	4620      	mov	r0, r4
 80096ca:	f7ff fd2b 	bl	8009124 <_vfiprintf_r>
 80096ce:	b002      	add	sp, #8
 80096d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096d4:	b004      	add	sp, #16
 80096d6:	4770      	bx	lr
 80096d8:	2000010c 	.word	0x2000010c

080096dc <__swbuf_r>:
 80096dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096de:	460e      	mov	r6, r1
 80096e0:	4614      	mov	r4, r2
 80096e2:	4605      	mov	r5, r0
 80096e4:	b118      	cbz	r0, 80096ee <__swbuf_r+0x12>
 80096e6:	6983      	ldr	r3, [r0, #24]
 80096e8:	b90b      	cbnz	r3, 80096ee <__swbuf_r+0x12>
 80096ea:	f000 f9d1 	bl	8009a90 <__sinit>
 80096ee:	4b21      	ldr	r3, [pc, #132]	; (8009774 <__swbuf_r+0x98>)
 80096f0:	429c      	cmp	r4, r3
 80096f2:	d12b      	bne.n	800974c <__swbuf_r+0x70>
 80096f4:	686c      	ldr	r4, [r5, #4]
 80096f6:	69a3      	ldr	r3, [r4, #24]
 80096f8:	60a3      	str	r3, [r4, #8]
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	071a      	lsls	r2, r3, #28
 80096fe:	d52f      	bpl.n	8009760 <__swbuf_r+0x84>
 8009700:	6923      	ldr	r3, [r4, #16]
 8009702:	b36b      	cbz	r3, 8009760 <__swbuf_r+0x84>
 8009704:	6923      	ldr	r3, [r4, #16]
 8009706:	6820      	ldr	r0, [r4, #0]
 8009708:	1ac0      	subs	r0, r0, r3
 800970a:	6963      	ldr	r3, [r4, #20]
 800970c:	b2f6      	uxtb	r6, r6
 800970e:	4283      	cmp	r3, r0
 8009710:	4637      	mov	r7, r6
 8009712:	dc04      	bgt.n	800971e <__swbuf_r+0x42>
 8009714:	4621      	mov	r1, r4
 8009716:	4628      	mov	r0, r5
 8009718:	f000 f926 	bl	8009968 <_fflush_r>
 800971c:	bb30      	cbnz	r0, 800976c <__swbuf_r+0x90>
 800971e:	68a3      	ldr	r3, [r4, #8]
 8009720:	3b01      	subs	r3, #1
 8009722:	60a3      	str	r3, [r4, #8]
 8009724:	6823      	ldr	r3, [r4, #0]
 8009726:	1c5a      	adds	r2, r3, #1
 8009728:	6022      	str	r2, [r4, #0]
 800972a:	701e      	strb	r6, [r3, #0]
 800972c:	6963      	ldr	r3, [r4, #20]
 800972e:	3001      	adds	r0, #1
 8009730:	4283      	cmp	r3, r0
 8009732:	d004      	beq.n	800973e <__swbuf_r+0x62>
 8009734:	89a3      	ldrh	r3, [r4, #12]
 8009736:	07db      	lsls	r3, r3, #31
 8009738:	d506      	bpl.n	8009748 <__swbuf_r+0x6c>
 800973a:	2e0a      	cmp	r6, #10
 800973c:	d104      	bne.n	8009748 <__swbuf_r+0x6c>
 800973e:	4621      	mov	r1, r4
 8009740:	4628      	mov	r0, r5
 8009742:	f000 f911 	bl	8009968 <_fflush_r>
 8009746:	b988      	cbnz	r0, 800976c <__swbuf_r+0x90>
 8009748:	4638      	mov	r0, r7
 800974a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800974c:	4b0a      	ldr	r3, [pc, #40]	; (8009778 <__swbuf_r+0x9c>)
 800974e:	429c      	cmp	r4, r3
 8009750:	d101      	bne.n	8009756 <__swbuf_r+0x7a>
 8009752:	68ac      	ldr	r4, [r5, #8]
 8009754:	e7cf      	b.n	80096f6 <__swbuf_r+0x1a>
 8009756:	4b09      	ldr	r3, [pc, #36]	; (800977c <__swbuf_r+0xa0>)
 8009758:	429c      	cmp	r4, r3
 800975a:	bf08      	it	eq
 800975c:	68ec      	ldreq	r4, [r5, #12]
 800975e:	e7ca      	b.n	80096f6 <__swbuf_r+0x1a>
 8009760:	4621      	mov	r1, r4
 8009762:	4628      	mov	r0, r5
 8009764:	f000 f80c 	bl	8009780 <__swsetup_r>
 8009768:	2800      	cmp	r0, #0
 800976a:	d0cb      	beq.n	8009704 <__swbuf_r+0x28>
 800976c:	f04f 37ff 	mov.w	r7, #4294967295
 8009770:	e7ea      	b.n	8009748 <__swbuf_r+0x6c>
 8009772:	bf00      	nop
 8009774:	0800b4a4 	.word	0x0800b4a4
 8009778:	0800b4c4 	.word	0x0800b4c4
 800977c:	0800b484 	.word	0x0800b484

08009780 <__swsetup_r>:
 8009780:	4b32      	ldr	r3, [pc, #200]	; (800984c <__swsetup_r+0xcc>)
 8009782:	b570      	push	{r4, r5, r6, lr}
 8009784:	681d      	ldr	r5, [r3, #0]
 8009786:	4606      	mov	r6, r0
 8009788:	460c      	mov	r4, r1
 800978a:	b125      	cbz	r5, 8009796 <__swsetup_r+0x16>
 800978c:	69ab      	ldr	r3, [r5, #24]
 800978e:	b913      	cbnz	r3, 8009796 <__swsetup_r+0x16>
 8009790:	4628      	mov	r0, r5
 8009792:	f000 f97d 	bl	8009a90 <__sinit>
 8009796:	4b2e      	ldr	r3, [pc, #184]	; (8009850 <__swsetup_r+0xd0>)
 8009798:	429c      	cmp	r4, r3
 800979a:	d10f      	bne.n	80097bc <__swsetup_r+0x3c>
 800979c:	686c      	ldr	r4, [r5, #4]
 800979e:	89a3      	ldrh	r3, [r4, #12]
 80097a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097a4:	0719      	lsls	r1, r3, #28
 80097a6:	d42c      	bmi.n	8009802 <__swsetup_r+0x82>
 80097a8:	06dd      	lsls	r5, r3, #27
 80097aa:	d411      	bmi.n	80097d0 <__swsetup_r+0x50>
 80097ac:	2309      	movs	r3, #9
 80097ae:	6033      	str	r3, [r6, #0]
 80097b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097b4:	81a3      	strh	r3, [r4, #12]
 80097b6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ba:	e03e      	b.n	800983a <__swsetup_r+0xba>
 80097bc:	4b25      	ldr	r3, [pc, #148]	; (8009854 <__swsetup_r+0xd4>)
 80097be:	429c      	cmp	r4, r3
 80097c0:	d101      	bne.n	80097c6 <__swsetup_r+0x46>
 80097c2:	68ac      	ldr	r4, [r5, #8]
 80097c4:	e7eb      	b.n	800979e <__swsetup_r+0x1e>
 80097c6:	4b24      	ldr	r3, [pc, #144]	; (8009858 <__swsetup_r+0xd8>)
 80097c8:	429c      	cmp	r4, r3
 80097ca:	bf08      	it	eq
 80097cc:	68ec      	ldreq	r4, [r5, #12]
 80097ce:	e7e6      	b.n	800979e <__swsetup_r+0x1e>
 80097d0:	0758      	lsls	r0, r3, #29
 80097d2:	d512      	bpl.n	80097fa <__swsetup_r+0x7a>
 80097d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097d6:	b141      	cbz	r1, 80097ea <__swsetup_r+0x6a>
 80097d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097dc:	4299      	cmp	r1, r3
 80097de:	d002      	beq.n	80097e6 <__swsetup_r+0x66>
 80097e0:	4630      	mov	r0, r6
 80097e2:	f000 fa5b 	bl	8009c9c <_free_r>
 80097e6:	2300      	movs	r3, #0
 80097e8:	6363      	str	r3, [r4, #52]	; 0x34
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097f0:	81a3      	strh	r3, [r4, #12]
 80097f2:	2300      	movs	r3, #0
 80097f4:	6063      	str	r3, [r4, #4]
 80097f6:	6923      	ldr	r3, [r4, #16]
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	f043 0308 	orr.w	r3, r3, #8
 8009800:	81a3      	strh	r3, [r4, #12]
 8009802:	6923      	ldr	r3, [r4, #16]
 8009804:	b94b      	cbnz	r3, 800981a <__swsetup_r+0x9a>
 8009806:	89a3      	ldrh	r3, [r4, #12]
 8009808:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800980c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009810:	d003      	beq.n	800981a <__swsetup_r+0x9a>
 8009812:	4621      	mov	r1, r4
 8009814:	4630      	mov	r0, r6
 8009816:	f000 fa01 	bl	8009c1c <__smakebuf_r>
 800981a:	89a0      	ldrh	r0, [r4, #12]
 800981c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009820:	f010 0301 	ands.w	r3, r0, #1
 8009824:	d00a      	beq.n	800983c <__swsetup_r+0xbc>
 8009826:	2300      	movs	r3, #0
 8009828:	60a3      	str	r3, [r4, #8]
 800982a:	6963      	ldr	r3, [r4, #20]
 800982c:	425b      	negs	r3, r3
 800982e:	61a3      	str	r3, [r4, #24]
 8009830:	6923      	ldr	r3, [r4, #16]
 8009832:	b943      	cbnz	r3, 8009846 <__swsetup_r+0xc6>
 8009834:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009838:	d1ba      	bne.n	80097b0 <__swsetup_r+0x30>
 800983a:	bd70      	pop	{r4, r5, r6, pc}
 800983c:	0781      	lsls	r1, r0, #30
 800983e:	bf58      	it	pl
 8009840:	6963      	ldrpl	r3, [r4, #20]
 8009842:	60a3      	str	r3, [r4, #8]
 8009844:	e7f4      	b.n	8009830 <__swsetup_r+0xb0>
 8009846:	2000      	movs	r0, #0
 8009848:	e7f7      	b.n	800983a <__swsetup_r+0xba>
 800984a:	bf00      	nop
 800984c:	2000010c 	.word	0x2000010c
 8009850:	0800b4a4 	.word	0x0800b4a4
 8009854:	0800b4c4 	.word	0x0800b4c4
 8009858:	0800b484 	.word	0x0800b484

0800985c <__sflush_r>:
 800985c:	898a      	ldrh	r2, [r1, #12]
 800985e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009862:	4605      	mov	r5, r0
 8009864:	0710      	lsls	r0, r2, #28
 8009866:	460c      	mov	r4, r1
 8009868:	d458      	bmi.n	800991c <__sflush_r+0xc0>
 800986a:	684b      	ldr	r3, [r1, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	dc05      	bgt.n	800987c <__sflush_r+0x20>
 8009870:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009872:	2b00      	cmp	r3, #0
 8009874:	dc02      	bgt.n	800987c <__sflush_r+0x20>
 8009876:	2000      	movs	r0, #0
 8009878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800987c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800987e:	2e00      	cmp	r6, #0
 8009880:	d0f9      	beq.n	8009876 <__sflush_r+0x1a>
 8009882:	2300      	movs	r3, #0
 8009884:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009888:	682f      	ldr	r7, [r5, #0]
 800988a:	602b      	str	r3, [r5, #0]
 800988c:	d032      	beq.n	80098f4 <__sflush_r+0x98>
 800988e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009890:	89a3      	ldrh	r3, [r4, #12]
 8009892:	075a      	lsls	r2, r3, #29
 8009894:	d505      	bpl.n	80098a2 <__sflush_r+0x46>
 8009896:	6863      	ldr	r3, [r4, #4]
 8009898:	1ac0      	subs	r0, r0, r3
 800989a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800989c:	b10b      	cbz	r3, 80098a2 <__sflush_r+0x46>
 800989e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098a0:	1ac0      	subs	r0, r0, r3
 80098a2:	2300      	movs	r3, #0
 80098a4:	4602      	mov	r2, r0
 80098a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098a8:	6a21      	ldr	r1, [r4, #32]
 80098aa:	4628      	mov	r0, r5
 80098ac:	47b0      	blx	r6
 80098ae:	1c43      	adds	r3, r0, #1
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	d106      	bne.n	80098c2 <__sflush_r+0x66>
 80098b4:	6829      	ldr	r1, [r5, #0]
 80098b6:	291d      	cmp	r1, #29
 80098b8:	d82c      	bhi.n	8009914 <__sflush_r+0xb8>
 80098ba:	4a2a      	ldr	r2, [pc, #168]	; (8009964 <__sflush_r+0x108>)
 80098bc:	40ca      	lsrs	r2, r1
 80098be:	07d6      	lsls	r6, r2, #31
 80098c0:	d528      	bpl.n	8009914 <__sflush_r+0xb8>
 80098c2:	2200      	movs	r2, #0
 80098c4:	6062      	str	r2, [r4, #4]
 80098c6:	04d9      	lsls	r1, r3, #19
 80098c8:	6922      	ldr	r2, [r4, #16]
 80098ca:	6022      	str	r2, [r4, #0]
 80098cc:	d504      	bpl.n	80098d8 <__sflush_r+0x7c>
 80098ce:	1c42      	adds	r2, r0, #1
 80098d0:	d101      	bne.n	80098d6 <__sflush_r+0x7a>
 80098d2:	682b      	ldr	r3, [r5, #0]
 80098d4:	b903      	cbnz	r3, 80098d8 <__sflush_r+0x7c>
 80098d6:	6560      	str	r0, [r4, #84]	; 0x54
 80098d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098da:	602f      	str	r7, [r5, #0]
 80098dc:	2900      	cmp	r1, #0
 80098de:	d0ca      	beq.n	8009876 <__sflush_r+0x1a>
 80098e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098e4:	4299      	cmp	r1, r3
 80098e6:	d002      	beq.n	80098ee <__sflush_r+0x92>
 80098e8:	4628      	mov	r0, r5
 80098ea:	f000 f9d7 	bl	8009c9c <_free_r>
 80098ee:	2000      	movs	r0, #0
 80098f0:	6360      	str	r0, [r4, #52]	; 0x34
 80098f2:	e7c1      	b.n	8009878 <__sflush_r+0x1c>
 80098f4:	6a21      	ldr	r1, [r4, #32]
 80098f6:	2301      	movs	r3, #1
 80098f8:	4628      	mov	r0, r5
 80098fa:	47b0      	blx	r6
 80098fc:	1c41      	adds	r1, r0, #1
 80098fe:	d1c7      	bne.n	8009890 <__sflush_r+0x34>
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d0c4      	beq.n	8009890 <__sflush_r+0x34>
 8009906:	2b1d      	cmp	r3, #29
 8009908:	d001      	beq.n	800990e <__sflush_r+0xb2>
 800990a:	2b16      	cmp	r3, #22
 800990c:	d101      	bne.n	8009912 <__sflush_r+0xb6>
 800990e:	602f      	str	r7, [r5, #0]
 8009910:	e7b1      	b.n	8009876 <__sflush_r+0x1a>
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009918:	81a3      	strh	r3, [r4, #12]
 800991a:	e7ad      	b.n	8009878 <__sflush_r+0x1c>
 800991c:	690f      	ldr	r7, [r1, #16]
 800991e:	2f00      	cmp	r7, #0
 8009920:	d0a9      	beq.n	8009876 <__sflush_r+0x1a>
 8009922:	0793      	lsls	r3, r2, #30
 8009924:	680e      	ldr	r6, [r1, #0]
 8009926:	bf08      	it	eq
 8009928:	694b      	ldreq	r3, [r1, #20]
 800992a:	600f      	str	r7, [r1, #0]
 800992c:	bf18      	it	ne
 800992e:	2300      	movne	r3, #0
 8009930:	eba6 0807 	sub.w	r8, r6, r7
 8009934:	608b      	str	r3, [r1, #8]
 8009936:	f1b8 0f00 	cmp.w	r8, #0
 800993a:	dd9c      	ble.n	8009876 <__sflush_r+0x1a>
 800993c:	6a21      	ldr	r1, [r4, #32]
 800993e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009940:	4643      	mov	r3, r8
 8009942:	463a      	mov	r2, r7
 8009944:	4628      	mov	r0, r5
 8009946:	47b0      	blx	r6
 8009948:	2800      	cmp	r0, #0
 800994a:	dc06      	bgt.n	800995a <__sflush_r+0xfe>
 800994c:	89a3      	ldrh	r3, [r4, #12]
 800994e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009952:	81a3      	strh	r3, [r4, #12]
 8009954:	f04f 30ff 	mov.w	r0, #4294967295
 8009958:	e78e      	b.n	8009878 <__sflush_r+0x1c>
 800995a:	4407      	add	r7, r0
 800995c:	eba8 0800 	sub.w	r8, r8, r0
 8009960:	e7e9      	b.n	8009936 <__sflush_r+0xda>
 8009962:	bf00      	nop
 8009964:	20400001 	.word	0x20400001

08009968 <_fflush_r>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	690b      	ldr	r3, [r1, #16]
 800996c:	4605      	mov	r5, r0
 800996e:	460c      	mov	r4, r1
 8009970:	b913      	cbnz	r3, 8009978 <_fflush_r+0x10>
 8009972:	2500      	movs	r5, #0
 8009974:	4628      	mov	r0, r5
 8009976:	bd38      	pop	{r3, r4, r5, pc}
 8009978:	b118      	cbz	r0, 8009982 <_fflush_r+0x1a>
 800997a:	6983      	ldr	r3, [r0, #24]
 800997c:	b90b      	cbnz	r3, 8009982 <_fflush_r+0x1a>
 800997e:	f000 f887 	bl	8009a90 <__sinit>
 8009982:	4b14      	ldr	r3, [pc, #80]	; (80099d4 <_fflush_r+0x6c>)
 8009984:	429c      	cmp	r4, r3
 8009986:	d11b      	bne.n	80099c0 <_fflush_r+0x58>
 8009988:	686c      	ldr	r4, [r5, #4]
 800998a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d0ef      	beq.n	8009972 <_fflush_r+0xa>
 8009992:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009994:	07d0      	lsls	r0, r2, #31
 8009996:	d404      	bmi.n	80099a2 <_fflush_r+0x3a>
 8009998:	0599      	lsls	r1, r3, #22
 800999a:	d402      	bmi.n	80099a2 <_fflush_r+0x3a>
 800999c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800999e:	f000 f915 	bl	8009bcc <__retarget_lock_acquire_recursive>
 80099a2:	4628      	mov	r0, r5
 80099a4:	4621      	mov	r1, r4
 80099a6:	f7ff ff59 	bl	800985c <__sflush_r>
 80099aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099ac:	07da      	lsls	r2, r3, #31
 80099ae:	4605      	mov	r5, r0
 80099b0:	d4e0      	bmi.n	8009974 <_fflush_r+0xc>
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	059b      	lsls	r3, r3, #22
 80099b6:	d4dd      	bmi.n	8009974 <_fflush_r+0xc>
 80099b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ba:	f000 f908 	bl	8009bce <__retarget_lock_release_recursive>
 80099be:	e7d9      	b.n	8009974 <_fflush_r+0xc>
 80099c0:	4b05      	ldr	r3, [pc, #20]	; (80099d8 <_fflush_r+0x70>)
 80099c2:	429c      	cmp	r4, r3
 80099c4:	d101      	bne.n	80099ca <_fflush_r+0x62>
 80099c6:	68ac      	ldr	r4, [r5, #8]
 80099c8:	e7df      	b.n	800998a <_fflush_r+0x22>
 80099ca:	4b04      	ldr	r3, [pc, #16]	; (80099dc <_fflush_r+0x74>)
 80099cc:	429c      	cmp	r4, r3
 80099ce:	bf08      	it	eq
 80099d0:	68ec      	ldreq	r4, [r5, #12]
 80099d2:	e7da      	b.n	800998a <_fflush_r+0x22>
 80099d4:	0800b4a4 	.word	0x0800b4a4
 80099d8:	0800b4c4 	.word	0x0800b4c4
 80099dc:	0800b484 	.word	0x0800b484

080099e0 <std>:
 80099e0:	2300      	movs	r3, #0
 80099e2:	b510      	push	{r4, lr}
 80099e4:	4604      	mov	r4, r0
 80099e6:	e9c0 3300 	strd	r3, r3, [r0]
 80099ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099ee:	6083      	str	r3, [r0, #8]
 80099f0:	8181      	strh	r1, [r0, #12]
 80099f2:	6643      	str	r3, [r0, #100]	; 0x64
 80099f4:	81c2      	strh	r2, [r0, #14]
 80099f6:	6183      	str	r3, [r0, #24]
 80099f8:	4619      	mov	r1, r3
 80099fa:	2208      	movs	r2, #8
 80099fc:	305c      	adds	r0, #92	; 0x5c
 80099fe:	f7ff fb5f 	bl	80090c0 <memset>
 8009a02:	4b05      	ldr	r3, [pc, #20]	; (8009a18 <std+0x38>)
 8009a04:	6263      	str	r3, [r4, #36]	; 0x24
 8009a06:	4b05      	ldr	r3, [pc, #20]	; (8009a1c <std+0x3c>)
 8009a08:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a0a:	4b05      	ldr	r3, [pc, #20]	; (8009a20 <std+0x40>)
 8009a0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a0e:	4b05      	ldr	r3, [pc, #20]	; (8009a24 <std+0x44>)
 8009a10:	6224      	str	r4, [r4, #32]
 8009a12:	6323      	str	r3, [r4, #48]	; 0x30
 8009a14:	bd10      	pop	{r4, pc}
 8009a16:	bf00      	nop
 8009a18:	08009e7d 	.word	0x08009e7d
 8009a1c:	08009e9f 	.word	0x08009e9f
 8009a20:	08009ed7 	.word	0x08009ed7
 8009a24:	08009efb 	.word	0x08009efb

08009a28 <_cleanup_r>:
 8009a28:	4901      	ldr	r1, [pc, #4]	; (8009a30 <_cleanup_r+0x8>)
 8009a2a:	f000 b8af 	b.w	8009b8c <_fwalk_reent>
 8009a2e:	bf00      	nop
 8009a30:	08009969 	.word	0x08009969

08009a34 <__sfmoreglue>:
 8009a34:	b570      	push	{r4, r5, r6, lr}
 8009a36:	2268      	movs	r2, #104	; 0x68
 8009a38:	1e4d      	subs	r5, r1, #1
 8009a3a:	4355      	muls	r5, r2
 8009a3c:	460e      	mov	r6, r1
 8009a3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a42:	f000 f997 	bl	8009d74 <_malloc_r>
 8009a46:	4604      	mov	r4, r0
 8009a48:	b140      	cbz	r0, 8009a5c <__sfmoreglue+0x28>
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	e9c0 1600 	strd	r1, r6, [r0]
 8009a50:	300c      	adds	r0, #12
 8009a52:	60a0      	str	r0, [r4, #8]
 8009a54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a58:	f7ff fb32 	bl	80090c0 <memset>
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	bd70      	pop	{r4, r5, r6, pc}

08009a60 <__sfp_lock_acquire>:
 8009a60:	4801      	ldr	r0, [pc, #4]	; (8009a68 <__sfp_lock_acquire+0x8>)
 8009a62:	f000 b8b3 	b.w	8009bcc <__retarget_lock_acquire_recursive>
 8009a66:	bf00      	nop
 8009a68:	20001f1d 	.word	0x20001f1d

08009a6c <__sfp_lock_release>:
 8009a6c:	4801      	ldr	r0, [pc, #4]	; (8009a74 <__sfp_lock_release+0x8>)
 8009a6e:	f000 b8ae 	b.w	8009bce <__retarget_lock_release_recursive>
 8009a72:	bf00      	nop
 8009a74:	20001f1d 	.word	0x20001f1d

08009a78 <__sinit_lock_acquire>:
 8009a78:	4801      	ldr	r0, [pc, #4]	; (8009a80 <__sinit_lock_acquire+0x8>)
 8009a7a:	f000 b8a7 	b.w	8009bcc <__retarget_lock_acquire_recursive>
 8009a7e:	bf00      	nop
 8009a80:	20001f1e 	.word	0x20001f1e

08009a84 <__sinit_lock_release>:
 8009a84:	4801      	ldr	r0, [pc, #4]	; (8009a8c <__sinit_lock_release+0x8>)
 8009a86:	f000 b8a2 	b.w	8009bce <__retarget_lock_release_recursive>
 8009a8a:	bf00      	nop
 8009a8c:	20001f1e 	.word	0x20001f1e

08009a90 <__sinit>:
 8009a90:	b510      	push	{r4, lr}
 8009a92:	4604      	mov	r4, r0
 8009a94:	f7ff fff0 	bl	8009a78 <__sinit_lock_acquire>
 8009a98:	69a3      	ldr	r3, [r4, #24]
 8009a9a:	b11b      	cbz	r3, 8009aa4 <__sinit+0x14>
 8009a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aa0:	f7ff bff0 	b.w	8009a84 <__sinit_lock_release>
 8009aa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009aa8:	6523      	str	r3, [r4, #80]	; 0x50
 8009aaa:	4b13      	ldr	r3, [pc, #76]	; (8009af8 <__sinit+0x68>)
 8009aac:	4a13      	ldr	r2, [pc, #76]	; (8009afc <__sinit+0x6c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ab2:	42a3      	cmp	r3, r4
 8009ab4:	bf04      	itt	eq
 8009ab6:	2301      	moveq	r3, #1
 8009ab8:	61a3      	streq	r3, [r4, #24]
 8009aba:	4620      	mov	r0, r4
 8009abc:	f000 f820 	bl	8009b00 <__sfp>
 8009ac0:	6060      	str	r0, [r4, #4]
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f000 f81c 	bl	8009b00 <__sfp>
 8009ac8:	60a0      	str	r0, [r4, #8]
 8009aca:	4620      	mov	r0, r4
 8009acc:	f000 f818 	bl	8009b00 <__sfp>
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	60e0      	str	r0, [r4, #12]
 8009ad4:	2104      	movs	r1, #4
 8009ad6:	6860      	ldr	r0, [r4, #4]
 8009ad8:	f7ff ff82 	bl	80099e0 <std>
 8009adc:	68a0      	ldr	r0, [r4, #8]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	2109      	movs	r1, #9
 8009ae2:	f7ff ff7d 	bl	80099e0 <std>
 8009ae6:	68e0      	ldr	r0, [r4, #12]
 8009ae8:	2202      	movs	r2, #2
 8009aea:	2112      	movs	r1, #18
 8009aec:	f7ff ff78 	bl	80099e0 <std>
 8009af0:	2301      	movs	r3, #1
 8009af2:	61a3      	str	r3, [r4, #24]
 8009af4:	e7d2      	b.n	8009a9c <__sinit+0xc>
 8009af6:	bf00      	nop
 8009af8:	0800b44c 	.word	0x0800b44c
 8009afc:	08009a29 	.word	0x08009a29

08009b00 <__sfp>:
 8009b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b02:	4607      	mov	r7, r0
 8009b04:	f7ff ffac 	bl	8009a60 <__sfp_lock_acquire>
 8009b08:	4b1e      	ldr	r3, [pc, #120]	; (8009b84 <__sfp+0x84>)
 8009b0a:	681e      	ldr	r6, [r3, #0]
 8009b0c:	69b3      	ldr	r3, [r6, #24]
 8009b0e:	b913      	cbnz	r3, 8009b16 <__sfp+0x16>
 8009b10:	4630      	mov	r0, r6
 8009b12:	f7ff ffbd 	bl	8009a90 <__sinit>
 8009b16:	3648      	adds	r6, #72	; 0x48
 8009b18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	d503      	bpl.n	8009b28 <__sfp+0x28>
 8009b20:	6833      	ldr	r3, [r6, #0]
 8009b22:	b30b      	cbz	r3, 8009b68 <__sfp+0x68>
 8009b24:	6836      	ldr	r6, [r6, #0]
 8009b26:	e7f7      	b.n	8009b18 <__sfp+0x18>
 8009b28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b2c:	b9d5      	cbnz	r5, 8009b64 <__sfp+0x64>
 8009b2e:	4b16      	ldr	r3, [pc, #88]	; (8009b88 <__sfp+0x88>)
 8009b30:	60e3      	str	r3, [r4, #12]
 8009b32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b36:	6665      	str	r5, [r4, #100]	; 0x64
 8009b38:	f000 f847 	bl	8009bca <__retarget_lock_init_recursive>
 8009b3c:	f7ff ff96 	bl	8009a6c <__sfp_lock_release>
 8009b40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b48:	6025      	str	r5, [r4, #0]
 8009b4a:	61a5      	str	r5, [r4, #24]
 8009b4c:	2208      	movs	r2, #8
 8009b4e:	4629      	mov	r1, r5
 8009b50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b54:	f7ff fab4 	bl	80090c0 <memset>
 8009b58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b60:	4620      	mov	r0, r4
 8009b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b64:	3468      	adds	r4, #104	; 0x68
 8009b66:	e7d9      	b.n	8009b1c <__sfp+0x1c>
 8009b68:	2104      	movs	r1, #4
 8009b6a:	4638      	mov	r0, r7
 8009b6c:	f7ff ff62 	bl	8009a34 <__sfmoreglue>
 8009b70:	4604      	mov	r4, r0
 8009b72:	6030      	str	r0, [r6, #0]
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d1d5      	bne.n	8009b24 <__sfp+0x24>
 8009b78:	f7ff ff78 	bl	8009a6c <__sfp_lock_release>
 8009b7c:	230c      	movs	r3, #12
 8009b7e:	603b      	str	r3, [r7, #0]
 8009b80:	e7ee      	b.n	8009b60 <__sfp+0x60>
 8009b82:	bf00      	nop
 8009b84:	0800b44c 	.word	0x0800b44c
 8009b88:	ffff0001 	.word	0xffff0001

08009b8c <_fwalk_reent>:
 8009b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b90:	4606      	mov	r6, r0
 8009b92:	4688      	mov	r8, r1
 8009b94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b98:	2700      	movs	r7, #0
 8009b9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b9e:	f1b9 0901 	subs.w	r9, r9, #1
 8009ba2:	d505      	bpl.n	8009bb0 <_fwalk_reent+0x24>
 8009ba4:	6824      	ldr	r4, [r4, #0]
 8009ba6:	2c00      	cmp	r4, #0
 8009ba8:	d1f7      	bne.n	8009b9a <_fwalk_reent+0xe>
 8009baa:	4638      	mov	r0, r7
 8009bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bb0:	89ab      	ldrh	r3, [r5, #12]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d907      	bls.n	8009bc6 <_fwalk_reent+0x3a>
 8009bb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	d003      	beq.n	8009bc6 <_fwalk_reent+0x3a>
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	47c0      	blx	r8
 8009bc4:	4307      	orrs	r7, r0
 8009bc6:	3568      	adds	r5, #104	; 0x68
 8009bc8:	e7e9      	b.n	8009b9e <_fwalk_reent+0x12>

08009bca <__retarget_lock_init_recursive>:
 8009bca:	4770      	bx	lr

08009bcc <__retarget_lock_acquire_recursive>:
 8009bcc:	4770      	bx	lr

08009bce <__retarget_lock_release_recursive>:
 8009bce:	4770      	bx	lr

08009bd0 <__swhatbuf_r>:
 8009bd0:	b570      	push	{r4, r5, r6, lr}
 8009bd2:	460e      	mov	r6, r1
 8009bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd8:	2900      	cmp	r1, #0
 8009bda:	b096      	sub	sp, #88	; 0x58
 8009bdc:	4614      	mov	r4, r2
 8009bde:	461d      	mov	r5, r3
 8009be0:	da08      	bge.n	8009bf4 <__swhatbuf_r+0x24>
 8009be2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	602a      	str	r2, [r5, #0]
 8009bea:	061a      	lsls	r2, r3, #24
 8009bec:	d410      	bmi.n	8009c10 <__swhatbuf_r+0x40>
 8009bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bf2:	e00e      	b.n	8009c12 <__swhatbuf_r+0x42>
 8009bf4:	466a      	mov	r2, sp
 8009bf6:	f000 f9a7 	bl	8009f48 <_fstat_r>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	dbf1      	blt.n	8009be2 <__swhatbuf_r+0x12>
 8009bfe:	9a01      	ldr	r2, [sp, #4]
 8009c00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c08:	425a      	negs	r2, r3
 8009c0a:	415a      	adcs	r2, r3
 8009c0c:	602a      	str	r2, [r5, #0]
 8009c0e:	e7ee      	b.n	8009bee <__swhatbuf_r+0x1e>
 8009c10:	2340      	movs	r3, #64	; 0x40
 8009c12:	2000      	movs	r0, #0
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	b016      	add	sp, #88	; 0x58
 8009c18:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c1c <__smakebuf_r>:
 8009c1c:	898b      	ldrh	r3, [r1, #12]
 8009c1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c20:	079d      	lsls	r5, r3, #30
 8009c22:	4606      	mov	r6, r0
 8009c24:	460c      	mov	r4, r1
 8009c26:	d507      	bpl.n	8009c38 <__smakebuf_r+0x1c>
 8009c28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c2c:	6023      	str	r3, [r4, #0]
 8009c2e:	6123      	str	r3, [r4, #16]
 8009c30:	2301      	movs	r3, #1
 8009c32:	6163      	str	r3, [r4, #20]
 8009c34:	b002      	add	sp, #8
 8009c36:	bd70      	pop	{r4, r5, r6, pc}
 8009c38:	ab01      	add	r3, sp, #4
 8009c3a:	466a      	mov	r2, sp
 8009c3c:	f7ff ffc8 	bl	8009bd0 <__swhatbuf_r>
 8009c40:	9900      	ldr	r1, [sp, #0]
 8009c42:	4605      	mov	r5, r0
 8009c44:	4630      	mov	r0, r6
 8009c46:	f000 f895 	bl	8009d74 <_malloc_r>
 8009c4a:	b948      	cbnz	r0, 8009c60 <__smakebuf_r+0x44>
 8009c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c50:	059a      	lsls	r2, r3, #22
 8009c52:	d4ef      	bmi.n	8009c34 <__smakebuf_r+0x18>
 8009c54:	f023 0303 	bic.w	r3, r3, #3
 8009c58:	f043 0302 	orr.w	r3, r3, #2
 8009c5c:	81a3      	strh	r3, [r4, #12]
 8009c5e:	e7e3      	b.n	8009c28 <__smakebuf_r+0xc>
 8009c60:	4b0d      	ldr	r3, [pc, #52]	; (8009c98 <__smakebuf_r+0x7c>)
 8009c62:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c64:	89a3      	ldrh	r3, [r4, #12]
 8009c66:	6020      	str	r0, [r4, #0]
 8009c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c6c:	81a3      	strh	r3, [r4, #12]
 8009c6e:	9b00      	ldr	r3, [sp, #0]
 8009c70:	6163      	str	r3, [r4, #20]
 8009c72:	9b01      	ldr	r3, [sp, #4]
 8009c74:	6120      	str	r0, [r4, #16]
 8009c76:	b15b      	cbz	r3, 8009c90 <__smakebuf_r+0x74>
 8009c78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	f000 f975 	bl	8009f6c <_isatty_r>
 8009c82:	b128      	cbz	r0, 8009c90 <__smakebuf_r+0x74>
 8009c84:	89a3      	ldrh	r3, [r4, #12]
 8009c86:	f023 0303 	bic.w	r3, r3, #3
 8009c8a:	f043 0301 	orr.w	r3, r3, #1
 8009c8e:	81a3      	strh	r3, [r4, #12]
 8009c90:	89a0      	ldrh	r0, [r4, #12]
 8009c92:	4305      	orrs	r5, r0
 8009c94:	81a5      	strh	r5, [r4, #12]
 8009c96:	e7cd      	b.n	8009c34 <__smakebuf_r+0x18>
 8009c98:	08009a29 	.word	0x08009a29

08009c9c <_free_r>:
 8009c9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c9e:	2900      	cmp	r1, #0
 8009ca0:	d044      	beq.n	8009d2c <_free_r+0x90>
 8009ca2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ca6:	9001      	str	r0, [sp, #4]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f1a1 0404 	sub.w	r4, r1, #4
 8009cae:	bfb8      	it	lt
 8009cb0:	18e4      	addlt	r4, r4, r3
 8009cb2:	f000 f97d 	bl	8009fb0 <__malloc_lock>
 8009cb6:	4a1e      	ldr	r2, [pc, #120]	; (8009d30 <_free_r+0x94>)
 8009cb8:	9801      	ldr	r0, [sp, #4]
 8009cba:	6813      	ldr	r3, [r2, #0]
 8009cbc:	b933      	cbnz	r3, 8009ccc <_free_r+0x30>
 8009cbe:	6063      	str	r3, [r4, #4]
 8009cc0:	6014      	str	r4, [r2, #0]
 8009cc2:	b003      	add	sp, #12
 8009cc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cc8:	f000 b978 	b.w	8009fbc <__malloc_unlock>
 8009ccc:	42a3      	cmp	r3, r4
 8009cce:	d908      	bls.n	8009ce2 <_free_r+0x46>
 8009cd0:	6825      	ldr	r5, [r4, #0]
 8009cd2:	1961      	adds	r1, r4, r5
 8009cd4:	428b      	cmp	r3, r1
 8009cd6:	bf01      	itttt	eq
 8009cd8:	6819      	ldreq	r1, [r3, #0]
 8009cda:	685b      	ldreq	r3, [r3, #4]
 8009cdc:	1949      	addeq	r1, r1, r5
 8009cde:	6021      	streq	r1, [r4, #0]
 8009ce0:	e7ed      	b.n	8009cbe <_free_r+0x22>
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	b10b      	cbz	r3, 8009cec <_free_r+0x50>
 8009ce8:	42a3      	cmp	r3, r4
 8009cea:	d9fa      	bls.n	8009ce2 <_free_r+0x46>
 8009cec:	6811      	ldr	r1, [r2, #0]
 8009cee:	1855      	adds	r5, r2, r1
 8009cf0:	42a5      	cmp	r5, r4
 8009cf2:	d10b      	bne.n	8009d0c <_free_r+0x70>
 8009cf4:	6824      	ldr	r4, [r4, #0]
 8009cf6:	4421      	add	r1, r4
 8009cf8:	1854      	adds	r4, r2, r1
 8009cfa:	42a3      	cmp	r3, r4
 8009cfc:	6011      	str	r1, [r2, #0]
 8009cfe:	d1e0      	bne.n	8009cc2 <_free_r+0x26>
 8009d00:	681c      	ldr	r4, [r3, #0]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	6053      	str	r3, [r2, #4]
 8009d06:	4421      	add	r1, r4
 8009d08:	6011      	str	r1, [r2, #0]
 8009d0a:	e7da      	b.n	8009cc2 <_free_r+0x26>
 8009d0c:	d902      	bls.n	8009d14 <_free_r+0x78>
 8009d0e:	230c      	movs	r3, #12
 8009d10:	6003      	str	r3, [r0, #0]
 8009d12:	e7d6      	b.n	8009cc2 <_free_r+0x26>
 8009d14:	6825      	ldr	r5, [r4, #0]
 8009d16:	1961      	adds	r1, r4, r5
 8009d18:	428b      	cmp	r3, r1
 8009d1a:	bf04      	itt	eq
 8009d1c:	6819      	ldreq	r1, [r3, #0]
 8009d1e:	685b      	ldreq	r3, [r3, #4]
 8009d20:	6063      	str	r3, [r4, #4]
 8009d22:	bf04      	itt	eq
 8009d24:	1949      	addeq	r1, r1, r5
 8009d26:	6021      	streq	r1, [r4, #0]
 8009d28:	6054      	str	r4, [r2, #4]
 8009d2a:	e7ca      	b.n	8009cc2 <_free_r+0x26>
 8009d2c:	b003      	add	sp, #12
 8009d2e:	bd30      	pop	{r4, r5, pc}
 8009d30:	20001f20 	.word	0x20001f20

08009d34 <sbrk_aligned>:
 8009d34:	b570      	push	{r4, r5, r6, lr}
 8009d36:	4e0e      	ldr	r6, [pc, #56]	; (8009d70 <sbrk_aligned+0x3c>)
 8009d38:	460c      	mov	r4, r1
 8009d3a:	6831      	ldr	r1, [r6, #0]
 8009d3c:	4605      	mov	r5, r0
 8009d3e:	b911      	cbnz	r1, 8009d46 <sbrk_aligned+0x12>
 8009d40:	f000 f88c 	bl	8009e5c <_sbrk_r>
 8009d44:	6030      	str	r0, [r6, #0]
 8009d46:	4621      	mov	r1, r4
 8009d48:	4628      	mov	r0, r5
 8009d4a:	f000 f887 	bl	8009e5c <_sbrk_r>
 8009d4e:	1c43      	adds	r3, r0, #1
 8009d50:	d00a      	beq.n	8009d68 <sbrk_aligned+0x34>
 8009d52:	1cc4      	adds	r4, r0, #3
 8009d54:	f024 0403 	bic.w	r4, r4, #3
 8009d58:	42a0      	cmp	r0, r4
 8009d5a:	d007      	beq.n	8009d6c <sbrk_aligned+0x38>
 8009d5c:	1a21      	subs	r1, r4, r0
 8009d5e:	4628      	mov	r0, r5
 8009d60:	f000 f87c 	bl	8009e5c <_sbrk_r>
 8009d64:	3001      	adds	r0, #1
 8009d66:	d101      	bne.n	8009d6c <sbrk_aligned+0x38>
 8009d68:	f04f 34ff 	mov.w	r4, #4294967295
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	bd70      	pop	{r4, r5, r6, pc}
 8009d70:	20001f24 	.word	0x20001f24

08009d74 <_malloc_r>:
 8009d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d78:	1ccd      	adds	r5, r1, #3
 8009d7a:	f025 0503 	bic.w	r5, r5, #3
 8009d7e:	3508      	adds	r5, #8
 8009d80:	2d0c      	cmp	r5, #12
 8009d82:	bf38      	it	cc
 8009d84:	250c      	movcc	r5, #12
 8009d86:	2d00      	cmp	r5, #0
 8009d88:	4607      	mov	r7, r0
 8009d8a:	db01      	blt.n	8009d90 <_malloc_r+0x1c>
 8009d8c:	42a9      	cmp	r1, r5
 8009d8e:	d905      	bls.n	8009d9c <_malloc_r+0x28>
 8009d90:	230c      	movs	r3, #12
 8009d92:	603b      	str	r3, [r7, #0]
 8009d94:	2600      	movs	r6, #0
 8009d96:	4630      	mov	r0, r6
 8009d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9c:	4e2e      	ldr	r6, [pc, #184]	; (8009e58 <_malloc_r+0xe4>)
 8009d9e:	f000 f907 	bl	8009fb0 <__malloc_lock>
 8009da2:	6833      	ldr	r3, [r6, #0]
 8009da4:	461c      	mov	r4, r3
 8009da6:	bb34      	cbnz	r4, 8009df6 <_malloc_r+0x82>
 8009da8:	4629      	mov	r1, r5
 8009daa:	4638      	mov	r0, r7
 8009dac:	f7ff ffc2 	bl	8009d34 <sbrk_aligned>
 8009db0:	1c43      	adds	r3, r0, #1
 8009db2:	4604      	mov	r4, r0
 8009db4:	d14d      	bne.n	8009e52 <_malloc_r+0xde>
 8009db6:	6834      	ldr	r4, [r6, #0]
 8009db8:	4626      	mov	r6, r4
 8009dba:	2e00      	cmp	r6, #0
 8009dbc:	d140      	bne.n	8009e40 <_malloc_r+0xcc>
 8009dbe:	6823      	ldr	r3, [r4, #0]
 8009dc0:	4631      	mov	r1, r6
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	eb04 0803 	add.w	r8, r4, r3
 8009dc8:	f000 f848 	bl	8009e5c <_sbrk_r>
 8009dcc:	4580      	cmp	r8, r0
 8009dce:	d13a      	bne.n	8009e46 <_malloc_r+0xd2>
 8009dd0:	6821      	ldr	r1, [r4, #0]
 8009dd2:	3503      	adds	r5, #3
 8009dd4:	1a6d      	subs	r5, r5, r1
 8009dd6:	f025 0503 	bic.w	r5, r5, #3
 8009dda:	3508      	adds	r5, #8
 8009ddc:	2d0c      	cmp	r5, #12
 8009dde:	bf38      	it	cc
 8009de0:	250c      	movcc	r5, #12
 8009de2:	4629      	mov	r1, r5
 8009de4:	4638      	mov	r0, r7
 8009de6:	f7ff ffa5 	bl	8009d34 <sbrk_aligned>
 8009dea:	3001      	adds	r0, #1
 8009dec:	d02b      	beq.n	8009e46 <_malloc_r+0xd2>
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	442b      	add	r3, r5
 8009df2:	6023      	str	r3, [r4, #0]
 8009df4:	e00e      	b.n	8009e14 <_malloc_r+0xa0>
 8009df6:	6822      	ldr	r2, [r4, #0]
 8009df8:	1b52      	subs	r2, r2, r5
 8009dfa:	d41e      	bmi.n	8009e3a <_malloc_r+0xc6>
 8009dfc:	2a0b      	cmp	r2, #11
 8009dfe:	d916      	bls.n	8009e2e <_malloc_r+0xba>
 8009e00:	1961      	adds	r1, r4, r5
 8009e02:	42a3      	cmp	r3, r4
 8009e04:	6025      	str	r5, [r4, #0]
 8009e06:	bf18      	it	ne
 8009e08:	6059      	strne	r1, [r3, #4]
 8009e0a:	6863      	ldr	r3, [r4, #4]
 8009e0c:	bf08      	it	eq
 8009e0e:	6031      	streq	r1, [r6, #0]
 8009e10:	5162      	str	r2, [r4, r5]
 8009e12:	604b      	str	r3, [r1, #4]
 8009e14:	4638      	mov	r0, r7
 8009e16:	f104 060b 	add.w	r6, r4, #11
 8009e1a:	f000 f8cf 	bl	8009fbc <__malloc_unlock>
 8009e1e:	f026 0607 	bic.w	r6, r6, #7
 8009e22:	1d23      	adds	r3, r4, #4
 8009e24:	1af2      	subs	r2, r6, r3
 8009e26:	d0b6      	beq.n	8009d96 <_malloc_r+0x22>
 8009e28:	1b9b      	subs	r3, r3, r6
 8009e2a:	50a3      	str	r3, [r4, r2]
 8009e2c:	e7b3      	b.n	8009d96 <_malloc_r+0x22>
 8009e2e:	6862      	ldr	r2, [r4, #4]
 8009e30:	42a3      	cmp	r3, r4
 8009e32:	bf0c      	ite	eq
 8009e34:	6032      	streq	r2, [r6, #0]
 8009e36:	605a      	strne	r2, [r3, #4]
 8009e38:	e7ec      	b.n	8009e14 <_malloc_r+0xa0>
 8009e3a:	4623      	mov	r3, r4
 8009e3c:	6864      	ldr	r4, [r4, #4]
 8009e3e:	e7b2      	b.n	8009da6 <_malloc_r+0x32>
 8009e40:	4634      	mov	r4, r6
 8009e42:	6876      	ldr	r6, [r6, #4]
 8009e44:	e7b9      	b.n	8009dba <_malloc_r+0x46>
 8009e46:	230c      	movs	r3, #12
 8009e48:	603b      	str	r3, [r7, #0]
 8009e4a:	4638      	mov	r0, r7
 8009e4c:	f000 f8b6 	bl	8009fbc <__malloc_unlock>
 8009e50:	e7a1      	b.n	8009d96 <_malloc_r+0x22>
 8009e52:	6025      	str	r5, [r4, #0]
 8009e54:	e7de      	b.n	8009e14 <_malloc_r+0xa0>
 8009e56:	bf00      	nop
 8009e58:	20001f20 	.word	0x20001f20

08009e5c <_sbrk_r>:
 8009e5c:	b538      	push	{r3, r4, r5, lr}
 8009e5e:	4d06      	ldr	r5, [pc, #24]	; (8009e78 <_sbrk_r+0x1c>)
 8009e60:	2300      	movs	r3, #0
 8009e62:	4604      	mov	r4, r0
 8009e64:	4608      	mov	r0, r1
 8009e66:	602b      	str	r3, [r5, #0]
 8009e68:	f7f7 fa62 	bl	8001330 <_sbrk>
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	d102      	bne.n	8009e76 <_sbrk_r+0x1a>
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	b103      	cbz	r3, 8009e76 <_sbrk_r+0x1a>
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	bd38      	pop	{r3, r4, r5, pc}
 8009e78:	20001f28 	.word	0x20001f28

08009e7c <__sread>:
 8009e7c:	b510      	push	{r4, lr}
 8009e7e:	460c      	mov	r4, r1
 8009e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e84:	f000 f8a0 	bl	8009fc8 <_read_r>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	bfab      	itete	ge
 8009e8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8009e90:	181b      	addge	r3, r3, r0
 8009e92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e96:	bfac      	ite	ge
 8009e98:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e9a:	81a3      	strhlt	r3, [r4, #12]
 8009e9c:	bd10      	pop	{r4, pc}

08009e9e <__swrite>:
 8009e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea2:	461f      	mov	r7, r3
 8009ea4:	898b      	ldrh	r3, [r1, #12]
 8009ea6:	05db      	lsls	r3, r3, #23
 8009ea8:	4605      	mov	r5, r0
 8009eaa:	460c      	mov	r4, r1
 8009eac:	4616      	mov	r6, r2
 8009eae:	d505      	bpl.n	8009ebc <__swrite+0x1e>
 8009eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f000 f868 	bl	8009f8c <_lseek_r>
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ec6:	81a3      	strh	r3, [r4, #12]
 8009ec8:	4632      	mov	r2, r6
 8009eca:	463b      	mov	r3, r7
 8009ecc:	4628      	mov	r0, r5
 8009ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed2:	f000 b817 	b.w	8009f04 <_write_r>

08009ed6 <__sseek>:
 8009ed6:	b510      	push	{r4, lr}
 8009ed8:	460c      	mov	r4, r1
 8009eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ede:	f000 f855 	bl	8009f8c <_lseek_r>
 8009ee2:	1c43      	adds	r3, r0, #1
 8009ee4:	89a3      	ldrh	r3, [r4, #12]
 8009ee6:	bf15      	itete	ne
 8009ee8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ef2:	81a3      	strheq	r3, [r4, #12]
 8009ef4:	bf18      	it	ne
 8009ef6:	81a3      	strhne	r3, [r4, #12]
 8009ef8:	bd10      	pop	{r4, pc}

08009efa <__sclose>:
 8009efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009efe:	f000 b813 	b.w	8009f28 <_close_r>
	...

08009f04 <_write_r>:
 8009f04:	b538      	push	{r3, r4, r5, lr}
 8009f06:	4d07      	ldr	r5, [pc, #28]	; (8009f24 <_write_r+0x20>)
 8009f08:	4604      	mov	r4, r0
 8009f0a:	4608      	mov	r0, r1
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	2200      	movs	r2, #0
 8009f10:	602a      	str	r2, [r5, #0]
 8009f12:	461a      	mov	r2, r3
 8009f14:	f7f6 fcec 	bl	80008f0 <_write>
 8009f18:	1c43      	adds	r3, r0, #1
 8009f1a:	d102      	bne.n	8009f22 <_write_r+0x1e>
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	b103      	cbz	r3, 8009f22 <_write_r+0x1e>
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	bd38      	pop	{r3, r4, r5, pc}
 8009f24:	20001f28 	.word	0x20001f28

08009f28 <_close_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4d06      	ldr	r5, [pc, #24]	; (8009f44 <_close_r+0x1c>)
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	4604      	mov	r4, r0
 8009f30:	4608      	mov	r0, r1
 8009f32:	602b      	str	r3, [r5, #0]
 8009f34:	f7f7 f9c7 	bl	80012c6 <_close>
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	d102      	bne.n	8009f42 <_close_r+0x1a>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	b103      	cbz	r3, 8009f42 <_close_r+0x1a>
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	bd38      	pop	{r3, r4, r5, pc}
 8009f44:	20001f28 	.word	0x20001f28

08009f48 <_fstat_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4d07      	ldr	r5, [pc, #28]	; (8009f68 <_fstat_r+0x20>)
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	4604      	mov	r4, r0
 8009f50:	4608      	mov	r0, r1
 8009f52:	4611      	mov	r1, r2
 8009f54:	602b      	str	r3, [r5, #0]
 8009f56:	f7f7 f9c2 	bl	80012de <_fstat>
 8009f5a:	1c43      	adds	r3, r0, #1
 8009f5c:	d102      	bne.n	8009f64 <_fstat_r+0x1c>
 8009f5e:	682b      	ldr	r3, [r5, #0]
 8009f60:	b103      	cbz	r3, 8009f64 <_fstat_r+0x1c>
 8009f62:	6023      	str	r3, [r4, #0]
 8009f64:	bd38      	pop	{r3, r4, r5, pc}
 8009f66:	bf00      	nop
 8009f68:	20001f28 	.word	0x20001f28

08009f6c <_isatty_r>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	4d06      	ldr	r5, [pc, #24]	; (8009f88 <_isatty_r+0x1c>)
 8009f70:	2300      	movs	r3, #0
 8009f72:	4604      	mov	r4, r0
 8009f74:	4608      	mov	r0, r1
 8009f76:	602b      	str	r3, [r5, #0]
 8009f78:	f7f7 f9c1 	bl	80012fe <_isatty>
 8009f7c:	1c43      	adds	r3, r0, #1
 8009f7e:	d102      	bne.n	8009f86 <_isatty_r+0x1a>
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	b103      	cbz	r3, 8009f86 <_isatty_r+0x1a>
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	bd38      	pop	{r3, r4, r5, pc}
 8009f88:	20001f28 	.word	0x20001f28

08009f8c <_lseek_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	4d07      	ldr	r5, [pc, #28]	; (8009fac <_lseek_r+0x20>)
 8009f90:	4604      	mov	r4, r0
 8009f92:	4608      	mov	r0, r1
 8009f94:	4611      	mov	r1, r2
 8009f96:	2200      	movs	r2, #0
 8009f98:	602a      	str	r2, [r5, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f7f7 f9ba 	bl	8001314 <_lseek>
 8009fa0:	1c43      	adds	r3, r0, #1
 8009fa2:	d102      	bne.n	8009faa <_lseek_r+0x1e>
 8009fa4:	682b      	ldr	r3, [r5, #0]
 8009fa6:	b103      	cbz	r3, 8009faa <_lseek_r+0x1e>
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	bd38      	pop	{r3, r4, r5, pc}
 8009fac:	20001f28 	.word	0x20001f28

08009fb0 <__malloc_lock>:
 8009fb0:	4801      	ldr	r0, [pc, #4]	; (8009fb8 <__malloc_lock+0x8>)
 8009fb2:	f7ff be0b 	b.w	8009bcc <__retarget_lock_acquire_recursive>
 8009fb6:	bf00      	nop
 8009fb8:	20001f1c 	.word	0x20001f1c

08009fbc <__malloc_unlock>:
 8009fbc:	4801      	ldr	r0, [pc, #4]	; (8009fc4 <__malloc_unlock+0x8>)
 8009fbe:	f7ff be06 	b.w	8009bce <__retarget_lock_release_recursive>
 8009fc2:	bf00      	nop
 8009fc4:	20001f1c 	.word	0x20001f1c

08009fc8 <_read_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4d07      	ldr	r5, [pc, #28]	; (8009fe8 <_read_r+0x20>)
 8009fcc:	4604      	mov	r4, r0
 8009fce:	4608      	mov	r0, r1
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	602a      	str	r2, [r5, #0]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	f7f7 f958 	bl	800128c <_read>
 8009fdc:	1c43      	adds	r3, r0, #1
 8009fde:	d102      	bne.n	8009fe6 <_read_r+0x1e>
 8009fe0:	682b      	ldr	r3, [r5, #0]
 8009fe2:	b103      	cbz	r3, 8009fe6 <_read_r+0x1e>
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
 8009fe8:	20001f28 	.word	0x20001f28

08009fec <_init>:
 8009fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fee:	bf00      	nop
 8009ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ff2:	bc08      	pop	{r3}
 8009ff4:	469e      	mov	lr, r3
 8009ff6:	4770      	bx	lr

08009ff8 <_fini>:
 8009ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffa:	bf00      	nop
 8009ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ffe:	bc08      	pop	{r3}
 800a000:	469e      	mov	lr, r3
 800a002:	4770      	bx	lr
