
F411_ST7735_si4730_receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c6c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e48  08008e04  08008e04  00018e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c4c  08009c4c  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  08009c4c  08009c4c  00019c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c54  08009c54  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c54  08009c54  00019c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c58  08009c58  00019c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08009c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001da4  20000110  08009d6c  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001eb4  08009d6c  00021eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c2d7  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045ce  00000000  00000000  0003c417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  000409e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e0  00000000  00000000  000422e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c0c3  00000000  00000000  000439c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021020  00000000  00000000  0005fa83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aa8b  00000000  00000000  00080aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b52e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067cc  00000000  00000000  0011b580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000110 	.word	0x20000110
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008dec 	.word	0x08008dec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000114 	.word	0x20000114
 80001d4:	08008dec 	.word	0x08008dec

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MX_DMA_Init+0x3c>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <MX_DMA_Init+0x3c>)
 80004ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <MX_DMA_Init+0x3c>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	200f      	movs	r0, #15
 8000504:	f001 f891 	bl	800162a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000508:	200f      	movs	r0, #15
 800050a:	f001 f8aa 	bl	8001662 <HAL_NVIC_EnableIRQ>

}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023800 	.word	0x40023800

0800051c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	; 0x28
 8000520:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	4b30      	ldr	r3, [pc, #192]	; (80005f8 <MX_GPIO_Init+0xdc>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a2f      	ldr	r2, [pc, #188]	; (80005f8 <MX_GPIO_Init+0xdc>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b2d      	ldr	r3, [pc, #180]	; (80005f8 <MX_GPIO_Init+0xdc>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	613b      	str	r3, [r7, #16]
 800054c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <MX_GPIO_Init+0xdc>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a28      	ldr	r2, [pc, #160]	; (80005f8 <MX_GPIO_Init+0xdc>)
 8000558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <MX_GPIO_Init+0xdc>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <MX_GPIO_Init+0xdc>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <MX_GPIO_Init+0xdc>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <MX_GPIO_Init+0xdc>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <MX_GPIO_Init+0xdc>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a1a      	ldr	r2, [pc, #104]	; (80005f8 <MX_GPIO_Init+0xdc>)
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <MX_GPIO_Init+0xdc>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0302 	and.w	r3, r3, #2
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2102      	movs	r1, #2
 80005a6:	4815      	ldr	r0, [pc, #84]	; (80005fc <MX_GPIO_Init+0xe0>)
 80005a8:	f001 fce4 	bl	8001f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_RESET_Pin|LCD_A0_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80005b2:	4812      	ldr	r0, [pc, #72]	; (80005fc <MX_GPIO_Init+0xe0>)
 80005b4:	f001 fcde 	bl	8001f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005b8:	2304      	movs	r3, #4
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4619      	mov	r1, r3
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <MX_GPIO_Init+0xe4>)
 80005ce:	f001 fb4d 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|LCD_CS_Pin|LCD_RESET_Pin|LCD_A0_Pin;
 80005d2:	f247 0302 	movw	r3, #28674	; 0x7002
 80005d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
 80005da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e0:	2302      	movs	r3, #2
 80005e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4619      	mov	r1, r3
 80005ea:	4804      	ldr	r0, [pc, #16]	; (80005fc <MX_GPIO_Init+0xe0>)
 80005ec:	f001 fb3e 	bl	8001c6c <HAL_GPIO_Init>

}
 80005f0:	bf00      	nop
 80005f2:	3728      	adds	r7, #40	; 0x28
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40020400 	.word	0x40020400
 8000600:	40020000 	.word	0x40020000

08000604 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_I2C1_Init+0x50>)
 800060a:	4a13      	ldr	r2, [pc, #76]	; (8000658 <MX_I2C1_Init+0x54>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_I2C1_Init+0x50>)
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_I2C1_Init+0x58>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_I2C1_Init+0x50>)
 8000622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000626:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_I2C1_Init+0x50>)
 8000642:	f001 fcb1 	bl	8001fa8 <HAL_I2C_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800064c:	f000 f8f8 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000012c 	.word	0x2000012c
 8000658:	40005400 	.word	0x40005400
 800065c:	000186a0 	.word	0x000186a0

08000660 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a19      	ldr	r2, [pc, #100]	; (80006e4 <HAL_I2C_MspInit+0x84>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d12b      	bne.n	80006da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <HAL_I2C_MspInit+0x88>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a17      	ldr	r2, [pc, #92]	; (80006e8 <HAL_I2C_MspInit+0x88>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <HAL_I2C_MspInit+0x88>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800069e:	23c0      	movs	r3, #192	; 0xc0
 80006a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006a2:	2312      	movs	r3, #18
 80006a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006aa:	2303      	movs	r3, #3
 80006ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006ae:	2304      	movs	r3, #4
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <HAL_I2C_MspInit+0x8c>)
 80006ba:	f001 fad7 	bl	8001c6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <HAL_I2C_MspInit+0x88>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <HAL_I2C_MspInit+0x88>)
 80006c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006cc:	6413      	str	r3, [r2, #64]	; 0x40
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_I2C_MspInit+0x88>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40005400 	.word	0x40005400
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020400 	.word	0x40020400

080006f0 <Display_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Display_Init() {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af04      	add	r7, sp, #16
	ST7735_Init();
 80006f6:	f000 fb0b 	bl	8000d10 <ST7735_Init>
	ST7735_SetRotation(1);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f000 fc3a 	bl	8000f74 <ST7735_SetRotation>
    ST7735_FillScreen(ST7735_BLACK);
 8000700:	2000      	movs	r0, #0
 8000702:	f000 fc1b 	bl	8000f3c <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_DrawString(15, 0, "FM/AM/SW", Font_11x18, ST7735_RED, ST7735_BLACK);
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <Display_Init+0x40>)
 8000708:	2200      	movs	r2, #0
 800070a:	9202      	str	r2, [sp, #8]
 800070c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000710:	9201      	str	r2, [sp, #4]
 8000712:	685a      	ldr	r2, [r3, #4]
 8000714:	9200      	str	r2, [sp, #0]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a06      	ldr	r2, [pc, #24]	; (8000734 <Display_Init+0x44>)
 800071a:	2100      	movs	r1, #0
 800071c:	200f      	movs	r0, #15
 800071e:	f000 fb1d 	bl	8000d5c <ST7735_DrawString>
    //ST7735_WriteString(34, 25, "reciever", Font_11x18, ST7735_COLOR565(0, 116, 199), ST7735_BLACK);
    HAL_Delay(2000);
 8000722:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000726:	f000 fe81 	bl	800142c <HAL_Delay>
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000000 	.word	0x20000000
 8000734:	08008e04 	.word	0x08008e04

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f000 fe04 	bl	8001348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000740:	f000 f812 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000744:	f7ff feea 	bl	800051c <MX_GPIO_Init>
  MX_DMA_Init();
 8000748:	f7ff fec8 	bl	80004dc <MX_DMA_Init>
  MX_SPI2_Init();
 800074c:	f000 f8d0 	bl	80008f0 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000750:	f7ff ff58 	bl	8000604 <MX_I2C1_Init>
  MX_RTC_Init();
 8000754:	f000 f87a 	bl	800084c <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000758:	f007 fe32 	bl	80083c0 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800075c:	f000 fd30 	bl	80011c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Display_Init();
 8000760:	f7ff ffc6 	bl	80006f0 <Display_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000764:	e7fe      	b.n	8000764 <main+0x2c>
	...

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b094      	sub	sp, #80	; 0x50
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	2230      	movs	r2, #48	; 0x30
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f008 fb30 	bl	8008ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	4b29      	ldr	r3, [pc, #164]	; (8000838 <SystemClock_Config+0xd0>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	4a28      	ldr	r2, [pc, #160]	; (8000838 <SystemClock_Config+0xd0>)
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079a:	6413      	str	r3, [r2, #64]	; 0x40
 800079c:	4b26      	ldr	r3, [pc, #152]	; (8000838 <SystemClock_Config+0xd0>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <SystemClock_Config+0xd4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a22      	ldr	r2, [pc, #136]	; (800083c <SystemClock_Config+0xd4>)
 80007b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b20      	ldr	r3, [pc, #128]	; (800083c <SystemClock_Config+0xd4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80007c4:	2305      	movs	r3, #5
 80007c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007ce:	2301      	movs	r3, #1
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007dc:	2319      	movs	r3, #25
 80007de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007e0:	23c0      	movs	r3, #192	; 0xc0
 80007e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007e8:	2304      	movs	r3, #4
 80007ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 0320 	add.w	r3, r7, #32
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 ff9b 	bl	800372c <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007fc:	f000 f820 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000804:	2302      	movs	r3, #2
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2103      	movs	r1, #3
 800081c:	4618      	mov	r0, r3
 800081e:	f003 f9fd 	bl	8003c1c <HAL_RCC_ClockConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000828:	f000 f80a 	bl	8000840 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800082c:	f003 fadc 	bl	8003de8 <HAL_RCC_EnableCSS>
}
 8000830:	bf00      	nop
 8000832:	3750      	adds	r7, #80	; 0x50
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_RTC_Init+0x44>)
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <MX_RTC_Init+0x48>)
 8000854:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_RTC_Init+0x44>)
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_RTC_Init+0x44>)
 800085e:	227f      	movs	r2, #127	; 0x7f
 8000860:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_RTC_Init+0x44>)
 8000864:	22ff      	movs	r2, #255	; 0xff
 8000866:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_RTC_Init+0x44>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_RTC_Init+0x44>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_RTC_Init+0x44>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_RTC_Init+0x44>)
 800087c:	f003 fcb2 	bl	80041e4 <HAL_RTC_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000886:	f7ff ffdb 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000180 	.word	0x20000180
 8000894:	40002800 	.word	0x40002800

08000898 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
 80008b0:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <HAL_RTC_MspInit+0x50>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d111      	bne.n	80008e0 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008bc:	2302      	movs	r3, #2
 80008be:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80008c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008c4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	4618      	mov	r0, r3
 80008cc:	f003 fb9a 	bl	8004004 <HAL_RCCEx_PeriphCLKConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80008d6:	f7ff ffb3 	bl	8000840 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <HAL_RTC_MspInit+0x54>)
 80008dc:	2201      	movs	r2, #1
 80008de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80008e0:	bf00      	nop
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40002800 	.word	0x40002800
 80008ec:	42470e3c 	.word	0x42470e3c

080008f0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_SPI2_Init+0x64>)
 80008f6:	4a18      	ldr	r2, [pc, #96]	; (8000958 <MX_SPI2_Init+0x68>)
 80008f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_SPI2_Init+0x64>)
 80008fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000900:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_SPI2_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_SPI2_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_SPI2_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_SPI2_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_SPI2_Init+0x64>)
 800091c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000920:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_SPI2_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_SPI2_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_SPI2_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_SPI2_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_SPI2_Init+0x64>)
 800093c:	220a      	movs	r2, #10
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_SPI2_Init+0x64>)
 8000942:	f003 fd49 	bl	80043d8 <HAL_SPI_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800094c:	f7ff ff78 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200001a0 	.word	0x200001a0
 8000958:	40003800 	.word	0x40003800

0800095c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a31      	ldr	r2, [pc, #196]	; (8000a40 <HAL_SPI_MspInit+0xe4>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d15c      	bne.n	8000a38 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b30      	ldr	r3, [pc, #192]	; (8000a44 <HAL_SPI_MspInit+0xe8>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a2f      	ldr	r2, [pc, #188]	; (8000a44 <HAL_SPI_MspInit+0xe8>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <HAL_SPI_MspInit+0xe8>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <HAL_SPI_MspInit+0xe8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a28      	ldr	r2, [pc, #160]	; (8000a44 <HAL_SPI_MspInit+0xe8>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <HAL_SPI_MspInit+0xe8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80009b6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009c8:	2305      	movs	r3, #5
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	481d      	ldr	r0, [pc, #116]	; (8000a48 <HAL_SPI_MspInit+0xec>)
 80009d4:	f001 f94a 	bl	8001c6c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <HAL_SPI_MspInit+0xf0>)
 80009da:	4a1d      	ldr	r2, [pc, #116]	; (8000a50 <HAL_SPI_MspInit+0xf4>)
 80009dc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <HAL_SPI_MspInit+0xf0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <HAL_SPI_MspInit+0xf0>)
 80009e6:	2240      	movs	r2, #64	; 0x40
 80009e8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_SPI_MspInit+0xf0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <HAL_SPI_MspInit+0xf0>)
 80009f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009f6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_SPI_MspInit+0xf0>)
 80009fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009fe:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_SPI_MspInit+0xf0>)
 8000a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a06:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <HAL_SPI_MspInit+0xf0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <HAL_SPI_MspInit+0xf0>)
 8000a10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a14:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <HAL_SPI_MspInit+0xf0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000a1c:	480b      	ldr	r0, [pc, #44]	; (8000a4c <HAL_SPI_MspInit+0xf0>)
 8000a1e:	f000 fe3b 	bl	8001698 <HAL_DMA_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 8000a28:	f7ff ff0a 	bl	8000840 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_SPI_MspInit+0xf0>)
 8000a30:	649a      	str	r2, [r3, #72]	; 0x48
 8000a32:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <HAL_SPI_MspInit+0xf0>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40003800 	.word	0x40003800
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	200001f8 	.word	0x200001f8
 8000a50:	40026070 	.word	0x40026070

08000a54 <ST7735_GPIO_Init>:
static void ST7735_ExecuteCommandList(const uint8_t *addr);
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);

static void ST7735_GPIO_Init(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
	...

08000a64 <ST7735_Reset>:

static void ST7735_Reset()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	TFT_RES_L();
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6e:	4807      	ldr	r0, [pc, #28]	; (8000a8c <ST7735_Reset+0x28>)
 8000a70:	f001 fa80 	bl	8001f74 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000a74:	2014      	movs	r0, #20
 8000a76:	f000 fcd9 	bl	800142c <HAL_Delay>
	TFT_RES_H();
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <ST7735_Reset+0x28>)
 8000a82:	f001 fa77 	bl	8001f74 <HAL_GPIO_WritePin>
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40020400 	.word	0x40020400

08000a90 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
	TFT_DC_C();
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa0:	4806      	ldr	r0, [pc, #24]	; (8000abc <ST7735_WriteCommand+0x2c>)
 8000aa2:	f001 fa67 	bl	8001f74 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000aa6:	1df9      	adds	r1, r7, #7
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	2201      	movs	r2, #1
 8000aae:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <ST7735_WriteCommand+0x30>)
 8000ab0:	f003 fd1b 	bl	80044ea <HAL_SPI_Transmit>
#endif
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	200001a0 	.word	0x200001a0

08000ac4 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	TFT_DC_D();
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad4:	4807      	ldr	r0, [pc, #28]	; (8000af4 <ST7735_WriteData+0x30>)
 8000ad6:	f001 fa4d 	bl	8001f74 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
	while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <ST7735_WriteData+0x34>)
 8000ae6:	f003 fd00 	bl	80044ea <HAL_SPI_Transmit>
#endif
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40020400 	.word	0x40020400
 8000af8:	200001a0 	.word	0x200001a0

08000afc <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 8000b0e:	e034      	b.n	8000b7a <ST7735_ExecuteCommandList+0x7e>
    {
    	uint8_t cmd = *addr++;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	607a      	str	r2, [r7, #4]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000b1a:	7afb      	ldrb	r3, [r7, #11]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ffb7 	bl	8000a90 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	1c5a      	adds	r2, r3, #1
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000b2c:	7abb      	ldrb	r3, [r7, #10]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b34:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000b36:	7abb      	ldrb	r3, [r7, #10]
 8000b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b3c:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 8000b3e:	7abb      	ldrb	r3, [r7, #10]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d008      	beq.n	8000b56 <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000b44:	7abb      	ldrb	r3, [r7, #10]
 8000b46:	4619      	mov	r1, r3
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ffbb 	bl	8000ac4 <ST7735_WriteData>
            addr += numArgs;
 8000b4e:	7abb      	ldrb	r3, [r7, #10]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	4413      	add	r3, r2
 8000b54:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 8000b56:	89bb      	ldrh	r3, [r7, #12]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d00e      	beq.n	8000b7a <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000b66:	89bb      	ldrh	r3, [r7, #12]
 8000b68:	2bff      	cmp	r3, #255	; 0xff
 8000b6a:	d102      	bne.n	8000b72 <ST7735_ExecuteCommandList+0x76>
 8000b6c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b70:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000b72:	89bb      	ldrh	r3, [r7, #12]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fc59 	bl	800142c <HAL_Delay>
    while(numCommands--)
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	1e5a      	subs	r2, r3, #1
 8000b7e:	73fa      	strb	r2, [r7, #15]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1c5      	bne.n	8000b10 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4604      	mov	r4, r0
 8000b98:	4608      	mov	r0, r1
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4623      	mov	r3, r4
 8000ba0:	71fb      	strb	r3, [r7, #7]
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71bb      	strb	r3, [r7, #6]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	717b      	strb	r3, [r7, #5]
 8000baa:	4613      	mov	r3, r2
 8000bac:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000bae:	202a      	movs	r0, #42	; 0x2a
 8000bb0:	f7ff ff6e 	bl	8000a90 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	733b      	strb	r3, [r7, #12]
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <ST7735_SetAddressWindow+0x88>)
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	737b      	strb	r3, [r7, #13]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73bb      	strb	r3, [r7, #14]
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <ST7735_SetAddressWindow+0x88>)
 8000bca:	781a      	ldrb	r2, [r3, #0]
 8000bcc:	797b      	ldrb	r3, [r7, #5]
 8000bce:	4413      	add	r3, r2
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	2104      	movs	r1, #4
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff72 	bl	8000ac4 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000be0:	202b      	movs	r0, #43	; 0x2b
 8000be2:	f7ff ff55 	bl	8000a90 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <ST7735_SetAddressWindow+0x8c>)
 8000be8:	781a      	ldrb	r2, [r3, #0]
 8000bea:	79bb      	ldrb	r3, [r7, #6]
 8000bec:	4413      	add	r3, r2
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <ST7735_SetAddressWindow+0x8c>)
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	793b      	ldrb	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	2104      	movs	r1, #4
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff5d 	bl	8000ac4 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000c0a:	202c      	movs	r0, #44	; 0x2c
 8000c0c:	f7ff ff40 	bl	8000a90 <ST7735_WriteCommand>
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd90      	pop	{r4, r7, pc}
 8000c18:	20000010 	.word	0x20000010
 8000c1c:	20000011 	.word	0x20000011

08000c20 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000c20:	b082      	sub	sp, #8
 8000c22:	b590      	push	{r4, r7, lr}
 8000c24:	b089      	sub	sp, #36	; 0x24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	80bb      	strh	r3, [r7, #4]
 8000c32:	4613      	mov	r3, r2
 8000c34:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	b2d8      	uxtb	r0, r3
 8000c3a:	88bb      	ldrh	r3, [r7, #4]
 8000c3c:	b2d9      	uxtb	r1, r3
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000c46:	4413      	add	r3, r2
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	b2dc      	uxtb	r4, r3
 8000c4e:	88bb      	ldrh	r3, [r7, #4]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000c56:	4413      	add	r3, r2
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4622      	mov	r2, r4
 8000c60:	f7ff ff96 	bl	8000b90 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
 8000c68:	e043      	b.n	8000cf2 <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch - 32) * font.height + i];
 8000c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	3b20      	subs	r3, #32
 8000c70:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000c74:	fb01 f303 	mul.w	r3, r1, r3
 8000c78:	4619      	mov	r1, r3
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	440b      	add	r3, r1
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
 8000c8a:	e029      	b.n	8000ce0 <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d00e      	beq.n	8000cba <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000c9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000c9e:	0a1b      	lsrs	r3, r3, #8
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	743b      	strb	r3, [r7, #16]
 8000ca6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff06 	bl	8000ac4 <ST7735_WriteData>
 8000cb8:	e00f      	b.n	8000cda <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000cba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000cbe:	0a1b      	lsrs	r3, r3, #8
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	733b      	strb	r3, [r7, #12]
 8000cc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fef5 	bl	8000ac4 <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	61bb      	str	r3, [r7, #24]
 8000ce0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d3cf      	bcc.n	8000c8c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	61fb      	str	r3, [r7, #28]
 8000cf2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d3b5      	bcc.n	8000c6a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000cfe:	bf00      	nop
 8000d00:	bf00      	nop
 8000d02:	3724      	adds	r7, #36	; 0x24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000d0a:	b002      	add	sp, #8
 8000d0c:	4770      	bx	lr
	...

08000d10 <ST7735_Init>:

void ST7735_Init()
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	ST7735_GPIO_Init();
 8000d14:	f7ff fe9e 	bl	8000a54 <ST7735_GPIO_Init>
	TFT_CS_L();
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1e:	480b      	ldr	r0, [pc, #44]	; (8000d4c <ST7735_Init+0x3c>)
 8000d20:	f001 f928 	bl	8001f74 <HAL_GPIO_WritePin>
    ST7735_Reset();
 8000d24:	f7ff fe9e 	bl	8000a64 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000d28:	4809      	ldr	r0, [pc, #36]	; (8000d50 <ST7735_Init+0x40>)
 8000d2a:	f7ff fee7 	bl	8000afc <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000d2e:	4809      	ldr	r0, [pc, #36]	; (8000d54 <ST7735_Init+0x44>)
 8000d30:	f7ff fee4 	bl	8000afc <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000d34:	4808      	ldr	r0, [pc, #32]	; (8000d58 <ST7735_Init+0x48>)
 8000d36:	f7ff fee1 	bl	8000afc <ST7735_ExecuteCommandList>
    TFT_CS_H();
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <ST7735_Init+0x3c>)
 8000d42:	f001 f917 	bl	8001f74 <HAL_GPIO_WritePin>
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	08009bb4 	.word	0x08009bb4
 8000d54:	08009bf0 	.word	0x08009bf0
 8000d58:	08009c00 	.word	0x08009c00

08000d5c <ST7735_DrawString>:

    TFT_CS_H();
}

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af04      	add	r7, sp, #16
 8000d64:	603a      	str	r2, [r7, #0]
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	4603      	mov	r3, r0
 8000d6a:	80fb      	strh	r3, [r7, #6]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	80bb      	strh	r3, [r7, #4]
	TFT_CS_L();
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d76:	4825      	ldr	r0, [pc, #148]	; (8000e0c <ST7735_DrawString+0xb0>)
 8000d78:	f001 f8fc 	bl	8001f74 <HAL_GPIO_WritePin>

    while(*str)
 8000d7c:	e033      	b.n	8000de6 <ST7735_DrawString+0x8a>
    {
        if(x + font.width >= _width)
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	7d3a      	ldrb	r2, [r7, #20]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a22      	ldr	r2, [pc, #136]	; (8000e10 <ST7735_DrawString+0xb4>)
 8000d86:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	db16      	blt.n	8000dbc <ST7735_DrawString+0x60>
        {
            x = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000d92:	7d7b      	ldrb	r3, [r7, #21]
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	88bb      	ldrh	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height)
 8000d9c:	88bb      	ldrh	r3, [r7, #4]
 8000d9e:	7d7a      	ldrb	r2, [r7, #21]
 8000da0:	4413      	add	r3, r2
 8000da2:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <ST7735_DrawString+0xb8>)
 8000da4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000da8:	4293      	cmp	r3, r2
 8000daa:	da21      	bge.n	8000df0 <ST7735_DrawString+0x94>
            {
                break;
            }

            if(*str == ' ')
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b20      	cmp	r3, #32
 8000db2:	d103      	bne.n	8000dbc <ST7735_DrawString+0x60>
            {
                // skip spaces in the beginning of the new line
                str++;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	603b      	str	r3, [r7, #0]
                continue;
 8000dba:	e014      	b.n	8000de6 <ST7735_DrawString+0x8a>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	88b9      	ldrh	r1, [r7, #4]
 8000dc2:	88f8      	ldrh	r0, [r7, #6]
 8000dc4:	8c3b      	ldrh	r3, [r7, #32]
 8000dc6:	9302      	str	r3, [sp, #8]
 8000dc8:	8bbb      	ldrh	r3, [r7, #28]
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	f7ff ff25 	bl	8000c20 <ST7735_WriteChar>
        x += font.width;
 8000dd6:	7d3b      	ldrb	r3, [r7, #20]
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	4413      	add	r3, r2
 8000dde:	80fb      	strh	r3, [r7, #6]
        str++;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	603b      	str	r3, [r7, #0]
    while(*str)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1c7      	bne.n	8000d7e <ST7735_DrawString+0x22>
 8000dee:	e000      	b.n	8000df2 <ST7735_DrawString+0x96>
                break;
 8000df0:	bf00      	nop
    }
    TFT_CS_H();
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <ST7735_DrawString+0xb0>)
 8000dfa:	f001 f8bb 	bl	8001f74 <HAL_GPIO_WritePin>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e08:	b002      	add	sp, #8
 8000e0a:	4770      	bx	lr
 8000e0c:	40020400 	.word	0x40020400
 8000e10:	2000000e 	.word	0x2000000e
 8000e14:	2000000c 	.word	0x2000000c

08000e18 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4604      	mov	r4, r0
 8000e20:	4608      	mov	r0, r1
 8000e22:	4611      	mov	r1, r2
 8000e24:	461a      	mov	r2, r3
 8000e26:	4623      	mov	r3, r4
 8000e28:	80fb      	strh	r3, [r7, #6]
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80bb      	strh	r3, [r7, #4]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	807b      	strh	r3, [r7, #2]
 8000e32:	4613      	mov	r3, r2
 8000e34:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= _width) || (y >= _height)) return;
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	4a3c      	ldr	r2, [pc, #240]	; (8000f2c <ST7735_FillRectangle+0x114>)
 8000e3a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	da6f      	bge.n	8000f22 <ST7735_FillRectangle+0x10a>
 8000e42:	88bb      	ldrh	r3, [r7, #4]
 8000e44:	4a3a      	ldr	r2, [pc, #232]	; (8000f30 <ST7735_FillRectangle+0x118>)
 8000e46:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	da69      	bge.n	8000f22 <ST7735_FillRectangle+0x10a>
    if((x + w - 1) >= _width) w = _width - x;
 8000e4e:	88fa      	ldrh	r2, [r7, #6]
 8000e50:	887b      	ldrh	r3, [r7, #2]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a35      	ldr	r2, [pc, #212]	; (8000f2c <ST7735_FillRectangle+0x114>)
 8000e56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	dd06      	ble.n	8000e6c <ST7735_FillRectangle+0x54>
 8000e5e:	4b33      	ldr	r3, [pc, #204]	; (8000f2c <ST7735_FillRectangle+0x114>)
 8000e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000e6c:	88ba      	ldrh	r2, [r7, #4]
 8000e6e:	883b      	ldrh	r3, [r7, #0]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a2f      	ldr	r2, [pc, #188]	; (8000f30 <ST7735_FillRectangle+0x118>)
 8000e74:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	dd06      	ble.n	8000e8a <ST7735_FillRectangle+0x72>
 8000e7c:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <ST7735_FillRectangle+0x118>)
 8000e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	88bb      	ldrh	r3, [r7, #4]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e90:	4828      	ldr	r0, [pc, #160]	; (8000f34 <ST7735_FillRectangle+0x11c>)
 8000e92:	f001 f86f 	bl	8001f74 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	b2d8      	uxtb	r0, r3
 8000e9a:	88bb      	ldrh	r3, [r7, #4]
 8000e9c:	b2d9      	uxtb	r1, r3
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	887b      	ldrh	r3, [r7, #2]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	4413      	add	r3, r2
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	b2dc      	uxtb	r4, r3
 8000eae:	88bb      	ldrh	r3, [r7, #4]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	883b      	ldrh	r3, [r7, #0]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4622      	mov	r2, r4
 8000ec0:	f7ff fe66 	bl	8000b90 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000ec4:	8c3b      	ldrh	r3, [r7, #32]
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	733b      	strb	r3, [r7, #12]
 8000ece:	8c3b      	ldrh	r3, [r7, #32]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	737b      	strb	r3, [r7, #13]
    TFT_DC_D();
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eda:	4816      	ldr	r0, [pc, #88]	; (8000f34 <ST7735_FillRectangle+0x11c>)
 8000edc:	f001 f84a 	bl	8001f74 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8000ee0:	883b      	ldrh	r3, [r7, #0]
 8000ee2:	80bb      	strh	r3, [r7, #4]
 8000ee4:	e013      	b.n	8000f0e <ST7735_FillRectangle+0xf6>
    {
        for(x = w; x > 0; x--)
 8000ee6:	887b      	ldrh	r3, [r7, #2]
 8000ee8:	80fb      	strh	r3, [r7, #6]
 8000eea:	e00a      	b.n	8000f02 <ST7735_FillRectangle+0xea>
        {
#ifdef USE_SPI_DMA
        	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
        	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
        	HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000eec:	f107 010c 	add.w	r1, r7, #12
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	4810      	ldr	r0, [pc, #64]	; (8000f38 <ST7735_FillRectangle+0x120>)
 8000ef8:	f003 faf7 	bl	80044ea <HAL_SPI_Transmit>
        for(x = w; x > 0; x--)
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	80fb      	strh	r3, [r7, #6]
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f1      	bne.n	8000eec <ST7735_FillRectangle+0xd4>
    for(y = h; y > 0; y--)
 8000f08:	88bb      	ldrh	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	80bb      	strh	r3, [r7, #4]
 8000f0e:	88bb      	ldrh	r3, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1e8      	bne.n	8000ee6 <ST7735_FillRectangle+0xce>
#endif
        }
    }
    TFT_CS_H();
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f1a:	4806      	ldr	r0, [pc, #24]	; (8000f34 <ST7735_FillRectangle+0x11c>)
 8000f1c:	f001 f82a 	bl	8001f74 <HAL_GPIO_WritePin>
 8000f20:	e000      	b.n	8000f24 <ST7735_FillRectangle+0x10c>
    if((x >= _width) || (y >= _height)) return;
 8000f22:	bf00      	nop
}
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd90      	pop	{r4, r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000000e 	.word	0x2000000e
 8000f30:	2000000c 	.word	0x2000000c
 8000f34:	40020400 	.word	0x40020400
 8000f38:	200001a0 	.word	0x200001a0

08000f3c <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	4603      	mov	r3, r0
 8000f44:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <ST7735_FillScreen+0x30>)
 8000f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <ST7735_FillScreen+0x34>)
 8000f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f54:	b299      	uxth	r1, r3
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f7ff ff5a 	bl	8000e18 <ST7735_FillRectangle>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000000e 	.word	0x2000000e
 8000f70:	2000000c 	.word	0x2000000c

08000f74 <ST7735_SetRotation>:
/***************************************************************************************
** Function name:           setRotation
** Description:             rotate the screen orientation m = 0-3
***************************************************************************************/
void ST7735_SetRotation(uint8_t m)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  _value_rotation = m % 4;
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b4a      	ldr	r3, [pc, #296]	; (80010b0 <ST7735_SetRotation+0x13c>)
 8000f88:	701a      	strb	r2, [r3, #0]

  TFT_CS_L();
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f90:	4848      	ldr	r0, [pc, #288]	; (80010b4 <ST7735_SetRotation+0x140>)
 8000f92:	f000 ffef 	bl	8001f74 <HAL_GPIO_WritePin>

  ST7735_WriteCommand(ST7735_MADCTL);
 8000f96:	2036      	movs	r0, #54	; 0x36
 8000f98:	f7ff fd7a 	bl	8000a90 <ST7735_WriteCommand>

  switch (_value_rotation)
 8000f9c:	4b44      	ldr	r3, [pc, #272]	; (80010b0 <ST7735_SetRotation+0x13c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d87b      	bhi.n	800109c <ST7735_SetRotation+0x128>
 8000fa4:	a201      	add	r2, pc, #4	; (adr r2, 8000fac <ST7735_SetRotation+0x38>)
 8000fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000faa:	bf00      	nop
 8000fac:	08000fbd 	.word	0x08000fbd
 8000fb0:	08000ff9 	.word	0x08000ff9
 8000fb4:	08001035 	.word	0x08001035
 8000fb8:	08001061 	.word	0x08001061
  {
    case 0:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[1] | _data_rotation[3]);
 8000fbc:	4b3e      	ldr	r3, [pc, #248]	; (80010b8 <ST7735_SetRotation+0x144>)
 8000fbe:	781a      	ldrb	r2, [r3, #0]
 8000fc0:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <ST7735_SetRotation+0x144>)
 8000fc2:	785b      	ldrb	r3, [r3, #1]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <ST7735_SetRotation+0x144>)
 8000fca:	78db      	ldrb	r3, [r3, #3]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	73fb      	strb	r3, [r7, #15]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8000fd2:	f107 030f 	add.w	r3, r7, #15
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fd73 	bl	8000ac4 <ST7735_WriteData>
        _width  = ST7735_WIDTH;
 8000fde:	4b37      	ldr	r3, [pc, #220]	; (80010bc <ST7735_SetRotation+0x148>)
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	801a      	strh	r2, [r3, #0]
        _height = ST7735_HEIGHT;
 8000fe4:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <ST7735_SetRotation+0x14c>)
 8000fe6:	22a0      	movs	r2, #160	; 0xa0
 8000fe8:	801a      	strh	r2, [r3, #0]
        _xstart = ST7735_XSTART;
 8000fea:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <ST7735_SetRotation+0x150>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	701a      	strb	r2, [r3, #0]
		_ystart = ST7735_YSTART;
 8000ff0:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <ST7735_SetRotation+0x154>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
    }
     break;
 8000ff6:	e051      	b.n	800109c <ST7735_SetRotation+0x128>
    case 1:
    {
    	uint8_t d_r = (_data_rotation[1] | _data_rotation[2] | _data_rotation[3]);
 8000ff8:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <ST7735_SetRotation+0x144>)
 8000ffa:	785a      	ldrb	r2, [r3, #1]
 8000ffc:	4b2e      	ldr	r3, [pc, #184]	; (80010b8 <ST7735_SetRotation+0x144>)
 8000ffe:	789b      	ldrb	r3, [r3, #2]
 8001000:	4313      	orrs	r3, r2
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <ST7735_SetRotation+0x144>)
 8001006:	78db      	ldrb	r3, [r3, #3]
 8001008:	4313      	orrs	r3, r2
 800100a:	b2db      	uxtb	r3, r3
 800100c:	73bb      	strb	r3, [r7, #14]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 800100e:	f107 030e 	add.w	r3, r7, #14
 8001012:	2101      	movs	r1, #1
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fd55 	bl	8000ac4 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 800101a:	4b28      	ldr	r3, [pc, #160]	; (80010bc <ST7735_SetRotation+0x148>)
 800101c:	22a0      	movs	r2, #160	; 0xa0
 800101e:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <ST7735_SetRotation+0x14c>)
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 8001026:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <ST7735_SetRotation+0x150>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 800102c:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <ST7735_SetRotation+0x154>)
 800102e:	2202      	movs	r2, #2
 8001030:	701a      	strb	r2, [r3, #0]
    }
      break;
 8001032:	e033      	b.n	800109c <ST7735_SetRotation+0x128>
    case 2:
    {
    	uint8_t d_r = _data_rotation[3];
 8001034:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <ST7735_SetRotation+0x144>)
 8001036:	78db      	ldrb	r3, [r3, #3]
 8001038:	737b      	strb	r3, [r7, #13]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 800103a:	f107 030d 	add.w	r3, r7, #13
 800103e:	2101      	movs	r1, #1
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fd3f 	bl	8000ac4 <ST7735_WriteData>
    	_width  = ST7735_WIDTH;
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <ST7735_SetRotation+0x148>)
 8001048:	2280      	movs	r2, #128	; 0x80
 800104a:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_HEIGHT;
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <ST7735_SetRotation+0x14c>)
 800104e:	22a0      	movs	r2, #160	; 0xa0
 8001050:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_XSTART;
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <ST7735_SetRotation+0x150>)
 8001054:	2202      	movs	r2, #2
 8001056:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_YSTART;
 8001058:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <ST7735_SetRotation+0x154>)
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
    }
      break;
 800105e:	e01d      	b.n	800109c <ST7735_SetRotation+0x128>
    case 3:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[2] | _data_rotation[3]);
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <ST7735_SetRotation+0x144>)
 8001062:	781a      	ldrb	r2, [r3, #0]
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <ST7735_SetRotation+0x144>)
 8001066:	789b      	ldrb	r3, [r3, #2]
 8001068:	4313      	orrs	r3, r2
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <ST7735_SetRotation+0x144>)
 800106e:	78db      	ldrb	r3, [r3, #3]
 8001070:	4313      	orrs	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	733b      	strb	r3, [r7, #12]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	2101      	movs	r1, #1
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fd21 	bl	8000ac4 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <ST7735_SetRotation+0x148>)
 8001084:	22a0      	movs	r2, #160	; 0xa0
 8001086:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <ST7735_SetRotation+0x14c>)
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <ST7735_SetRotation+0x150>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <ST7735_SetRotation+0x154>)
 8001096:	2202      	movs	r2, #2
 8001098:	701a      	strb	r2, [r3, #0]
    }
      break;
 800109a:	bf00      	nop
  }
  TFT_CS_H();
 800109c:	2201      	movs	r2, #1
 800109e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a2:	4804      	ldr	r0, [pc, #16]	; (80010b4 <ST7735_SetRotation+0x140>)
 80010a4:	f000 ff66 	bl	8001f74 <HAL_GPIO_WritePin>
}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000258 	.word	0x20000258
 80010b4:	40020400 	.word	0x40020400
 80010b8:	20000008 	.word	0x20000008
 80010bc:	2000000e 	.word	0x2000000e
 80010c0:	2000000c 	.word	0x2000000c
 80010c4:	20000010 	.word	0x20000010
 80010c8:	20000011 	.word	0x20000011

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_MspInit+0x4c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_MspInit+0x4c>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_MspInit+0x4c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <HAL_MspInit+0x4c>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_MspInit+0x4c>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001120:	f002 ff54 	bl	8003fcc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x8>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116c:	f000 f93e 	bl	80013ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <DMA1_Stream4_IRQHandler+0x10>)
 800117a:	f000 fb3b 	bl	80017f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200001f8 	.word	0x200001f8

08001188 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <OTG_FS_IRQHandler+0x10>)
 800118e:	f001 f99f 	bl	80024d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20001788 	.word	0x20001788

0800119c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <SystemInit+0x20>)
 80011a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <SystemInit+0x20>)
 80011a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2224      	movs	r2, #36	; 0x24
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f007 fe04 	bl	8008ddc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_TIM2_Init+0xa4>)
 80011de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_TIM2_Init+0xa4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <MX_TIM2_Init+0xa4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_TIM2_Init+0xa4>)
 80011f2:	f04f 32ff 	mov.w	r2, #4294967295
 80011f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_TIM2_Init+0xa4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_TIM2_Init+0xa4>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001204:	2301      	movs	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800120c:	2301      	movs	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800121c:	2301      	movs	r3, #1
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	4619      	mov	r1, r3
 800122e:	480d      	ldr	r0, [pc, #52]	; (8001264 <MX_TIM2_Init+0xa4>)
 8001230:	f003 fb62 	bl	80048f8 <HAL_TIM_Encoder_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800123a:	f7ff fb01 	bl	8000840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	4619      	mov	r1, r3
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <MX_TIM2_Init+0xa4>)
 800124c:	f003 fc7a 	bl	8004b44 <HAL_TIMEx_MasterConfigSynchronization>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001256:	f7ff faf3 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	3730      	adds	r7, #48	; 0x30
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000025c 	.word	0x2000025c

08001268 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001288:	d12b      	bne.n	80012e2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <HAL_TIM_Encoder_MspInit+0x84>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a16      	ldr	r2, [pc, #88]	; (80012ec <HAL_TIM_Encoder_MspInit+0x84>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_TIM_Encoder_MspInit+0x84>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_TIM_Encoder_MspInit+0x84>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <HAL_TIM_Encoder_MspInit+0x84>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <HAL_TIM_Encoder_MspInit+0x84>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012c2:	2303      	movs	r3, #3
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012d2:	2301      	movs	r3, #1
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <HAL_TIM_Encoder_MspInit+0x88>)
 80012de:	f000 fcc5 	bl	8001c6c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	; 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000

080012f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800132c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012fa:	490e      	ldr	r1, [pc, #56]	; (8001334 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012fc:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001310:	4c0b      	ldr	r4, [pc, #44]	; (8001340 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800131e:	f7ff ff3d 	bl	800119c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001322:	f007 fd37 	bl	8008d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001326:	f7ff fa07 	bl	8000738 <main>
  bx  lr    
 800132a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800132c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001338:	08009c5c 	.word	0x08009c5c
  ldr r2, =_sbss
 800133c:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001340:	20001eb4 	.word	0x20001eb4

08001344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC_IRQHandler>
	...

08001348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <HAL_Init+0x40>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <HAL_Init+0x40>)
 8001352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_Init+0x40>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <HAL_Init+0x40>)
 800135e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <HAL_Init+0x40>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a07      	ldr	r2, [pc, #28]	; (8001388 <HAL_Init+0x40>)
 800136a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001370:	2003      	movs	r0, #3
 8001372:	f000 f94f 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001376:	200f      	movs	r0, #15
 8001378:	f000 f808 	bl	800138c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800137c:	f7ff fea6 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023c00 	.word	0x40023c00

0800138c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_InitTick+0x54>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_InitTick+0x58>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f967 	bl	800167e <HAL_SYSTICK_Config>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00e      	b.n	80013d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d80a      	bhi.n	80013d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f000 f92f 	bl	800162a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013cc:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <HAL_InitTick+0x5c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e000      	b.n	80013d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000014 	.word	0x20000014
 80013e4:	2000001c 	.word	0x2000001c
 80013e8:	20000018 	.word	0x20000018

080013ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x20>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x24>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <HAL_IncTick+0x24>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	2000001c 	.word	0x2000001c
 8001410:	200002a4 	.word	0x200002a4

08001414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return uwTick;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_GetTick+0x14>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	200002a4 	.word	0x200002a4

0800142c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff ffee 	bl	8001414 <HAL_GetTick>
 8001438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001444:	d005      	beq.n	8001452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_Delay+0x44>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001452:	bf00      	nop
 8001454:	f7ff ffde 	bl	8001414 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	429a      	cmp	r2, r3
 8001462:	d8f7      	bhi.n	8001454 <HAL_Delay+0x28>
  {
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000001c 	.word	0x2000001c

08001474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001490:	4013      	ands	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800149c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <__NVIC_GetPriorityGrouping+0x18>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	f003 0307 	and.w	r3, r3, #7
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db0b      	blt.n	8001502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f003 021f 	and.w	r2, r3, #31
 80014f0:	4907      	ldr	r1, [pc, #28]	; (8001510 <__NVIC_EnableIRQ+0x38>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	2001      	movs	r0, #1
 80014fa:	fa00 f202 	lsl.w	r2, r0, r2
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000e100 	.word	0xe000e100

08001514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	; (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	; (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
         );
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ee:	210f      	movs	r1, #15
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f7ff ff8e 	bl	8001514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff29 	bl	8001474 <__NVIC_SetPriorityGrouping>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800163c:	f7ff ff3e 	bl	80014bc <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff8e 	bl	8001568 <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5d 	bl	8001514 <__NVIC_SetPriority>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff31 	bl	80014d8 <__NVIC_EnableIRQ>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffa2 	bl	80015d0 <SysTick_Config>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff feb6 	bl	8001414 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e099      	b.n	80017e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0201 	bic.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016d4:	e00f      	b.n	80016f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016d6:	f7ff fe9d 	bl	8001414 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b05      	cmp	r3, #5
 80016e2:	d908      	bls.n	80016f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2220      	movs	r2, #32
 80016e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2203      	movs	r2, #3
 80016ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e078      	b.n	80017e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1e8      	bne.n	80016d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <HAL_DMA_Init+0x158>)
 8001710:	4013      	ands	r3, r2
 8001712:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001722:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800173a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4313      	orrs	r3, r2
 8001746:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	2b04      	cmp	r3, #4
 800174e:	d107      	bne.n	8001760 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001758:	4313      	orrs	r3, r2
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4313      	orrs	r3, r2
 800175e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f023 0307 	bic.w	r3, r3, #7
 8001776:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	4313      	orrs	r3, r2
 8001780:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	2b04      	cmp	r3, #4
 8001788:	d117      	bne.n	80017ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4313      	orrs	r3, r2
 8001792:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00e      	beq.n	80017ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f9e9 	bl	8001b74 <DMA_CheckFifoParam>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d008      	beq.n	80017ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2240      	movs	r2, #64	; 0x40
 80017ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017b6:	2301      	movs	r3, #1
 80017b8:	e016      	b.n	80017e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f9a0 	bl	8001b08 <DMA_CalcBaseAndBitshift>
 80017c8:	4603      	mov	r3, r0
 80017ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d0:	223f      	movs	r2, #63	; 0x3f
 80017d2:	409a      	lsls	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	f010803f 	.word	0xf010803f

080017f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001800:	4b8e      	ldr	r3, [pc, #568]	; (8001a3c <HAL_DMA_IRQHandler+0x248>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a8e      	ldr	r2, [pc, #568]	; (8001a40 <HAL_DMA_IRQHandler+0x24c>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	0a9b      	lsrs	r3, r3, #10
 800180c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181e:	2208      	movs	r2, #8
 8001820:	409a      	lsls	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d01a      	beq.n	8001860 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0204 	bic.w	r2, r2, #4
 8001846:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	2208      	movs	r2, #8
 800184e:	409a      	lsls	r2, r3
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001858:	f043 0201 	orr.w	r2, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001864:	2201      	movs	r2, #1
 8001866:	409a      	lsls	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4013      	ands	r3, r2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d012      	beq.n	8001896 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00b      	beq.n	8001896 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001882:	2201      	movs	r2, #1
 8001884:	409a      	lsls	r2, r3
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188e:	f043 0202 	orr.w	r2, r3, #2
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189a:	2204      	movs	r2, #4
 800189c:	409a      	lsls	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d012      	beq.n	80018cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00b      	beq.n	80018cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b8:	2204      	movs	r2, #4
 80018ba:	409a      	lsls	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c4:	f043 0204 	orr.w	r2, r3, #4
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	2210      	movs	r2, #16
 80018d2:	409a      	lsls	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d043      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d03c      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ee:	2210      	movs	r2, #16
 80018f0:	409a      	lsls	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d018      	beq.n	8001936 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d108      	bne.n	8001924 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d024      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	4798      	blx	r3
 8001922:	e01f      	b.n	8001964 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001928:	2b00      	cmp	r3, #0
 800192a:	d01b      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	4798      	blx	r3
 8001934:	e016      	b.n	8001964 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d107      	bne.n	8001954 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0208 	bic.w	r2, r2, #8
 8001952:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001968:	2220      	movs	r2, #32
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 808f 	beq.w	8001a94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 8087 	beq.w	8001a94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198a:	2220      	movs	r2, #32
 800198c:	409a      	lsls	r2, r3
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b05      	cmp	r3, #5
 800199c:	d136      	bne.n	8001a0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0216 	bic.w	r2, r2, #22
 80019ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695a      	ldr	r2, [r3, #20]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d103      	bne.n	80019ce <HAL_DMA_IRQHandler+0x1da>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d007      	beq.n	80019de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0208 	bic.w	r2, r2, #8
 80019dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e2:	223f      	movs	r2, #63	; 0x3f
 80019e4:	409a      	lsls	r2, r3
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d07e      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	4798      	blx	r3
        }
        return;
 8001a0a:	e079      	b.n	8001b00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d01d      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10d      	bne.n	8001a44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d031      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
 8001a38:	e02c      	b.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
 8001a3a:	bf00      	nop
 8001a3c:	20000014 	.word	0x20000014
 8001a40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d023      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4798      	blx	r3
 8001a54:	e01e      	b.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10f      	bne.n	8001a84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0210 	bic.w	r2, r2, #16
 8001a72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d032      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d022      	beq.n	8001aee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2205      	movs	r2, #5
 8001aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0201 	bic.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d307      	bcc.n	8001adc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f2      	bne.n	8001ac0 <HAL_DMA_IRQHandler+0x2cc>
 8001ada:	e000      	b.n	8001ade <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001adc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d005      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
 8001afe:	e000      	b.n	8001b02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b00:	bf00      	nop
    }
  }
}
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	3b10      	subs	r3, #16
 8001b18:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <DMA_CalcBaseAndBitshift+0x64>)
 8001b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b22:	4a13      	ldr	r2, [pc, #76]	; (8001b70 <DMA_CalcBaseAndBitshift+0x68>)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d909      	bls.n	8001b4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b3e:	f023 0303 	bic.w	r3, r3, #3
 8001b42:	1d1a      	adds	r2, r3, #4
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	659a      	str	r2, [r3, #88]	; 0x58
 8001b48:	e007      	b.n	8001b5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b52:	f023 0303 	bic.w	r3, r3, #3
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	aaaaaaab 	.word	0xaaaaaaab
 8001b70:	08009c44 	.word	0x08009c44

08001b74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d11f      	bne.n	8001bce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d856      	bhi.n	8001c42 <DMA_CheckFifoParam+0xce>
 8001b94:	a201      	add	r2, pc, #4	; (adr r2, 8001b9c <DMA_CheckFifoParam+0x28>)
 8001b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9a:	bf00      	nop
 8001b9c:	08001bad 	.word	0x08001bad
 8001ba0:	08001bbf 	.word	0x08001bbf
 8001ba4:	08001bad 	.word	0x08001bad
 8001ba8:	08001c43 	.word	0x08001c43
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d046      	beq.n	8001c46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bbc:	e043      	b.n	8001c46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bc6:	d140      	bne.n	8001c4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bcc:	e03d      	b.n	8001c4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bd6:	d121      	bne.n	8001c1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d837      	bhi.n	8001c4e <DMA_CheckFifoParam+0xda>
 8001bde:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <DMA_CheckFifoParam+0x70>)
 8001be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be4:	08001bf5 	.word	0x08001bf5
 8001be8:	08001bfb 	.word	0x08001bfb
 8001bec:	08001bf5 	.word	0x08001bf5
 8001bf0:	08001c0d 	.word	0x08001c0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bf8:	e030      	b.n	8001c5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d025      	beq.n	8001c52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c0a:	e022      	b.n	8001c52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c14:	d11f      	bne.n	8001c56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c1a:	e01c      	b.n	8001c56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d903      	bls.n	8001c2a <DMA_CheckFifoParam+0xb6>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d003      	beq.n	8001c30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c28:	e018      	b.n	8001c5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8001c2e:	e015      	b.n	8001c5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00e      	beq.n	8001c5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c40:	e00b      	b.n	8001c5a <DMA_CheckFifoParam+0xe6>
      break;
 8001c42:	bf00      	nop
 8001c44:	e00a      	b.n	8001c5c <DMA_CheckFifoParam+0xe8>
      break;
 8001c46:	bf00      	nop
 8001c48:	e008      	b.n	8001c5c <DMA_CheckFifoParam+0xe8>
      break;
 8001c4a:	bf00      	nop
 8001c4c:	e006      	b.n	8001c5c <DMA_CheckFifoParam+0xe8>
      break;
 8001c4e:	bf00      	nop
 8001c50:	e004      	b.n	8001c5c <DMA_CheckFifoParam+0xe8>
      break;
 8001c52:	bf00      	nop
 8001c54:	e002      	b.n	8001c5c <DMA_CheckFifoParam+0xe8>
      break;   
 8001c56:	bf00      	nop
 8001c58:	e000      	b.n	8001c5c <DMA_CheckFifoParam+0xe8>
      break;
 8001c5a:	bf00      	nop
    }
  } 
  
  return status; 
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop

08001c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	e159      	b.n	8001f3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	f040 8148 	bne.w	8001f36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d005      	beq.n	8001cbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d130      	bne.n	8001d20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	2203      	movs	r2, #3
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 0201 	and.w	r2, r3, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d017      	beq.n	8001d5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d123      	bne.n	8001db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	69b9      	ldr	r1, [r7, #24]
 8001dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0203 	and.w	r2, r3, #3
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80a2 	beq.w	8001f36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b57      	ldr	r3, [pc, #348]	; (8001f54 <HAL_GPIO_Init+0x2e8>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a56      	ldr	r2, [pc, #344]	; (8001f54 <HAL_GPIO_Init+0x2e8>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	4b54      	ldr	r3, [pc, #336]	; (8001f54 <HAL_GPIO_Init+0x2e8>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e0e:	4a52      	ldr	r2, [pc, #328]	; (8001f58 <HAL_GPIO_Init+0x2ec>)
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	3302      	adds	r3, #2
 8001e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	220f      	movs	r2, #15
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a49      	ldr	r2, [pc, #292]	; (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d019      	beq.n	8001e6e <HAL_GPIO_Init+0x202>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a48      	ldr	r2, [pc, #288]	; (8001f60 <HAL_GPIO_Init+0x2f4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_GPIO_Init+0x1fe>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a47      	ldr	r2, [pc, #284]	; (8001f64 <HAL_GPIO_Init+0x2f8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00d      	beq.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a46      	ldr	r2, [pc, #280]	; (8001f68 <HAL_GPIO_Init+0x2fc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d007      	beq.n	8001e62 <HAL_GPIO_Init+0x1f6>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a45      	ldr	r2, [pc, #276]	; (8001f6c <HAL_GPIO_Init+0x300>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_GPIO_Init+0x1f2>
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	e008      	b.n	8001e70 <HAL_GPIO_Init+0x204>
 8001e5e:	2307      	movs	r3, #7
 8001e60:	e006      	b.n	8001e70 <HAL_GPIO_Init+0x204>
 8001e62:	2303      	movs	r3, #3
 8001e64:	e004      	b.n	8001e70 <HAL_GPIO_Init+0x204>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e002      	b.n	8001e70 <HAL_GPIO_Init+0x204>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <HAL_GPIO_Init+0x204>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	f002 0203 	and.w	r2, r2, #3
 8001e76:	0092      	lsls	r2, r2, #2
 8001e78:	4093      	lsls	r3, r2
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e80:	4935      	ldr	r1, [pc, #212]	; (8001f58 <HAL_GPIO_Init+0x2ec>)
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	3302      	adds	r3, #2
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e8e:	4b38      	ldr	r3, [pc, #224]	; (8001f70 <HAL_GPIO_Init+0x304>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eb2:	4a2f      	ldr	r2, [pc, #188]	; (8001f70 <HAL_GPIO_Init+0x304>)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb8:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <HAL_GPIO_Init+0x304>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001edc:	4a24      	ldr	r2, [pc, #144]	; (8001f70 <HAL_GPIO_Init+0x304>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ee2:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <HAL_GPIO_Init+0x304>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f06:	4a1a      	ldr	r2, [pc, #104]	; (8001f70 <HAL_GPIO_Init+0x304>)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f0c:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <HAL_GPIO_Init+0x304>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f30:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <HAL_GPIO_Init+0x304>)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	2b0f      	cmp	r3, #15
 8001f40:	f67f aea2 	bls.w	8001c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3724      	adds	r7, #36	; 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40013800 	.word	0x40013800
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	40020400 	.word	0x40020400
 8001f64:	40020800 	.word	0x40020800
 8001f68:	40020c00 	.word	0x40020c00
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40013c00 	.word	0x40013c00

08001f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	807b      	strh	r3, [r7, #2]
 8001f80:	4613      	mov	r3, r2
 8001f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f84:	787b      	ldrb	r3, [r7, #1]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f8a:	887a      	ldrh	r2, [r7, #2]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f90:	e003      	b.n	8001f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f92:	887b      	ldrh	r3, [r7, #2]
 8001f94:	041a      	lsls	r2, r3, #16
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	619a      	str	r2, [r3, #24]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e12b      	b.n	8002212 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fb46 	bl	8000660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2224      	movs	r2, #36	; 0x24
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0201 	bic.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ffa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800200a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800200c:	f001 ffca 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 8002010:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4a81      	ldr	r2, [pc, #516]	; (800221c <HAL_I2C_Init+0x274>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d807      	bhi.n	800202c <HAL_I2C_Init+0x84>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4a80      	ldr	r2, [pc, #512]	; (8002220 <HAL_I2C_Init+0x278>)
 8002020:	4293      	cmp	r3, r2
 8002022:	bf94      	ite	ls
 8002024:	2301      	movls	r3, #1
 8002026:	2300      	movhi	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	e006      	b.n	800203a <HAL_I2C_Init+0x92>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4a7d      	ldr	r2, [pc, #500]	; (8002224 <HAL_I2C_Init+0x27c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	bf94      	ite	ls
 8002034:	2301      	movls	r3, #1
 8002036:	2300      	movhi	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e0e7      	b.n	8002212 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4a78      	ldr	r2, [pc, #480]	; (8002228 <HAL_I2C_Init+0x280>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	0c9b      	lsrs	r3, r3, #18
 800204c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	430a      	orrs	r2, r1
 8002060:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4a6a      	ldr	r2, [pc, #424]	; (800221c <HAL_I2C_Init+0x274>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d802      	bhi.n	800207c <HAL_I2C_Init+0xd4>
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	3301      	adds	r3, #1
 800207a:	e009      	b.n	8002090 <HAL_I2C_Init+0xe8>
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	4a69      	ldr	r2, [pc, #420]	; (800222c <HAL_I2C_Init+0x284>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	099b      	lsrs	r3, r3, #6
 800208e:	3301      	adds	r3, #1
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	430b      	orrs	r3, r1
 8002096:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	495c      	ldr	r1, [pc, #368]	; (800221c <HAL_I2C_Init+0x274>)
 80020ac:	428b      	cmp	r3, r1
 80020ae:	d819      	bhi.n	80020e4 <HAL_I2C_Init+0x13c>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	1e59      	subs	r1, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80020be:	1c59      	adds	r1, r3, #1
 80020c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020c4:	400b      	ands	r3, r1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_I2C_Init+0x138>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1e59      	subs	r1, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020d8:	3301      	adds	r3, #1
 80020da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020de:	e051      	b.n	8002184 <HAL_I2C_Init+0x1dc>
 80020e0:	2304      	movs	r3, #4
 80020e2:	e04f      	b.n	8002184 <HAL_I2C_Init+0x1dc>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d111      	bne.n	8002110 <HAL_I2C_Init+0x168>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1e58      	subs	r0, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	440b      	add	r3, r1
 80020fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80020fe:	3301      	adds	r3, #1
 8002100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	e012      	b.n	8002136 <HAL_I2C_Init+0x18e>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1e58      	subs	r0, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6859      	ldr	r1, [r3, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	0099      	lsls	r1, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	fbb0 f3f3 	udiv	r3, r0, r3
 8002126:	3301      	adds	r3, #1
 8002128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_I2C_Init+0x196>
 800213a:	2301      	movs	r3, #1
 800213c:	e022      	b.n	8002184 <HAL_I2C_Init+0x1dc>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10e      	bne.n	8002164 <HAL_I2C_Init+0x1bc>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1e58      	subs	r0, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6859      	ldr	r1, [r3, #4]
 800214e:	460b      	mov	r3, r1
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	440b      	add	r3, r1
 8002154:	fbb0 f3f3 	udiv	r3, r0, r3
 8002158:	3301      	adds	r3, #1
 800215a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002162:	e00f      	b.n	8002184 <HAL_I2C_Init+0x1dc>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1e58      	subs	r0, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	0099      	lsls	r1, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	fbb0 f3f3 	udiv	r3, r0, r3
 800217a:	3301      	adds	r3, #1
 800217c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002180:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	6809      	ldr	r1, [r1, #0]
 8002188:	4313      	orrs	r3, r2
 800218a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69da      	ldr	r2, [r3, #28]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6911      	ldr	r1, [r2, #16]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68d2      	ldr	r2, [r2, #12]
 80021be:	4311      	orrs	r1, r2
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	430b      	orrs	r3, r1
 80021c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2220      	movs	r2, #32
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	000186a0 	.word	0x000186a0
 8002220:	001e847f 	.word	0x001e847f
 8002224:	003d08ff 	.word	0x003d08ff
 8002228:	431bde83 	.word	0x431bde83
 800222c:	10624dd3 	.word	0x10624dd3

08002230 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002232:	b08f      	sub	sp, #60	; 0x3c
 8002234:	af0a      	add	r7, sp, #40	; 0x28
 8002236:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e10f      	b.n	8002462 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d106      	bne.n	8002262 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f006 fa8f 	bl	8008780 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2203      	movs	r2, #3
 8002266:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d102      	bne.n	800227c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f002 fde2 	bl	8004e4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	687e      	ldr	r6, [r7, #4]
 800228e:	466d      	mov	r5, sp
 8002290:	f106 0410 	add.w	r4, r6, #16
 8002294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80022a4:	1d33      	adds	r3, r6, #4
 80022a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022a8:	6838      	ldr	r0, [r7, #0]
 80022aa:	f002 fcb9 	bl	8004c20 <USB_CoreInit>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0d0      	b.n	8002462 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f002 fdd0 	bl	8004e6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	e04a      	b.n	8002368 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	333d      	adds	r3, #61	; 0x3d
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	333c      	adds	r3, #60	; 0x3c
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	b298      	uxth	r0, r3
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	3344      	adds	r3, #68	; 0x44
 800230e:	4602      	mov	r2, r0
 8002310:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	3340      	adds	r3, #64	; 0x40
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	3348      	adds	r3, #72	; 0x48
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	334c      	adds	r3, #76	; 0x4c
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3354      	adds	r3, #84	; 0x54
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	3301      	adds	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	429a      	cmp	r2, r3
 8002370:	d3af      	bcc.n	80022d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002372:	2300      	movs	r3, #0
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	e044      	b.n	8002402 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	3301      	adds	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	429a      	cmp	r2, r3
 800240a:	d3b5      	bcc.n	8002378 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	603b      	str	r3, [r7, #0]
 8002412:	687e      	ldr	r6, [r7, #4]
 8002414:	466d      	mov	r5, sp
 8002416:	f106 0410 	add.w	r4, r6, #16
 800241a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800241e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002422:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002426:	e885 0003 	stmia.w	r5, {r0, r1}
 800242a:	1d33      	adds	r3, r6, #4
 800242c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800242e:	6838      	ldr	r0, [r7, #0]
 8002430:	f002 fd68 	bl	8004f04 <USB_DevInit>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2202      	movs	r2, #2
 800243e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e00d      	b.n	8002462 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f003 feb7 	bl	80061ce <USB_DevDisconnect>

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800246a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_PCD_Start+0x1c>
 8002482:	2302      	movs	r3, #2
 8002484:	e020      	b.n	80024c8 <HAL_PCD_Start+0x5e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	2b01      	cmp	r3, #1
 8002494:	d109      	bne.n	80024aa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800249a:	2b01      	cmp	r3, #1
 800249c:	d005      	beq.n	80024aa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f002 fcba 	bl	8004e28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 fe67 	bl	800618c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b08d      	sub	sp, #52	; 0x34
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f003 ff25 	bl	8006336 <USB_GetMode>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 848a 	bne.w	8002e08 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f003 fe89 	bl	8006210 <USB_ReadInterrupts>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 8480 	beq.w	8002e06 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fe76 	bl	8006210 <USB_ReadInterrupts>
 8002524:	4603      	mov	r3, r0
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b02      	cmp	r3, #2
 800252c:	d107      	bne.n	800253e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f002 0202 	and.w	r2, r2, #2
 800253c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f003 fe64 	bl	8006210 <USB_ReadInterrupts>
 8002548:	4603      	mov	r3, r0
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b10      	cmp	r3, #16
 8002550:	d161      	bne.n	8002616 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699a      	ldr	r2, [r3, #24]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0210 	bic.w	r2, r2, #16
 8002560:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	f003 020f 	and.w	r2, r3, #15
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	3304      	adds	r3, #4
 8002580:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	0c5b      	lsrs	r3, r3, #17
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	2b02      	cmp	r3, #2
 800258c:	d124      	bne.n	80025d8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002594:	4013      	ands	r3, r2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d035      	beq.n	8002606 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	6a38      	ldr	r0, [r7, #32]
 80025ae:	f003 fc9b 	bl	8005ee8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025be:	441a      	add	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	6a1a      	ldr	r2, [r3, #32]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025d0:	441a      	add	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	621a      	str	r2, [r3, #32]
 80025d6:	e016      	b.n	8002606 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	0c5b      	lsrs	r3, r3, #17
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	2b06      	cmp	r3, #6
 80025e2:	d110      	bne.n	8002606 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025ea:	2208      	movs	r2, #8
 80025ec:	4619      	mov	r1, r3
 80025ee:	6a38      	ldr	r0, [r7, #32]
 80025f0:	f003 fc7a 	bl	8005ee8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	6a1a      	ldr	r2, [r3, #32]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002600:	441a      	add	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699a      	ldr	r2, [r3, #24]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0210 	orr.w	r2, r2, #16
 8002614:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f003 fdf8 	bl	8006210 <USB_ReadInterrupts>
 8002620:	4603      	mov	r3, r0
 8002622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002626:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800262a:	f040 80a7 	bne.w	800277c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f003 fdfd 	bl	8006236 <USB_ReadDevAllOutEpInterrupt>
 800263c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800263e:	e099      	b.n	8002774 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 808e 	beq.w	8002768 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f003 fe21 	bl	800629e <USB_ReadDevOutEPInterrupt>
 800265c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00c      	beq.n	8002682 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	4413      	add	r3, r2
 8002670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002674:	461a      	mov	r2, r3
 8002676:	2301      	movs	r3, #1
 8002678:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800267a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 fec3 	bl	8003408 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00c      	beq.n	80026a6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	4413      	add	r3, r2
 8002694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002698:	461a      	mov	r2, r3
 800269a:	2308      	movs	r3, #8
 800269c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800269e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 ff99 	bl	80035d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026bc:	461a      	mov	r2, r3
 80026be:	2310      	movs	r3, #16
 80026c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d030      	beq.n	800272e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d4:	2b80      	cmp	r3, #128	; 0x80
 80026d6:	d109      	bne.n	80026ec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	3304      	adds	r3, #4
 8002700:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	78db      	ldrb	r3, [r3, #3]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d108      	bne.n	800271c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2200      	movs	r2, #0
 800270e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	b2db      	uxtb	r3, r3
 8002714:	4619      	mov	r1, r3
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f006 f92e 	bl	8008978 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	4413      	add	r3, r2
 8002724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002728:	461a      	mov	r2, r3
 800272a:	2302      	movs	r3, #2
 800272c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002744:	461a      	mov	r2, r3
 8002746:	2320      	movs	r3, #32
 8002748:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	4413      	add	r3, r2
 800275c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002760:	461a      	mov	r2, r3
 8002762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002766:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	3301      	adds	r3, #1
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	085b      	lsrs	r3, r3, #1
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002776:	2b00      	cmp	r3, #0
 8002778:	f47f af62 	bne.w	8002640 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f003 fd45 	bl	8006210 <USB_ReadInterrupts>
 8002786:	4603      	mov	r3, r0
 8002788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800278c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002790:	f040 80db 	bne.w	800294a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f003 fd66 	bl	800626a <USB_ReadDevAllInEpInterrupt>
 800279e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80027a4:	e0cd      	b.n	8002942 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80c2 	beq.w	8002936 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f003 fd8c 	bl	80062da <USB_ReadDevInEPInterrupt>
 80027c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d057      	beq.n	800287e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	2201      	movs	r2, #1
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69f9      	ldr	r1, [r7, #28]
 80027ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027ee:	4013      	ands	r3, r2
 80027f0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027fe:	461a      	mov	r2, r3
 8002800:	2301      	movs	r3, #1
 8002802:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d132      	bne.n	8002872 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	334c      	adds	r3, #76	; 0x4c
 800281c:	6819      	ldr	r1, [r3, #0]
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4403      	add	r3, r0
 800282c:	3348      	adds	r3, #72	; 0x48
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4419      	add	r1, r3
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4403      	add	r3, r0
 8002840:	334c      	adds	r3, #76	; 0x4c
 8002842:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	d113      	bne.n	8002872 <HAL_PCD_IRQHandler+0x3a2>
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	3354      	adds	r3, #84	; 0x54
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d108      	bne.n	8002872 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800286a:	461a      	mov	r2, r3
 800286c:	2101      	movs	r1, #1
 800286e:	f003 fd93 	bl	8006398 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	b2db      	uxtb	r3, r3
 8002876:	4619      	mov	r1, r3
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f006 f802 	bl	8008882 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002894:	461a      	mov	r2, r3
 8002896:	2308      	movs	r3, #8
 8002898:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028b0:	461a      	mov	r2, r3
 80028b2:	2310      	movs	r3, #16
 80028b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028cc:	461a      	mov	r2, r3
 80028ce:	2340      	movs	r3, #64	; 0x40
 80028d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d023      	beq.n	8002924 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028de:	6a38      	ldr	r0, [r7, #32]
 80028e0:	f002 fc74 	bl	80051cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	3338      	adds	r3, #56	; 0x38
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	4413      	add	r3, r2
 80028f4:	3304      	adds	r3, #4
 80028f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	78db      	ldrb	r3, [r3, #3]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d108      	bne.n	8002912 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2200      	movs	r2, #0
 8002904:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	b2db      	uxtb	r3, r3
 800290a:	4619      	mov	r1, r3
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f006 f845 	bl	800899c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	4413      	add	r3, r2
 800291a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800291e:	461a      	mov	r2, r3
 8002920:	2302      	movs	r3, #2
 8002922:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800292e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fcdb 	bl	80032ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	3301      	adds	r3, #1
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293e:	085b      	lsrs	r3, r3, #1
 8002940:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	2b00      	cmp	r3, #0
 8002946:	f47f af2e 	bne.w	80027a6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f003 fc5e 	bl	8006210 <USB_ReadInterrupts>
 8002954:	4603      	mov	r3, r0
 8002956:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800295a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800295e:	d122      	bne.n	80029a6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800297a:	2b01      	cmp	r3, #1
 800297c:	d108      	bne.n	8002990 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002986:	2100      	movs	r1, #0
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fec3 	bl	8003714 <HAL_PCDEx_LPM_Callback>
 800298e:	e002      	b.n	8002996 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f005 ffe3 	bl	800895c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80029a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f003 fc30 	bl	8006210 <USB_ReadInterrupts>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029ba:	d112      	bne.n	80029e2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d102      	bne.n	80029d2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f005 ff9f 	bl	8008910 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80029e0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f003 fc12 	bl	8006210 <USB_ReadInterrupts>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f6:	f040 80b7 	bne.w	8002b68 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2110      	movs	r1, #16
 8002a14:	4618      	mov	r0, r3
 8002a16:	f002 fbd9 	bl	80051cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1e:	e046      	b.n	8002aae <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a32:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a44:	0151      	lsls	r1, r2, #5
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	440a      	add	r2, r1
 8002a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a60:	461a      	mov	r2, r3
 8002a62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a66:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a78:	0151      	lsls	r1, r2, #5
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	440a      	add	r2, r1
 8002a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a98:	0151      	lsls	r1, r2, #5
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	440a      	add	r2, r1
 8002a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002aa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002aa6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	3301      	adds	r3, #1
 8002aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d3b3      	bcc.n	8002a20 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ac6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002aca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d016      	beq.n	8002b02 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ae4:	f043 030b 	orr.w	r3, r3, #11
 8002ae8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002afa:	f043 030b 	orr.w	r3, r3, #11
 8002afe:	6453      	str	r3, [r2, #68]	; 0x44
 8002b00:	e015      	b.n	8002b2e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b14:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b18:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b28:	f043 030b 	orr.w	r3, r3, #11
 8002b2c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b3c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b40:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b52:	461a      	mov	r2, r3
 8002b54:	f003 fc20 	bl	8006398 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f003 fb4f 	bl	8006210 <USB_ReadInterrupts>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b7c:	d124      	bne.n	8002bc8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f003 fbe5 	bl	8006352 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f002 fb9a 	bl	80052c6 <USB_GetDevSpeed>
 8002b92:	4603      	mov	r3, r0
 8002b94:	461a      	mov	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681c      	ldr	r4, [r3, #0]
 8002b9e:	f001 f9f5 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8002ba2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	4620      	mov	r0, r4
 8002bae:	f002 f899 	bl	8004ce4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f005 fe8d 	bl	80088d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f003 fb1f 	bl	8006210 <USB_ReadInterrupts>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d10a      	bne.n	8002bf2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f005 fe6a 	bl	80088b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f002 0208 	and.w	r2, r2, #8
 8002bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f003 fb0a 	bl	8006210 <USB_ReadInterrupts>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c02:	2b80      	cmp	r3, #128	; 0x80
 8002c04:	d122      	bne.n	8002c4c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c12:	2301      	movs	r3, #1
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
 8002c16:	e014      	b.n	8002c42 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	4619      	mov	r1, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fb27 	bl	800328a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	3301      	adds	r3, #1
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d3e5      	bcc.n	8002c18 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f003 fadd 	bl	8006210 <USB_ReadInterrupts>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c60:	d13b      	bne.n	8002cda <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c62:	2301      	movs	r3, #1
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
 8002c66:	e02b      	b.n	8002cc0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	3340      	adds	r3, #64	; 0x40
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d115      	bne.n	8002cba <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c8e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	da12      	bge.n	8002cba <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	333f      	adds	r3, #63	; 0x3f
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 fae8 	bl	800328a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d3ce      	bcc.n	8002c68 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695a      	ldr	r2, [r3, #20]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f003 fa96 	bl	8006210 <USB_ReadInterrupts>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cee:	d155      	bne.n	8002d9c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf4:	e045      	b.n	8002d82 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d12e      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	da2b      	bge.n	8002d7c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d30:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d121      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d78:	6053      	str	r3, [r2, #4]
            break;
 8002d7a:	e007      	b.n	8002d8c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	3301      	adds	r3, #1
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d3b4      	bcc.n	8002cf6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f003 fa35 	bl	8006210 <USB_ReadInterrupts>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db0:	d10a      	bne.n	8002dc8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f005 fe04 	bl	80089c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f003 fa1f 	bl	8006210 <USB_ReadInterrupts>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d115      	bne.n	8002e08 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f005 fdf4 	bl	80089dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6859      	ldr	r1, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	e000      	b.n	8002e08 <HAL_PCD_IRQHandler+0x938>
      return;
 8002e06:	bf00      	nop
    }
  }
}
 8002e08:	3734      	adds	r7, #52	; 0x34
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd90      	pop	{r4, r7, pc}

08002e0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_PCD_SetAddress+0x1a>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e013      	b.n	8002e50 <HAL_PCD_SetAddress+0x42>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 f97d 	bl	8006140 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	4608      	mov	r0, r1
 8002e62:	4611      	mov	r1, r2
 8002e64:	461a      	mov	r2, r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	70fb      	strb	r3, [r7, #3]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	803b      	strh	r3, [r7, #0]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	da0f      	bge.n	8002e9e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	f003 020f 	and.w	r2, r3, #15
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	3338      	adds	r3, #56	; 0x38
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	3304      	adds	r3, #4
 8002e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	705a      	strb	r2, [r3, #1]
 8002e9c:	e00f      	b.n	8002ebe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	f003 020f 	and.w	r2, r3, #15
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002eca:	883a      	ldrh	r2, [r7, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	78ba      	ldrb	r2, [r7, #2]
 8002ed4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	785b      	ldrb	r3, [r3, #1]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d004      	beq.n	8002ee8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ee8:	78bb      	ldrb	r3, [r7, #2]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d102      	bne.n	8002ef4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_PCD_EP_Open+0xaa>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e00e      	b.n	8002f20 <HAL_PCD_EP_Open+0xc8>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68f9      	ldr	r1, [r7, #12]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f002 f9fd 	bl	8005310 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002f1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	da0f      	bge.n	8002f5c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	f003 020f 	and.w	r2, r3, #15
 8002f42:	4613      	mov	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	3338      	adds	r3, #56	; 0x38
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	3304      	adds	r3, #4
 8002f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	705a      	strb	r2, [r3, #1]
 8002f5a:	e00f      	b.n	8002f7c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	f003 020f 	and.w	r2, r3, #15
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	3304      	adds	r3, #4
 8002f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_PCD_EP_Close+0x6e>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e00e      	b.n	8002fb4 <HAL_PCD_EP_Close+0x8c>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68f9      	ldr	r1, [r7, #12]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f002 fa3b 	bl	8005420 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fcc:	7afb      	ldrb	r3, [r7, #11]
 8002fce:	f003 020f 	and.w	r2, r3, #15
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ffe:	7afb      	ldrb	r3, [r7, #11]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	b2da      	uxtb	r2, r3
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d102      	bne.n	8003018 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003018:	7afb      	ldrb	r3, [r7, #11]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	6979      	ldr	r1, [r7, #20]
 8003030:	f002 fd1a 	bl	8005a68 <USB_EP0StartXfer>
 8003034:	e008      	b.n	8003048 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	6979      	ldr	r1, [r7, #20]
 8003044:	f002 fac8 	bl	80055d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	f003 020f 	and.w	r2, r3, #15
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003074:	681b      	ldr	r3, [r3, #0]
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b086      	sub	sp, #24
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	460b      	mov	r3, r1
 8003090:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003092:	7afb      	ldrb	r3, [r7, #11]
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	3338      	adds	r3, #56	; 0x38
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	3304      	adds	r3, #4
 80030a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2200      	movs	r2, #0
 80030ba:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2201      	movs	r2, #1
 80030c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c2:	7afb      	ldrb	r3, [r7, #11]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d102      	bne.n	80030dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030dc:	7afb      	ldrb	r3, [r7, #11]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	6979      	ldr	r1, [r7, #20]
 80030f4:	f002 fcb8 	bl	8005a68 <USB_EP0StartXfer>
 80030f8:	e008      	b.n	800310c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	6979      	ldr	r1, [r7, #20]
 8003108:	f002 fa66 	bl	80055d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	f003 020f 	and.w	r2, r3, #15
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	429a      	cmp	r2, r3
 800312e:	d901      	bls.n	8003134 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e050      	b.n	80031d6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003138:	2b00      	cmp	r3, #0
 800313a:	da0f      	bge.n	800315c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	f003 020f 	and.w	r2, r3, #15
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	3338      	adds	r3, #56	; 0x38
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	4413      	add	r3, r2
 8003150:	3304      	adds	r3, #4
 8003152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	705a      	strb	r2, [r3, #1]
 800315a:	e00d      	b.n	8003178 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4413      	add	r3, r2
 800316e:	3304      	adds	r3, #4
 8003170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	b2da      	uxtb	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_PCD_EP_SetStall+0x82>
 8003194:	2302      	movs	r3, #2
 8003196:	e01e      	b.n	80031d6 <HAL_PCD_EP_SetStall+0xc0>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68f9      	ldr	r1, [r7, #12]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f002 fef6 	bl	8005f98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10a      	bne.n	80031cc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	b2d9      	uxtb	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031c6:	461a      	mov	r2, r3
 80031c8:	f003 f8e6 	bl	8006398 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	460b      	mov	r3, r1
 80031e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	f003 020f 	and.w	r2, r3, #15
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d901      	bls.n	80031fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e042      	b.n	8003282 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003200:	2b00      	cmp	r3, #0
 8003202:	da0f      	bge.n	8003224 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	f003 020f 	and.w	r2, r3, #15
 800320a:	4613      	mov	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	3338      	adds	r3, #56	; 0x38
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	3304      	adds	r3, #4
 800321a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2201      	movs	r2, #1
 8003220:	705a      	strb	r2, [r3, #1]
 8003222:	e00f      	b.n	8003244 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 020f 	and.w	r2, r3, #15
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	3304      	adds	r3, #4
 800323c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	b2da      	uxtb	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_PCD_EP_ClrStall+0x86>
 8003260:	2302      	movs	r3, #2
 8003262:	e00e      	b.n	8003282 <HAL_PCD_EP_ClrStall+0xa4>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68f9      	ldr	r1, [r7, #12]
 8003272:	4618      	mov	r0, r3
 8003274:	f002 fefe 	bl	8006074 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003296:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800329a:	2b00      	cmp	r3, #0
 800329c:	da0c      	bge.n	80032b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	f003 020f 	and.w	r2, r3, #15
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	3338      	adds	r3, #56	; 0x38
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	3304      	adds	r3, #4
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	e00c      	b.n	80032d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	f003 020f 	and.w	r2, r3, #15
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	3304      	adds	r3, #4
 80032d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68f9      	ldr	r1, [r7, #12]
 80032d8:	4618      	mov	r0, r3
 80032da:	f002 fd1d 	bl	8005d18 <USB_EPStopXfer>
 80032de:	4603      	mov	r3, r0
 80032e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032e2:	7afb      	ldrb	r3, [r7, #11]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08a      	sub	sp, #40	; 0x28
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	4613      	mov	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	3338      	adds	r3, #56	; 0x38
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	4413      	add	r3, r2
 8003310:	3304      	adds	r3, #4
 8003312:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a1a      	ldr	r2, [r3, #32]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	429a      	cmp	r2, r3
 800331e:	d901      	bls.n	8003324 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e06c      	b.n	80033fe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	429a      	cmp	r2, r3
 8003338:	d902      	bls.n	8003340 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	3303      	adds	r3, #3
 8003344:	089b      	lsrs	r3, r3, #2
 8003346:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003348:	e02b      	b.n	80033a2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	429a      	cmp	r2, r3
 800335e:	d902      	bls.n	8003366 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3303      	adds	r3, #3
 800336a:	089b      	lsrs	r3, r3, #2
 800336c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6919      	ldr	r1, [r3, #16]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800337e:	b2db      	uxtb	r3, r3
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	4603      	mov	r3, r0
 8003384:	6978      	ldr	r0, [r7, #20]
 8003386:	f002 fd71 	bl	8005e6c <USB_WritePacket>

    ep->xfer_buff  += len;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	441a      	add	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a1a      	ldr	r2, [r3, #32]
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	441a      	add	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d809      	bhi.n	80033cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a1a      	ldr	r2, [r3, #32]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d203      	bcs.n	80033cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1be      	bne.n	800334a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	699a      	ldr	r2, [r3, #24]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d811      	bhi.n	80033fc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	2201      	movs	r2, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	6939      	ldr	r1, [r7, #16]
 80033f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033f8:	4013      	ands	r3, r2
 80033fa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3720      	adds	r7, #32
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	333c      	adds	r3, #60	; 0x3c
 8003420:	3304      	adds	r3, #4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d17b      	bne.n	8003536 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d015      	beq.n	8003474 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	4a61      	ldr	r2, [pc, #388]	; (80035d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	f240 80b9 	bls.w	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80b3 	beq.w	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346a:	461a      	mov	r2, r3
 800346c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003470:	6093      	str	r3, [r2, #8]
 8003472:	e0a7      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	4413      	add	r3, r2
 8003486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348a:	461a      	mov	r2, r3
 800348c:	2320      	movs	r3, #32
 800348e:	6093      	str	r3, [r2, #8]
 8003490:	e098      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003498:	2b00      	cmp	r3, #0
 800349a:	f040 8093 	bne.w	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	4a4b      	ldr	r2, [pc, #300]	; (80035d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d90f      	bls.n	80034c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034bc:	461a      	mov	r2, r3
 80034be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034c2:	6093      	str	r3, [r2, #8]
 80034c4:	e07e      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	4413      	add	r3, r2
 80034d8:	3304      	adds	r3, #4
 80034da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	69da      	ldr	r2, [r3, #28]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	0159      	lsls	r1, r3, #5
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	440b      	add	r3, r1
 80034e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f2:	1ad2      	subs	r2, r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d114      	bne.n	8003528 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003510:	461a      	mov	r2, r3
 8003512:	2101      	movs	r1, #1
 8003514:	f002 ff40 	bl	8006398 <USB_EP0_OutStart>
 8003518:	e006      	b.n	8003528 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	441a      	add	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	4619      	mov	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f005 f98c 	bl	800884c <HAL_PCD_DataOutStageCallback>
 8003534:	e046      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	4a26      	ldr	r2, [pc, #152]	; (80035d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d124      	bne.n	8003588 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003554:	461a      	mov	r2, r3
 8003556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800355a:	6093      	str	r3, [r2, #8]
 800355c:	e032      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003574:	461a      	mov	r2, r3
 8003576:	2320      	movs	r3, #32
 8003578:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	4619      	mov	r1, r3
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f005 f963 	bl	800884c <HAL_PCD_DataOutStageCallback>
 8003586:	e01d      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d114      	bne.n	80035b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d108      	bne.n	80035b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035b0:	461a      	mov	r2, r3
 80035b2:	2100      	movs	r1, #0
 80035b4:	f002 fef0 	bl	8006398 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f005 f944 	bl	800884c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	4f54300a 	.word	0x4f54300a
 80035d4:	4f54310a 	.word	0x4f54310a

080035d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	333c      	adds	r3, #60	; 0x3c
 80035f0:	3304      	adds	r3, #4
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4a15      	ldr	r2, [pc, #84]	; (8003660 <PCD_EP_OutSetupPacket_int+0x88>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d90e      	bls.n	800362c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4413      	add	r3, r2
 8003620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003624:	461a      	mov	r2, r3
 8003626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800362a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f005 f8fb 	bl	8008828 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4a0a      	ldr	r2, [pc, #40]	; (8003660 <PCD_EP_OutSetupPacket_int+0x88>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d90c      	bls.n	8003654 <PCD_EP_OutSetupPacket_int+0x7c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d108      	bne.n	8003654 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800364c:	461a      	mov	r2, r3
 800364e:	2101      	movs	r1, #1
 8003650:	f002 fea2 	bl	8006398 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	4f54300a 	.word	0x4f54300a

08003664 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	70fb      	strb	r3, [r7, #3]
 8003670:	4613      	mov	r3, r2
 8003672:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d107      	bne.n	8003692 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003682:	883b      	ldrh	r3, [r7, #0]
 8003684:	0419      	lsls	r1, r3, #16
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	430a      	orrs	r2, r1
 800368e:	629a      	str	r2, [r3, #40]	; 0x28
 8003690:	e028      	b.n	80036e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	4413      	add	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036a0:	2300      	movs	r3, #0
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	e00d      	b.n	80036c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	3340      	adds	r3, #64	; 0x40
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	4413      	add	r3, r2
 80036ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	3301      	adds	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
 80036c2:	7bfa      	ldrb	r2, [r7, #15]
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d3ec      	bcc.n	80036a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036cc:	883b      	ldrh	r3, [r7, #0]
 80036ce:	0418      	lsls	r0, r3, #16
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6819      	ldr	r1, [r3, #0]
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	4302      	orrs	r2, r0
 80036dc:	3340      	adds	r3, #64	; 0x40
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	887a      	ldrh	r2, [r7, #2]
 8003704:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e267      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d075      	beq.n	8003836 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800374a:	4b88      	ldr	r3, [pc, #544]	; (800396c <HAL_RCC_OscConfig+0x240>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b04      	cmp	r3, #4
 8003754:	d00c      	beq.n	8003770 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003756:	4b85      	ldr	r3, [pc, #532]	; (800396c <HAL_RCC_OscConfig+0x240>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800375e:	2b08      	cmp	r3, #8
 8003760:	d112      	bne.n	8003788 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003762:	4b82      	ldr	r3, [pc, #520]	; (800396c <HAL_RCC_OscConfig+0x240>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800376e:	d10b      	bne.n	8003788 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003770:	4b7e      	ldr	r3, [pc, #504]	; (800396c <HAL_RCC_OscConfig+0x240>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d05b      	beq.n	8003834 <HAL_RCC_OscConfig+0x108>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d157      	bne.n	8003834 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e242      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003790:	d106      	bne.n	80037a0 <HAL_RCC_OscConfig+0x74>
 8003792:	4b76      	ldr	r3, [pc, #472]	; (800396c <HAL_RCC_OscConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a75      	ldr	r2, [pc, #468]	; (800396c <HAL_RCC_OscConfig+0x240>)
 8003798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e01d      	b.n	80037dc <HAL_RCC_OscConfig+0xb0>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x98>
 80037aa:	4b70      	ldr	r3, [pc, #448]	; (800396c <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a6f      	ldr	r2, [pc, #444]	; (800396c <HAL_RCC_OscConfig+0x240>)
 80037b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b6d      	ldr	r3, [pc, #436]	; (800396c <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a6c      	ldr	r2, [pc, #432]	; (800396c <HAL_RCC_OscConfig+0x240>)
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e00b      	b.n	80037dc <HAL_RCC_OscConfig+0xb0>
 80037c4:	4b69      	ldr	r3, [pc, #420]	; (800396c <HAL_RCC_OscConfig+0x240>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a68      	ldr	r2, [pc, #416]	; (800396c <HAL_RCC_OscConfig+0x240>)
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b66      	ldr	r3, [pc, #408]	; (800396c <HAL_RCC_OscConfig+0x240>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a65      	ldr	r2, [pc, #404]	; (800396c <HAL_RCC_OscConfig+0x240>)
 80037d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fd fe16 	bl	8001414 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fd fe12 	bl	8001414 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e207      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	4b5b      	ldr	r3, [pc, #364]	; (800396c <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0xc0>
 800380a:	e014      	b.n	8003836 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fd fe02 	bl	8001414 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003814:	f7fd fdfe 	bl	8001414 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e1f3      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	4b51      	ldr	r3, [pc, #324]	; (800396c <HAL_RCC_OscConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0xe8>
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d063      	beq.n	800390a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003842:	4b4a      	ldr	r3, [pc, #296]	; (800396c <HAL_RCC_OscConfig+0x240>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384e:	4b47      	ldr	r3, [pc, #284]	; (800396c <HAL_RCC_OscConfig+0x240>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003856:	2b08      	cmp	r3, #8
 8003858:	d11c      	bne.n	8003894 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385a:	4b44      	ldr	r3, [pc, #272]	; (800396c <HAL_RCC_OscConfig+0x240>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d116      	bne.n	8003894 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003866:	4b41      	ldr	r3, [pc, #260]	; (800396c <HAL_RCC_OscConfig+0x240>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_RCC_OscConfig+0x152>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d001      	beq.n	800387e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e1c7      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387e:	4b3b      	ldr	r3, [pc, #236]	; (800396c <HAL_RCC_OscConfig+0x240>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4937      	ldr	r1, [pc, #220]	; (800396c <HAL_RCC_OscConfig+0x240>)
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003892:	e03a      	b.n	800390a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800389c:	4b34      	ldr	r3, [pc, #208]	; (8003970 <HAL_RCC_OscConfig+0x244>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fd fdb7 	bl	8001414 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038aa:	f7fd fdb3 	bl	8001414 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e1a8      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038bc:	4b2b      	ldr	r3, [pc, #172]	; (800396c <HAL_RCC_OscConfig+0x240>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c8:	4b28      	ldr	r3, [pc, #160]	; (800396c <HAL_RCC_OscConfig+0x240>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4925      	ldr	r1, [pc, #148]	; (800396c <HAL_RCC_OscConfig+0x240>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]
 80038dc:	e015      	b.n	800390a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038de:	4b24      	ldr	r3, [pc, #144]	; (8003970 <HAL_RCC_OscConfig+0x244>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fd fd96 	bl	8001414 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ec:	f7fd fd92 	bl	8001414 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e187      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	4b1b      	ldr	r3, [pc, #108]	; (800396c <HAL_RCC_OscConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d036      	beq.n	8003984 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d016      	beq.n	800394c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391e:	4b15      	ldr	r3, [pc, #84]	; (8003974 <HAL_RCC_OscConfig+0x248>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fd fd76 	bl	8001414 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392c:	f7fd fd72 	bl	8001414 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e167      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_RCC_OscConfig+0x240>)
 8003940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x200>
 800394a:	e01b      	b.n	8003984 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800394c:	4b09      	ldr	r3, [pc, #36]	; (8003974 <HAL_RCC_OscConfig+0x248>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003952:	f7fd fd5f 	bl	8001414 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	e00e      	b.n	8003978 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800395a:	f7fd fd5b 	bl	8001414 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d907      	bls.n	8003978 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e150      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
 800396c:	40023800 	.word	0x40023800
 8003970:	42470000 	.word	0x42470000
 8003974:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003978:	4b88      	ldr	r3, [pc, #544]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 800397a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1ea      	bne.n	800395a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 8097 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003992:	2300      	movs	r3, #0
 8003994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003996:	4b81      	ldr	r3, [pc, #516]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10f      	bne.n	80039c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	4b7d      	ldr	r3, [pc, #500]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	4a7c      	ldr	r2, [pc, #496]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 80039ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b0:	6413      	str	r3, [r2, #64]	; 0x40
 80039b2:	4b7a      	ldr	r3, [pc, #488]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039be:	2301      	movs	r3, #1
 80039c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c2:	4b77      	ldr	r3, [pc, #476]	; (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d118      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ce:	4b74      	ldr	r3, [pc, #464]	; (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a73      	ldr	r2, [pc, #460]	; (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039da:	f7fd fd1b 	bl	8001414 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e2:	f7fd fd17 	bl	8001414 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e10c      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f4:	4b6a      	ldr	r3, [pc, #424]	; (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_OscConfig+0x2ea>
 8003a08:	4b64      	ldr	r3, [pc, #400]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0c:	4a63      	ldr	r2, [pc, #396]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6713      	str	r3, [r2, #112]	; 0x70
 8003a14:	e01c      	b.n	8003a50 <HAL_RCC_OscConfig+0x324>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b05      	cmp	r3, #5
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x30c>
 8003a1e:	4b5f      	ldr	r3, [pc, #380]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	4a5e      	ldr	r2, [pc, #376]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a24:	f043 0304 	orr.w	r3, r3, #4
 8003a28:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2a:	4b5c      	ldr	r3, [pc, #368]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	4a5b      	ldr	r2, [pc, #364]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6713      	str	r3, [r2, #112]	; 0x70
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0x324>
 8003a38:	4b58      	ldr	r3, [pc, #352]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	4a57      	ldr	r2, [pc, #348]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	6713      	str	r3, [r2, #112]	; 0x70
 8003a44:	4b55      	ldr	r3, [pc, #340]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	4a54      	ldr	r2, [pc, #336]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a4a:	f023 0304 	bic.w	r3, r3, #4
 8003a4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d015      	beq.n	8003a84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7fd fcdc 	bl	8001414 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fd fcd8 	bl	8001414 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e0cb      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a76:	4b49      	ldr	r3, [pc, #292]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0ee      	beq.n	8003a60 <HAL_RCC_OscConfig+0x334>
 8003a82:	e014      	b.n	8003aae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a84:	f7fd fcc6 	bl	8001414 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a8c:	f7fd fcc2 	bl	8001414 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e0b5      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa2:	4b3e      	ldr	r3, [pc, #248]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1ee      	bne.n	8003a8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d105      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab4:	4b39      	ldr	r3, [pc, #228]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	4a38      	ldr	r2, [pc, #224]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003abe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80a1 	beq.w	8003c0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aca:	4b34      	ldr	r3, [pc, #208]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d05c      	beq.n	8003b90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d141      	bne.n	8003b62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ade:	4b31      	ldr	r3, [pc, #196]	; (8003ba4 <HAL_RCC_OscConfig+0x478>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fc96 	bl	8001414 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aec:	f7fd fc92 	bl	8001414 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e087      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afe:	4b27      	ldr	r3, [pc, #156]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69da      	ldr	r2, [r3, #28]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	019b      	lsls	r3, r3, #6
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	085b      	lsrs	r3, r3, #1
 8003b22:	3b01      	subs	r3, #1
 8003b24:	041b      	lsls	r3, r3, #16
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	061b      	lsls	r3, r3, #24
 8003b2e:	491b      	ldr	r1, [pc, #108]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b34:	4b1b      	ldr	r3, [pc, #108]	; (8003ba4 <HAL_RCC_OscConfig+0x478>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3a:	f7fd fc6b 	bl	8001414 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b42:	f7fd fc67 	bl	8001414 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e05c      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b54:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f0      	beq.n	8003b42 <HAL_RCC_OscConfig+0x416>
 8003b60:	e054      	b.n	8003c0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b62:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <HAL_RCC_OscConfig+0x478>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fd fc54 	bl	8001414 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b70:	f7fd fc50 	bl	8001414 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e045      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x444>
 8003b8e:	e03d      	b.n	8003c0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d107      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e038      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	40007000 	.word	0x40007000
 8003ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ba8:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <HAL_RCC_OscConfig+0x4ec>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d028      	beq.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d121      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d11a      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bd8:	4013      	ands	r3, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d111      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023800 	.word	0x40023800

08003c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0cc      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c30:	4b68      	ldr	r3, [pc, #416]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d90c      	bls.n	8003c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b65      	ldr	r3, [pc, #404]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b63      	ldr	r3, [pc, #396]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0b8      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d020      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c70:	4b59      	ldr	r3, [pc, #356]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	4a58      	ldr	r2, [pc, #352]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c88:	4b53      	ldr	r3, [pc, #332]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4a52      	ldr	r2, [pc, #328]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b50      	ldr	r3, [pc, #320]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	494d      	ldr	r1, [pc, #308]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d044      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d119      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e07f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d003      	beq.n	8003cda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cda:	4b3f      	ldr	r3, [pc, #252]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e06f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cea:	4b3b      	ldr	r3, [pc, #236]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e067      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cfa:	4b37      	ldr	r3, [pc, #220]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f023 0203 	bic.w	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4934      	ldr	r1, [pc, #208]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d0c:	f7fd fb82 	bl	8001414 <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d14:	f7fd fb7e 	bl	8001414 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e04f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2a:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 020c 	and.w	r2, r3, #12
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d1eb      	bne.n	8003d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d3c:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d20c      	bcs.n	8003d64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4a:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d52:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e032      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d70:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4916      	ldr	r1, [pc, #88]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d8e:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	490e      	ldr	r1, [pc, #56]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003da2:	f000 f82d 	bl	8003e00 <HAL_RCC_GetSysClockFreq>
 8003da6:	4602      	mov	r2, r0
 8003da8:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	490a      	ldr	r1, [pc, #40]	; (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003db4:	5ccb      	ldrb	r3, [r1, r3]
 8003db6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dba:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fd fae2 	bl	800138c <HAL_InitTick>

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023c00 	.word	0x40023c00
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	08009c2c 	.word	0x08009c2c
 8003de0:	20000014 	.word	0x20000014
 8003de4:	20000018 	.word	0x20000018

08003de8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003dec:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <HAL_RCC_EnableCSS+0x14>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
}
 8003df2:	bf00      	nop
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	4247004c 	.word	0x4247004c

08003e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e04:	b090      	sub	sp, #64	; 0x40
 8003e06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e10:	2300      	movs	r3, #0
 8003e12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e18:	4b59      	ldr	r3, [pc, #356]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 030c 	and.w	r3, r3, #12
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d00d      	beq.n	8003e40 <HAL_RCC_GetSysClockFreq+0x40>
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	f200 80a1 	bhi.w	8003f6c <HAL_RCC_GetSysClockFreq+0x16c>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_RCC_GetSysClockFreq+0x34>
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d003      	beq.n	8003e3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e32:	e09b      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e34:	4b53      	ldr	r3, [pc, #332]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e36:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003e38:	e09b      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e3a:	4b53      	ldr	r3, [pc, #332]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e3e:	e098      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e40:	4b4f      	ldr	r3, [pc, #316]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e48:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e4a:	4b4d      	ldr	r3, [pc, #308]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d028      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e56:	4b4a      	ldr	r3, [pc, #296]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	099b      	lsrs	r3, r3, #6
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	623b      	str	r3, [r7, #32]
 8003e60:	627a      	str	r2, [r7, #36]	; 0x24
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e68:	2100      	movs	r1, #0
 8003e6a:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e6c:	fb03 f201 	mul.w	r2, r3, r1
 8003e70:	2300      	movs	r3, #0
 8003e72:	fb00 f303 	mul.w	r3, r0, r3
 8003e76:	4413      	add	r3, r2
 8003e78:	4a43      	ldr	r2, [pc, #268]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e7a:	fba0 1202 	umull	r1, r2, r0, r2
 8003e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e80:	460a      	mov	r2, r1
 8003e82:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e86:	4413      	add	r3, r2
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	61fa      	str	r2, [r7, #28]
 8003e92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e9a:	f7fc f99d 	bl	80001d8 <__aeabi_uldivmod>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ea6:	e053      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea8:	4b35      	ldr	r3, [pc, #212]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	099b      	lsrs	r3, r3, #6
 8003eae:	2200      	movs	r2, #0
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	617a      	str	r2, [r7, #20]
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003eba:	f04f 0b00 	mov.w	fp, #0
 8003ebe:	4652      	mov	r2, sl
 8003ec0:	465b      	mov	r3, fp
 8003ec2:	f04f 0000 	mov.w	r0, #0
 8003ec6:	f04f 0100 	mov.w	r1, #0
 8003eca:	0159      	lsls	r1, r3, #5
 8003ecc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ed0:	0150      	lsls	r0, r2, #5
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	ebb2 080a 	subs.w	r8, r2, sl
 8003eda:	eb63 090b 	sbc.w	r9, r3, fp
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003eea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003eee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ef2:	ebb2 0408 	subs.w	r4, r2, r8
 8003ef6:	eb63 0509 	sbc.w	r5, r3, r9
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	00eb      	lsls	r3, r5, #3
 8003f04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f08:	00e2      	lsls	r2, r4, #3
 8003f0a:	4614      	mov	r4, r2
 8003f0c:	461d      	mov	r5, r3
 8003f0e:	eb14 030a 	adds.w	r3, r4, sl
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	eb45 030b 	adc.w	r3, r5, fp
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f26:	4629      	mov	r1, r5
 8003f28:	028b      	lsls	r3, r1, #10
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f30:	4621      	mov	r1, r4
 8003f32:	028a      	lsls	r2, r1, #10
 8003f34:	4610      	mov	r0, r2
 8003f36:	4619      	mov	r1, r3
 8003f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	60fa      	str	r2, [r7, #12]
 8003f40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f44:	f7fc f948 	bl	80001d8 <__aeabi_uldivmod>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f6a:	e002      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3740      	adds	r7, #64	; 0x40
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800
 8003f84:	00f42400 	.word	0x00f42400
 8003f88:	017d7840 	.word	0x017d7840

08003f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f90:	4b03      	ldr	r3, [pc, #12]	; (8003fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f92:	681b      	ldr	r3, [r3, #0]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20000014 	.word	0x20000014

08003fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fa8:	f7ff fff0 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8003fac:	4602      	mov	r2, r0
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	0a9b      	lsrs	r3, r3, #10
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	4903      	ldr	r1, [pc, #12]	; (8003fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fba:	5ccb      	ldrb	r3, [r1, r3]
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	08009c3c 	.word	0x08009c3c

08003fcc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <HAL_RCC_NMI_IRQHandler+0x20>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd8:	2b80      	cmp	r3, #128	; 0x80
 8003fda:	d104      	bne.n	8003fe6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003fdc:	f000 f80a 	bl	8003ff4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003fe2:	2280      	movs	r2, #128	; 0x80
 8003fe4:	701a      	strb	r2, [r3, #0]
  }
}
 8003fe6:	bf00      	nop
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	4002380e 	.word	0x4002380e

08003ff4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
	...

08004004 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d105      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004028:	2b00      	cmp	r3, #0
 800402a:	d038      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800402c:	4b68      	ldr	r3, [pc, #416]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004032:	f7fd f9ef 	bl	8001414 <HAL_GetTick>
 8004036:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004038:	e008      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800403a:	f7fd f9eb 	bl	8001414 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e0bd      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800404c:	4b61      	ldr	r3, [pc, #388]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f0      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	019b      	lsls	r3, r3, #6
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	071b      	lsls	r3, r3, #28
 800406a:	495a      	ldr	r1, [pc, #360]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004072:	4b57      	ldr	r3, [pc, #348]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004074:	2201      	movs	r2, #1
 8004076:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004078:	f7fd f9cc 	bl	8001414 <HAL_GetTick>
 800407c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004080:	f7fd f9c8 	bl	8001414 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e09a      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004092:	4b50      	ldr	r3, [pc, #320]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8083 	beq.w	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	4b48      	ldr	r3, [pc, #288]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	4a47      	ldr	r2, [pc, #284]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ba:	6413      	str	r3, [r2, #64]	; 0x40
 80040bc:	4b45      	ldr	r3, [pc, #276]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80040c8:	4b43      	ldr	r3, [pc, #268]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a42      	ldr	r2, [pc, #264]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040d4:	f7fd f99e 	bl	8001414 <HAL_GetTick>
 80040d8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040dc:	f7fd f99a 	bl	8001414 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e06c      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040ee:	4b3a      	ldr	r3, [pc, #232]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040fa:	4b36      	ldr	r3, [pc, #216]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004102:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d02f      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	429a      	cmp	r2, r3
 8004116:	d028      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004118:	4b2e      	ldr	r3, [pc, #184]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004120:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004122:	4b2e      	ldr	r3, [pc, #184]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004128:	4b2c      	ldr	r3, [pc, #176]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800412e:	4a29      	ldr	r2, [pc, #164]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004134:	4b27      	ldr	r3, [pc, #156]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b01      	cmp	r3, #1
 800413e:	d114      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004140:	f7fd f968 	bl	8001414 <HAL_GetTick>
 8004144:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004146:	e00a      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004148:	f7fd f964 	bl	8001414 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	; 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e034      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800415e:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0ee      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004176:	d10d      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004178:	4b16      	ldr	r3, [pc, #88]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418c:	4911      	ldr	r1, [pc, #68]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
 8004192:	e005      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004194:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4a0e      	ldr	r2, [pc, #56]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800419e:	6093      	str	r3, [r2, #8]
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ac:	4909      	ldr	r1, [pc, #36]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	7d1a      	ldrb	r2, [r3, #20]
 80041c2:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80041c4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	42470068 	.word	0x42470068
 80041d4:	40023800 	.word	0x40023800
 80041d8:	40007000 	.word	0x40007000
 80041dc:	42470e40 	.word	0x42470e40
 80041e0:	424711e0 	.word	0x424711e0

080041e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e066      	b.n	80042c8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	7f5b      	ldrb	r3, [r3, #29]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d105      	bne.n	8004210 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fc fb44 	bl	8000898 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	22ca      	movs	r2, #202	; 0xca
 800421c:	625a      	str	r2, [r3, #36]	; 0x24
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2253      	movs	r2, #83	; 0x53
 8004224:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f87a 	bl	8004320 <RTC_EnterInitMode>
 800422c:	4603      	mov	r3, r0
 800422e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d12c      	bne.n	8004290 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004248:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6899      	ldr	r1, [r3, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	68d2      	ldr	r2, [r2, #12]
 8004270:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6919      	ldr	r1, [r3, #16]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	041a      	lsls	r2, r3, #16
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f881 	bl	800438e <RTC_ExitInitMode>
 800428c:	4603      	mov	r3, r0
 800428e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d113      	bne.n	80042be <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042a4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699a      	ldr	r2, [r3, #24]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	22ff      	movs	r2, #255	; 0xff
 80042c4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042ea:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042ec:	f7fd f892 	bl	8001414 <HAL_GetTick>
 80042f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042f2:	e009      	b.n	8004308 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042f4:	f7fd f88e 	bl	8001414 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004302:	d901      	bls.n	8004308 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e007      	b.n	8004318 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0ee      	beq.n	80042f4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d122      	bne.n	8004384 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800434c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800434e:	f7fd f861 	bl	8001414 <HAL_GetTick>
 8004352:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004354:	e00c      	b.n	8004370 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004356:	f7fd f85d 	bl	8001414 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004364:	d904      	bls.n	8004370 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2204      	movs	r2, #4
 800436a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437a:	2b00      	cmp	r3, #0
 800437c:	d102      	bne.n	8004384 <RTC_EnterInitMode+0x64>
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d1e8      	bne.n	8004356 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004384:	7bfb      	ldrb	r3, [r7, #15]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043a8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10a      	bne.n	80043ce <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff ff89 	bl	80042d0 <HAL_RTC_WaitForSynchro>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2204      	movs	r2, #4
 80043c8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e07b      	b.n	80044e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d108      	bne.n	8004404 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043fa:	d009      	beq.n	8004410 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	61da      	str	r2, [r3, #28]
 8004402:	e005      	b.n	8004410 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fc fa96 	bl	800095c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004446:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004494:	ea42 0103 	orr.w	r1, r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	f003 0104 	and.w	r1, r3, #4
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	f003 0210 	and.w	r2, r3, #16
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b088      	sub	sp, #32
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	603b      	str	r3, [r7, #0]
 80044f6:	4613      	mov	r3, r2
 80044f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_SPI_Transmit+0x22>
 8004508:	2302      	movs	r3, #2
 800450a:	e126      	b.n	800475a <HAL_SPI_Transmit+0x270>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004514:	f7fc ff7e 	bl	8001414 <HAL_GetTick>
 8004518:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b01      	cmp	r3, #1
 8004528:	d002      	beq.n	8004530 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800452a:	2302      	movs	r3, #2
 800452c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800452e:	e10b      	b.n	8004748 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <HAL_SPI_Transmit+0x52>
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d102      	bne.n	8004542 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004540:	e102      	b.n	8004748 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2203      	movs	r2, #3
 8004546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	88fa      	ldrh	r2, [r7, #6]
 800455a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	88fa      	ldrh	r2, [r7, #6]
 8004560:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004588:	d10f      	bne.n	80045aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004598:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d007      	beq.n	80045c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d0:	d14b      	bne.n	800466a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_SPI_Transmit+0xf6>
 80045da:	8afb      	ldrh	r3, [r7, #22]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d13e      	bne.n	800465e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	881a      	ldrh	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	1c9a      	adds	r2, r3, #2
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004604:	e02b      	b.n	800465e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b02      	cmp	r3, #2
 8004612:	d112      	bne.n	800463a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	881a      	ldrh	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	1c9a      	adds	r2, r3, #2
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	86da      	strh	r2, [r3, #54]	; 0x36
 8004638:	e011      	b.n	800465e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800463a:	f7fc feeb 	bl	8001414 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d803      	bhi.n	8004652 <HAL_SPI_Transmit+0x168>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004650:	d102      	bne.n	8004658 <HAL_SPI_Transmit+0x16e>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d102      	bne.n	800465e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800465c:	e074      	b.n	8004748 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1ce      	bne.n	8004606 <HAL_SPI_Transmit+0x11c>
 8004668:	e04c      	b.n	8004704 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <HAL_SPI_Transmit+0x18e>
 8004672:	8afb      	ldrh	r3, [r7, #22]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d140      	bne.n	80046fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	330c      	adds	r3, #12
 8004682:	7812      	ldrb	r2, [r2, #0]
 8004684:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800469e:	e02c      	b.n	80046fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d113      	bne.n	80046d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	330c      	adds	r3, #12
 80046b8:	7812      	ldrb	r2, [r2, #0]
 80046ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80046d4:	e011      	b.n	80046fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046d6:	f7fc fe9d 	bl	8001414 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d803      	bhi.n	80046ee <HAL_SPI_Transmit+0x204>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ec:	d102      	bne.n	80046f4 <HAL_SPI_Transmit+0x20a>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d102      	bne.n	80046fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046f8:	e026      	b.n	8004748 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1cd      	bne.n	80046a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	6839      	ldr	r1, [r7, #0]
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f8b3 	bl	8004874 <SPI_EndRxTxTransaction>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004722:	2300      	movs	r3, #0
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	77fb      	strb	r3, [r7, #31]
 8004744:	e000      	b.n	8004748 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004746:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004758:	7ffb      	ldrb	r3, [r7, #31]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	4613      	mov	r3, r2
 8004772:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004774:	f7fc fe4e 	bl	8001414 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	1a9b      	subs	r3, r3, r2
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	4413      	add	r3, r2
 8004782:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004784:	f7fc fe46 	bl	8001414 <HAL_GetTick>
 8004788:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800478a:	4b39      	ldr	r3, [pc, #228]	; (8004870 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	015b      	lsls	r3, r3, #5
 8004790:	0d1b      	lsrs	r3, r3, #20
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	fb02 f303 	mul.w	r3, r2, r3
 8004798:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800479a:	e054      	b.n	8004846 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a2:	d050      	beq.n	8004846 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047a4:	f7fc fe36 	bl	8001414 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d902      	bls.n	80047ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d13d      	bne.n	8004836 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d2:	d111      	bne.n	80047f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047dc:	d004      	beq.n	80047e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e6:	d107      	bne.n	80047f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004800:	d10f      	bne.n	8004822 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004820:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e017      	b.n	8004866 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	3b01      	subs	r3, #1
 8004844:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4013      	ands	r3, r2
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	429a      	cmp	r2, r3
 8004854:	bf0c      	ite	eq
 8004856:	2301      	moveq	r3, #1
 8004858:	2300      	movne	r3, #0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	461a      	mov	r2, r3
 800485e:	79fb      	ldrb	r3, [r7, #7]
 8004860:	429a      	cmp	r2, r3
 8004862:	d19b      	bne.n	800479c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3720      	adds	r7, #32
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000014 	.word	0x20000014

08004874 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af02      	add	r7, sp, #8
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004880:	4b1b      	ldr	r3, [pc, #108]	; (80048f0 <SPI_EndRxTxTransaction+0x7c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a1b      	ldr	r2, [pc, #108]	; (80048f4 <SPI_EndRxTxTransaction+0x80>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	0d5b      	lsrs	r3, r3, #21
 800488c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004890:	fb02 f303 	mul.w	r3, r2, r3
 8004894:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800489e:	d112      	bne.n	80048c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2200      	movs	r2, #0
 80048a8:	2180      	movs	r1, #128	; 0x80
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f7ff ff5a 	bl	8004764 <SPI_WaitFlagStateUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d016      	beq.n	80048e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ba:	f043 0220 	orr.w	r2, r3, #32
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e00f      	b.n	80048e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048dc:	2b80      	cmp	r3, #128	; 0x80
 80048de:	d0f2      	beq.n	80048c6 <SPI_EndRxTxTransaction+0x52>
 80048e0:	e000      	b.n	80048e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80048e2:	bf00      	nop
  }

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000014 	.word	0x20000014
 80048f4:	165e9f81 	.word	0x165e9f81

080048f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e097      	b.n	8004a3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d106      	bne.n	8004926 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7fc fca1 	bl	8001268 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800493c:	f023 0307 	bic.w	r3, r3, #7
 8004940:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3304      	adds	r3, #4
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f000 f879 	bl	8004a44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497a:	f023 0303 	bic.w	r3, r3, #3
 800497e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	4313      	orrs	r3, r2
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004998:	f023 030c 	bic.w	r3, r3, #12
 800499c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	4313      	orrs	r3, r2
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	011a      	lsls	r2, r3, #4
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	031b      	lsls	r3, r3, #12
 80049c8:	4313      	orrs	r3, r2
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80049d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80049de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	4313      	orrs	r3, r2
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a34      	ldr	r2, [pc, #208]	; (8004b28 <TIM_Base_SetConfig+0xe4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00f      	beq.n	8004a7c <TIM_Base_SetConfig+0x38>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a62:	d00b      	beq.n	8004a7c <TIM_Base_SetConfig+0x38>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a31      	ldr	r2, [pc, #196]	; (8004b2c <TIM_Base_SetConfig+0xe8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d007      	beq.n	8004a7c <TIM_Base_SetConfig+0x38>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a30      	ldr	r2, [pc, #192]	; (8004b30 <TIM_Base_SetConfig+0xec>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d003      	beq.n	8004a7c <TIM_Base_SetConfig+0x38>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a2f      	ldr	r2, [pc, #188]	; (8004b34 <TIM_Base_SetConfig+0xf0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d108      	bne.n	8004a8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a25      	ldr	r2, [pc, #148]	; (8004b28 <TIM_Base_SetConfig+0xe4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d01b      	beq.n	8004ace <TIM_Base_SetConfig+0x8a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a9c:	d017      	beq.n	8004ace <TIM_Base_SetConfig+0x8a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a22      	ldr	r2, [pc, #136]	; (8004b2c <TIM_Base_SetConfig+0xe8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d013      	beq.n	8004ace <TIM_Base_SetConfig+0x8a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a21      	ldr	r2, [pc, #132]	; (8004b30 <TIM_Base_SetConfig+0xec>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00f      	beq.n	8004ace <TIM_Base_SetConfig+0x8a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a20      	ldr	r2, [pc, #128]	; (8004b34 <TIM_Base_SetConfig+0xf0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00b      	beq.n	8004ace <TIM_Base_SetConfig+0x8a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a1f      	ldr	r2, [pc, #124]	; (8004b38 <TIM_Base_SetConfig+0xf4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d007      	beq.n	8004ace <TIM_Base_SetConfig+0x8a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a1e      	ldr	r2, [pc, #120]	; (8004b3c <TIM_Base_SetConfig+0xf8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d003      	beq.n	8004ace <TIM_Base_SetConfig+0x8a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a1d      	ldr	r2, [pc, #116]	; (8004b40 <TIM_Base_SetConfig+0xfc>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d108      	bne.n	8004ae0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a08      	ldr	r2, [pc, #32]	; (8004b28 <TIM_Base_SetConfig+0xe4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d103      	bne.n	8004b14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	615a      	str	r2, [r3, #20]
}
 8004b1a:	bf00      	nop
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40010000 	.word	0x40010000
 8004b2c:	40000400 	.word	0x40000400
 8004b30:	40000800 	.word	0x40000800
 8004b34:	40000c00 	.word	0x40000c00
 8004b38:	40014000 	.word	0x40014000
 8004b3c:	40014400 	.word	0x40014400
 8004b40:	40014800 	.word	0x40014800

08004b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e050      	b.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1c      	ldr	r2, [pc, #112]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d018      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba8:	d013      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a18      	ldr	r2, [pc, #96]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00e      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a16      	ldr	r2, [pc, #88]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d009      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a15      	ldr	r2, [pc, #84]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d004      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a13      	ldr	r2, [pc, #76]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d10c      	bne.n	8004bec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40010000 	.word	0x40010000
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40000800 	.word	0x40000800
 8004c18:	40000c00 	.word	0x40000c00
 8004c1c:	40014000 	.word	0x40014000

08004c20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c20:	b084      	sub	sp, #16
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	f107 001c 	add.w	r0, r7, #28
 8004c2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d122      	bne.n	8004c7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d105      	bne.n	8004c72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f001 fbee 	bl	8006454 <USB_CoreReset>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	73fb      	strb	r3, [r7, #15]
 8004c7c:	e01a      	b.n	8004cb4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f001 fbe2 	bl	8006454 <USB_CoreReset>
 8004c90:	4603      	mov	r3, r0
 8004c92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	639a      	str	r2, [r3, #56]	; 0x38
 8004ca6:	e005      	b.n	8004cb4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d10b      	bne.n	8004cd2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f043 0206 	orr.w	r2, r3, #6
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f043 0220 	orr.w	r2, r3, #32
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cde:	b004      	add	sp, #16
 8004ce0:	4770      	bx	lr
	...

08004ce4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d165      	bne.n	8004dc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4a41      	ldr	r2, [pc, #260]	; (8004e00 <USB_SetTurnaroundTime+0x11c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d906      	bls.n	8004d0e <USB_SetTurnaroundTime+0x2a>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4a40      	ldr	r2, [pc, #256]	; (8004e04 <USB_SetTurnaroundTime+0x120>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d202      	bcs.n	8004d0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d08:	230f      	movs	r3, #15
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	e062      	b.n	8004dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	4a3c      	ldr	r2, [pc, #240]	; (8004e04 <USB_SetTurnaroundTime+0x120>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d306      	bcc.n	8004d24 <USB_SetTurnaroundTime+0x40>
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4a3b      	ldr	r2, [pc, #236]	; (8004e08 <USB_SetTurnaroundTime+0x124>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d202      	bcs.n	8004d24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d1e:	230e      	movs	r3, #14
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	e057      	b.n	8004dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4a38      	ldr	r2, [pc, #224]	; (8004e08 <USB_SetTurnaroundTime+0x124>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d306      	bcc.n	8004d3a <USB_SetTurnaroundTime+0x56>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4a37      	ldr	r2, [pc, #220]	; (8004e0c <USB_SetTurnaroundTime+0x128>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d202      	bcs.n	8004d3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d34:	230d      	movs	r3, #13
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	e04c      	b.n	8004dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	4a33      	ldr	r2, [pc, #204]	; (8004e0c <USB_SetTurnaroundTime+0x128>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d306      	bcc.n	8004d50 <USB_SetTurnaroundTime+0x6c>
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	4a32      	ldr	r2, [pc, #200]	; (8004e10 <USB_SetTurnaroundTime+0x12c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d802      	bhi.n	8004d50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d4a:	230c      	movs	r3, #12
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	e041      	b.n	8004dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4a2f      	ldr	r2, [pc, #188]	; (8004e10 <USB_SetTurnaroundTime+0x12c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d906      	bls.n	8004d66 <USB_SetTurnaroundTime+0x82>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4a2e      	ldr	r2, [pc, #184]	; (8004e14 <USB_SetTurnaroundTime+0x130>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d802      	bhi.n	8004d66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d60:	230b      	movs	r3, #11
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	e036      	b.n	8004dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4a2a      	ldr	r2, [pc, #168]	; (8004e14 <USB_SetTurnaroundTime+0x130>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d906      	bls.n	8004d7c <USB_SetTurnaroundTime+0x98>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4a29      	ldr	r2, [pc, #164]	; (8004e18 <USB_SetTurnaroundTime+0x134>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d802      	bhi.n	8004d7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d76:	230a      	movs	r3, #10
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	e02b      	b.n	8004dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4a26      	ldr	r2, [pc, #152]	; (8004e18 <USB_SetTurnaroundTime+0x134>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d906      	bls.n	8004d92 <USB_SetTurnaroundTime+0xae>
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4a25      	ldr	r2, [pc, #148]	; (8004e1c <USB_SetTurnaroundTime+0x138>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d202      	bcs.n	8004d92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d8c:	2309      	movs	r3, #9
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	e020      	b.n	8004dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	4a21      	ldr	r2, [pc, #132]	; (8004e1c <USB_SetTurnaroundTime+0x138>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d306      	bcc.n	8004da8 <USB_SetTurnaroundTime+0xc4>
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4a20      	ldr	r2, [pc, #128]	; (8004e20 <USB_SetTurnaroundTime+0x13c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d802      	bhi.n	8004da8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004da2:	2308      	movs	r3, #8
 8004da4:	617b      	str	r3, [r7, #20]
 8004da6:	e015      	b.n	8004dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4a1d      	ldr	r2, [pc, #116]	; (8004e20 <USB_SetTurnaroundTime+0x13c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d906      	bls.n	8004dbe <USB_SetTurnaroundTime+0xda>
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4a1c      	ldr	r2, [pc, #112]	; (8004e24 <USB_SetTurnaroundTime+0x140>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d202      	bcs.n	8004dbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004db8:	2307      	movs	r3, #7
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	e00a      	b.n	8004dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004dbe:	2306      	movs	r3, #6
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	e007      	b.n	8004dd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d102      	bne.n	8004dd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004dca:	2309      	movs	r3, #9
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	e001      	b.n	8004dd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004dd0:	2309      	movs	r3, #9
 8004dd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	029b      	lsls	r3, r3, #10
 8004de8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004dec:	431a      	orrs	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	371c      	adds	r7, #28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	00d8acbf 	.word	0x00d8acbf
 8004e04:	00e4e1c0 	.word	0x00e4e1c0
 8004e08:	00f42400 	.word	0x00f42400
 8004e0c:	01067380 	.word	0x01067380
 8004e10:	011a499f 	.word	0x011a499f
 8004e14:	01312cff 	.word	0x01312cff
 8004e18:	014ca43f 	.word	0x014ca43f
 8004e1c:	016e3600 	.word	0x016e3600
 8004e20:	01a6ab1f 	.word	0x01a6ab1f
 8004e24:	01e84800 	.word	0x01e84800

08004e28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f043 0201 	orr.w	r2, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f023 0201 	bic.w	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d115      	bne.n	8004eba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e9a:	2001      	movs	r0, #1
 8004e9c:	f7fc fac6 	bl	800142c <HAL_Delay>
      ms++;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f001 fa45 	bl	8006336 <USB_GetMode>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d01e      	beq.n	8004ef0 <USB_SetCurrentMode+0x84>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b31      	cmp	r3, #49	; 0x31
 8004eb6:	d9f0      	bls.n	8004e9a <USB_SetCurrentMode+0x2e>
 8004eb8:	e01a      	b.n	8004ef0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004eba:	78fb      	ldrb	r3, [r7, #3]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d115      	bne.n	8004eec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ecc:	2001      	movs	r0, #1
 8004ece:	f7fc faad 	bl	800142c <HAL_Delay>
      ms++;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f001 fa2c 	bl	8006336 <USB_GetMode>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <USB_SetCurrentMode+0x84>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b31      	cmp	r3, #49	; 0x31
 8004ee8:	d9f0      	bls.n	8004ecc <USB_SetCurrentMode+0x60>
 8004eea:	e001      	b.n	8004ef0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e005      	b.n	8004efc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b32      	cmp	r3, #50	; 0x32
 8004ef4:	d101      	bne.n	8004efa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f04:	b084      	sub	sp, #16
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b086      	sub	sp, #24
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	e009      	b.n	8004f38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	3340      	adds	r3, #64	; 0x40
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	2200      	movs	r2, #0
 8004f30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	3301      	adds	r3, #1
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	2b0e      	cmp	r3, #14
 8004f3c:	d9f2      	bls.n	8004f24 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d11c      	bne.n	8004f7e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f52:	f043 0302 	orr.w	r3, r3, #2
 8004f56:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f68:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f74:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38
 8004f7c:	e00b      	b.n	8004f96 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa8:	4619      	mov	r1, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	680b      	ldr	r3, [r1, #0]
 8004fb4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d10c      	bne.n	8004fd6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d104      	bne.n	8004fcc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f965 	bl	8005294 <USB_SetDevSpeed>
 8004fca:	e008      	b.n	8004fde <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fcc:	2101      	movs	r1, #1
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f960 	bl	8005294 <USB_SetDevSpeed>
 8004fd4:	e003      	b.n	8004fde <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fd6:	2103      	movs	r1, #3
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f95b 	bl	8005294 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fde:	2110      	movs	r1, #16
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f8f3 	bl	80051cc <USB_FlushTxFifo>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f91f 	bl	8005234 <USB_FlushRxFifo>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005006:	461a      	mov	r2, r3
 8005008:	2300      	movs	r3, #0
 800500a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005012:	461a      	mov	r2, r3
 8005014:	2300      	movs	r3, #0
 8005016:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501e:	461a      	mov	r2, r3
 8005020:	2300      	movs	r3, #0
 8005022:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005024:	2300      	movs	r3, #0
 8005026:	613b      	str	r3, [r7, #16]
 8005028:	e043      	b.n	80050b2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4413      	add	r3, r2
 8005032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800503c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005040:	d118      	bne.n	8005074 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10a      	bne.n	800505e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005054:	461a      	mov	r2, r3
 8005056:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	e013      	b.n	8005086 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506a:	461a      	mov	r2, r3
 800506c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	e008      	b.n	8005086 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005080:	461a      	mov	r2, r3
 8005082:	2300      	movs	r3, #0
 8005084:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005092:	461a      	mov	r2, r3
 8005094:	2300      	movs	r3, #0
 8005096:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a4:	461a      	mov	r2, r3
 80050a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	3301      	adds	r3, #1
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d3b7      	bcc.n	800502a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050ba:	2300      	movs	r3, #0
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	e043      	b.n	8005148 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050d6:	d118      	bne.n	800510a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10a      	bne.n	80050f4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ea:	461a      	mov	r2, r3
 80050ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	e013      	b.n	800511c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005100:	461a      	mov	r2, r3
 8005102:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	e008      	b.n	800511c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005116:	461a      	mov	r2, r3
 8005118:	2300      	movs	r3, #0
 800511a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005128:	461a      	mov	r2, r3
 800512a:	2300      	movs	r3, #0
 800512c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513a:	461a      	mov	r2, r3
 800513c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005140:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	3301      	adds	r3, #1
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	429a      	cmp	r2, r3
 800514e:	d3b7      	bcc.n	80050c0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800515e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005162:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005170:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	2b00      	cmp	r3, #0
 8005176:	d105      	bne.n	8005184 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	f043 0210 	orr.w	r2, r3, #16
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699a      	ldr	r2, [r3, #24]
 8005188:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <USB_DevInit+0x2c4>)
 800518a:	4313      	orrs	r3, r2
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f043 0208 	orr.w	r2, r3, #8
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d107      	bne.n	80051b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051b0:	f043 0304 	orr.w	r3, r3, #4
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051c4:	b004      	add	sp, #16
 80051c6:	4770      	bx	lr
 80051c8:	803c3800 	.word	0x803c3800

080051cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3301      	adds	r3, #1
 80051de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4a13      	ldr	r2, [pc, #76]	; (8005230 <USB_FlushTxFifo+0x64>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d901      	bls.n	80051ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e01b      	b.n	8005224 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	daf2      	bge.n	80051da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	019b      	lsls	r3, r3, #6
 80051fc:	f043 0220 	orr.w	r2, r3, #32
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3301      	adds	r3, #1
 8005208:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4a08      	ldr	r2, [pc, #32]	; (8005230 <USB_FlushTxFifo+0x64>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d901      	bls.n	8005216 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e006      	b.n	8005224 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b20      	cmp	r3, #32
 8005220:	d0f0      	beq.n	8005204 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	00030d40 	.word	0x00030d40

08005234 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3301      	adds	r3, #1
 8005244:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4a11      	ldr	r2, [pc, #68]	; (8005290 <USB_FlushRxFifo+0x5c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e018      	b.n	8005284 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	daf2      	bge.n	8005240 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2210      	movs	r2, #16
 8005262:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3301      	adds	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4a08      	ldr	r2, [pc, #32]	; (8005290 <USB_FlushRxFifo+0x5c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d901      	bls.n	8005276 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e006      	b.n	8005284 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0310 	and.w	r3, r3, #16
 800527e:	2b10      	cmp	r3, #16
 8005280:	d0f0      	beq.n	8005264 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	00030d40 	.word	0x00030d40

08005294 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	68f9      	ldr	r1, [r7, #12]
 80052b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052b4:	4313      	orrs	r3, r2
 80052b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b087      	sub	sp, #28
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0306 	and.w	r3, r3, #6
 80052de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d102      	bne.n	80052ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80052e6:	2300      	movs	r3, #0
 80052e8:	75fb      	strb	r3, [r7, #23]
 80052ea:	e00a      	b.n	8005302 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d002      	beq.n	80052f8 <USB_GetDevSpeed+0x32>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b06      	cmp	r3, #6
 80052f6:	d102      	bne.n	80052fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80052f8:	2302      	movs	r3, #2
 80052fa:	75fb      	strb	r3, [r7, #23]
 80052fc:	e001      	b.n	8005302 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80052fe:	230f      	movs	r3, #15
 8005300:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005302:	7dfb      	ldrb	r3, [r7, #23]
}
 8005304:	4618      	mov	r0, r3
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	785b      	ldrb	r3, [r3, #1]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d13a      	bne.n	80053a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	2101      	movs	r1, #1
 800533e:	fa01 f303 	lsl.w	r3, r1, r3
 8005342:	b29b      	uxth	r3, r3
 8005344:	68f9      	ldr	r1, [r7, #12]
 8005346:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800534a:	4313      	orrs	r3, r2
 800534c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d155      	bne.n	8005410 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	791b      	ldrb	r3, [r3, #4]
 800537e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005380:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	059b      	lsls	r3, r3, #22
 8005386:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005388:	4313      	orrs	r3, r2
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800539a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e036      	b.n	8005410 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a8:	69da      	ldr	r2, [r3, #28]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	2101      	movs	r1, #1
 80053b4:	fa01 f303 	lsl.w	r3, r1, r3
 80053b8:	041b      	lsls	r3, r3, #16
 80053ba:	68f9      	ldr	r1, [r7, #12]
 80053bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053c0:	4313      	orrs	r3, r2
 80053c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d11a      	bne.n	8005410 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	791b      	ldrb	r3, [r3, #4]
 80053f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053f6:	430b      	orrs	r3, r1
 80053f8:	4313      	orrs	r3, r2
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	0151      	lsls	r1, r2, #5
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	440a      	add	r2, r1
 8005402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800540a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
	...

08005420 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d161      	bne.n	8005500 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800544e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005452:	d11f      	bne.n	8005494 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	440a      	add	r2, r1
 800546a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005472:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800548e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005492:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	2101      	movs	r1, #1
 80054a6:	fa01 f303 	lsl.w	r3, r1, r3
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	43db      	mvns	r3, r3
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054b4:	4013      	ands	r3, r2
 80054b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054be:	69da      	ldr	r2, [r3, #28]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	f003 030f 	and.w	r3, r3, #15
 80054c8:	2101      	movs	r1, #1
 80054ca:	fa01 f303 	lsl.w	r3, r1, r3
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	43db      	mvns	r3, r3
 80054d2:	68f9      	ldr	r1, [r7, #12]
 80054d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054d8:	4013      	ands	r3, r2
 80054da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	0159      	lsls	r1, r3, #5
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	440b      	add	r3, r1
 80054f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f6:	4619      	mov	r1, r3
 80054f8:	4b35      	ldr	r3, [pc, #212]	; (80055d0 <USB_DeactivateEndpoint+0x1b0>)
 80054fa:	4013      	ands	r3, r2
 80054fc:	600b      	str	r3, [r1, #0]
 80054fe:	e060      	b.n	80055c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005516:	d11f      	bne.n	8005558 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	0151      	lsls	r1, r2, #5
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	440a      	add	r2, r1
 800552e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005532:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005536:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	0151      	lsls	r1, r2, #5
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	440a      	add	r2, r1
 800554e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005552:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005556:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	2101      	movs	r1, #1
 800556a:	fa01 f303 	lsl.w	r3, r1, r3
 800556e:	041b      	lsls	r3, r3, #16
 8005570:	43db      	mvns	r3, r3
 8005572:	68f9      	ldr	r1, [r7, #12]
 8005574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005578:	4013      	ands	r3, r2
 800557a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f003 030f 	and.w	r3, r3, #15
 800558c:	2101      	movs	r1, #1
 800558e:	fa01 f303 	lsl.w	r3, r1, r3
 8005592:	041b      	lsls	r3, r3, #16
 8005594:	43db      	mvns	r3, r3
 8005596:	68f9      	ldr	r1, [r7, #12]
 8005598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800559c:	4013      	ands	r3, r2
 800559e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	0159      	lsls	r1, r3, #5
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	440b      	add	r3, r1
 80055b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ba:	4619      	mov	r1, r3
 80055bc:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <USB_DeactivateEndpoint+0x1b4>)
 80055be:	4013      	ands	r3, r2
 80055c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	ec337800 	.word	0xec337800
 80055d4:	eff37800 	.word	0xeff37800

080055d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08a      	sub	sp, #40	; 0x28
 80055dc:	af02      	add	r7, sp, #8
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	4613      	mov	r3, r2
 80055e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	785b      	ldrb	r3, [r3, #1]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	f040 815c 	bne.w	80058b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d132      	bne.n	8005668 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005620:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005624:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	0151      	lsls	r1, r2, #5
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	440a      	add	r2, r1
 800563c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005640:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005644:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	0151      	lsls	r1, r2, #5
 8005658:	69fa      	ldr	r2, [r7, #28]
 800565a:	440a      	add	r2, r1
 800565c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005660:	0cdb      	lsrs	r3, r3, #19
 8005662:	04db      	lsls	r3, r3, #19
 8005664:	6113      	str	r3, [r2, #16]
 8005666:	e074      	b.n	8005752 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	0151      	lsls	r1, r2, #5
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	440a      	add	r2, r1
 800567e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005682:	0cdb      	lsrs	r3, r3, #19
 8005684:	04db      	lsls	r3, r3, #19
 8005686:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	0151      	lsls	r1, r2, #5
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	440a      	add	r2, r1
 800569e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	6999      	ldr	r1, [r3, #24]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	440b      	add	r3, r1
 80056c4:	1e59      	subs	r1, r3, #1
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80056ce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056d0:	4b9d      	ldr	r3, [pc, #628]	; (8005948 <USB_EPStartXfer+0x370>)
 80056d2:	400b      	ands	r3, r1
 80056d4:	69b9      	ldr	r1, [r7, #24]
 80056d6:	0148      	lsls	r0, r1, #5
 80056d8:	69f9      	ldr	r1, [r7, #28]
 80056da:	4401      	add	r1, r0
 80056dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056e0:	4313      	orrs	r3, r2
 80056e2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f0:	691a      	ldr	r2, [r3, #16]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056fa:	69b9      	ldr	r1, [r7, #24]
 80056fc:	0148      	lsls	r0, r1, #5
 80056fe:	69f9      	ldr	r1, [r7, #28]
 8005700:	4401      	add	r1, r0
 8005702:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005706:	4313      	orrs	r3, r2
 8005708:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	791b      	ldrb	r3, [r3, #4]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d11f      	bne.n	8005752 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	0151      	lsls	r1, r2, #5
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	440a      	add	r2, r1
 8005728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800572c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005730:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	0151      	lsls	r1, r2, #5
 8005744:	69fa      	ldr	r2, [r7, #28]
 8005746:	440a      	add	r2, r1
 8005748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800574c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005750:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d14b      	bne.n	80057f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d009      	beq.n	8005774 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576c:	461a      	mov	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	791b      	ldrb	r3, [r3, #4]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d128      	bne.n	80057ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d110      	bne.n	80057ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	0151      	lsls	r1, r2, #5
 800579e:	69fa      	ldr	r2, [r7, #28]
 80057a0:	440a      	add	r2, r1
 80057a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	e00f      	b.n	80057ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	0151      	lsls	r1, r2, #5
 80057c0:	69fa      	ldr	r2, [r7, #28]
 80057c2:	440a      	add	r2, r1
 80057c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	0151      	lsls	r1, r2, #5
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	440a      	add	r2, r1
 80057e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	e133      	b.n	8005a58 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	0151      	lsls	r1, r2, #5
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	440a      	add	r2, r1
 8005806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800580a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800580e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	791b      	ldrb	r3, [r3, #4]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d015      	beq.n	8005844 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 811b 	beq.w	8005a58 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	2101      	movs	r1, #1
 8005834:	fa01 f303 	lsl.w	r3, r1, r3
 8005838:	69f9      	ldr	r1, [r7, #28]
 800583a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800583e:	4313      	orrs	r3, r2
 8005840:	634b      	str	r3, [r1, #52]	; 0x34
 8005842:	e109      	b.n	8005a58 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005850:	2b00      	cmp	r3, #0
 8005852:	d110      	bne.n	8005876 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	0151      	lsls	r1, r2, #5
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	440a      	add	r2, r1
 800586a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800586e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	e00f      	b.n	8005896 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	0151      	lsls	r1, r2, #5
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	440a      	add	r2, r1
 800588c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005894:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	6919      	ldr	r1, [r3, #16]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	781a      	ldrb	r2, [r3, #0]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	b298      	uxth	r0, r3
 80058a4:	79fb      	ldrb	r3, [r7, #7]
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	4603      	mov	r3, r0
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 fade 	bl	8005e6c <USB_WritePacket>
 80058b0:	e0d2      	b.n	8005a58 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	0151      	lsls	r1, r2, #5
 80058c4:	69fa      	ldr	r2, [r7, #28]
 80058c6:	440a      	add	r2, r1
 80058c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058cc:	0cdb      	lsrs	r3, r3, #19
 80058ce:	04db      	lsls	r3, r3, #19
 80058d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d126      	bne.n	800594c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005914:	69b9      	ldr	r1, [r7, #24]
 8005916:	0148      	lsls	r0, r1, #5
 8005918:	69f9      	ldr	r1, [r7, #28]
 800591a:	4401      	add	r1, r0
 800591c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005920:	4313      	orrs	r3, r2
 8005922:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	0151      	lsls	r1, r2, #5
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	440a      	add	r2, r1
 800593a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800593e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005942:	6113      	str	r3, [r2, #16]
 8005944:	e03a      	b.n	80059bc <USB_EPStartXfer+0x3e4>
 8005946:	bf00      	nop
 8005948:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	699a      	ldr	r2, [r3, #24]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	4413      	add	r3, r2
 8005956:	1e5a      	subs	r2, r3, #1
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005960:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	8afa      	ldrh	r2, [r7, #22]
 8005968:	fb03 f202 	mul.w	r2, r3, r2
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597c:	691a      	ldr	r2, [r3, #16]
 800597e:	8afb      	ldrh	r3, [r7, #22]
 8005980:	04d9      	lsls	r1, r3, #19
 8005982:	4b38      	ldr	r3, [pc, #224]	; (8005a64 <USB_EPStartXfer+0x48c>)
 8005984:	400b      	ands	r3, r1
 8005986:	69b9      	ldr	r1, [r7, #24]
 8005988:	0148      	lsls	r0, r1, #5
 800598a:	69f9      	ldr	r1, [r7, #28]
 800598c:	4401      	add	r1, r0
 800598e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005992:	4313      	orrs	r3, r2
 8005994:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ac:	69b9      	ldr	r1, [r7, #24]
 80059ae:	0148      	lsls	r0, r1, #5
 80059b0:	69f9      	ldr	r1, [r7, #28]
 80059b2:	4401      	add	r1, r0
 80059b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059b8:	4313      	orrs	r3, r2
 80059ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d10d      	bne.n	80059de <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d009      	beq.n	80059de <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	6919      	ldr	r1, [r3, #16]
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059da:	460a      	mov	r2, r1
 80059dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	791b      	ldrb	r3, [r3, #4]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d128      	bne.n	8005a38 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d110      	bne.n	8005a18 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	e00f      	b.n	8005a38 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	0151      	lsls	r1, r2, #5
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	440a      	add	r2, r1
 8005a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	0151      	lsls	r1, r2, #5
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	440a      	add	r2, r1
 8005a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3720      	adds	r7, #32
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	1ff80000 	.word	0x1ff80000

08005a68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	785b      	ldrb	r3, [r3, #1]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	f040 80ce 	bne.w	8005c26 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d132      	bne.n	8005af8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ab0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ab4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	0151      	lsls	r1, r2, #5
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	440a      	add	r2, r1
 8005acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ad4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	0151      	lsls	r1, r2, #5
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	440a      	add	r2, r1
 8005aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af0:	0cdb      	lsrs	r3, r3, #19
 8005af2:	04db      	lsls	r3, r3, #19
 8005af4:	6113      	str	r3, [r2, #16]
 8005af6:	e04e      	b.n	8005b96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b12:	0cdb      	lsrs	r3, r3, #19
 8005b14:	04db      	lsls	r3, r3, #19
 8005b16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b3a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	699a      	ldr	r2, [r3, #24]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d903      	bls.n	8005b50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	0151      	lsls	r1, r2, #5
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	440a      	add	r2, r1
 8005b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	691a      	ldr	r2, [r3, #16]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b86:	6939      	ldr	r1, [r7, #16]
 8005b88:	0148      	lsls	r0, r1, #5
 8005b8a:	6979      	ldr	r1, [r7, #20]
 8005b8c:	4401      	add	r1, r0
 8005b8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b92:	4313      	orrs	r3, r2
 8005b94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d11e      	bne.n	8005bda <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d009      	beq.n	8005bb8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	e097      	b.n	8005d0a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bf8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 8083 	beq.w	8005d0a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	2101      	movs	r1, #1
 8005c16:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1a:	6979      	ldr	r1, [r7, #20]
 8005c1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c20:	4313      	orrs	r3, r2
 8005c22:	634b      	str	r3, [r1, #52]	; 0x34
 8005c24:	e071      	b.n	8005d0a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c40:	0cdb      	lsrs	r3, r3, #19
 8005c42:	04db      	lsls	r3, r3, #19
 8005c44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ca0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cb8:	6939      	ldr	r1, [r7, #16]
 8005cba:	0148      	lsls	r0, r1, #5
 8005cbc:	6979      	ldr	r1, [r7, #20]
 8005cbe:	4401      	add	r1, r0
 8005cc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d10d      	bne.n	8005cea <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d009      	beq.n	8005cea <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	6919      	ldr	r1, [r3, #16]
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce6:	460a      	mov	r2, r1
 8005ce8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	0151      	lsls	r1, r2, #5
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	440a      	add	r2, r1
 8005d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	785b      	ldrb	r3, [r3, #1]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d14a      	bne.n	8005dcc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d4e:	f040 8086 	bne.w	8005e5e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	7812      	ldrb	r2, [r2, #0]
 8005d66:	0151      	lsls	r1, r2, #5
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d74:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	7812      	ldrb	r2, [r2, #0]
 8005d8a:	0151      	lsls	r1, r2, #5
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	440a      	add	r2, r1
 8005d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d902      	bls.n	8005db0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	75fb      	strb	r3, [r7, #23]
          break;
 8005dae:	e056      	b.n	8005e5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dc8:	d0e7      	beq.n	8005d9a <USB_EPStopXfer+0x82>
 8005dca:	e048      	b.n	8005e5e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005de4:	d13b      	bne.n	8005e5e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	7812      	ldrb	r2, [r2, #0]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e08:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	7812      	ldrb	r2, [r2, #0]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3301      	adds	r3, #1
 8005e32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d902      	bls.n	8005e44 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	75fb      	strb	r3, [r7, #23]
          break;
 8005e42:	e00c      	b.n	8005e5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e5c:	d0e7      	beq.n	8005e2e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b089      	sub	sp, #36	; 0x24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	4611      	mov	r1, r2
 8005e78:	461a      	mov	r2, r3
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	71fb      	strb	r3, [r7, #7]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d123      	bne.n	8005eda <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e92:	88bb      	ldrh	r3, [r7, #4]
 8005e94:	3303      	adds	r3, #3
 8005e96:	089b      	lsrs	r3, r3, #2
 8005e98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	e018      	b.n	8005ed2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ea0:	79fb      	ldrb	r3, [r7, #7]
 8005ea2:	031a      	lsls	r2, r3, #12
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eac:	461a      	mov	r2, r3
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	61bb      	str	r3, [r7, #24]
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d3e2      	bcc.n	8005ea0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3724      	adds	r7, #36	; 0x24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b08b      	sub	sp, #44	; 0x2c
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005efe:	88fb      	ldrh	r3, [r7, #6]
 8005f00:	089b      	lsrs	r3, r3, #2
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	f003 0303 	and.w	r3, r3, #3
 8005f0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f0e:	2300      	movs	r3, #0
 8005f10:	623b      	str	r3, [r7, #32]
 8005f12:	e014      	b.n	8005f3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	3301      	adds	r3, #1
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	3301      	adds	r3, #1
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	3301      	adds	r3, #1
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	3301      	adds	r3, #1
 8005f36:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	623b      	str	r3, [r7, #32]
 8005f3e:	6a3a      	ldr	r2, [r7, #32]
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d3e6      	bcc.n	8005f14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f46:	8bfb      	ldrh	r3, [r7, #30]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01e      	beq.n	8005f8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f56:	461a      	mov	r2, r3
 8005f58:	f107 0310 	add.w	r3, r7, #16
 8005f5c:	6812      	ldr	r2, [r2, #0]
 8005f5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	701a      	strb	r2, [r3, #0]
      i++;
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	3301      	adds	r3, #1
 8005f76:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f7e:	8bfb      	ldrh	r3, [r7, #30]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f84:	8bfb      	ldrh	r3, [r7, #30]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1ea      	bne.n	8005f60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	372c      	adds	r7, #44	; 0x2c
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	785b      	ldrb	r3, [r3, #1]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d12c      	bne.n	800600e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	db12      	blt.n	8005fec <USB_EPSetStall+0x54>
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00f      	beq.n	8005fec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	0151      	lsls	r1, r2, #5
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	440a      	add	r2, r1
 8005fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	0151      	lsls	r1, r2, #5
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	440a      	add	r2, r1
 8006002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006006:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	e02b      	b.n	8006066 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	4413      	add	r3, r2
 8006016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	db12      	blt.n	8006046 <USB_EPSetStall+0xae>
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00f      	beq.n	8006046 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4413      	add	r3, r2
 800602e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	0151      	lsls	r1, r2, #5
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	440a      	add	r2, r1
 800603c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006040:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006044:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	0151      	lsls	r1, r2, #5
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	440a      	add	r2, r1
 800605c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006060:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006064:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	785b      	ldrb	r3, [r3, #1]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d128      	bne.n	80060e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	0151      	lsls	r1, r2, #5
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	440a      	add	r2, r1
 80060a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	791b      	ldrb	r3, [r3, #4]
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d003      	beq.n	80060c0 <USB_EPClearStall+0x4c>
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	791b      	ldrb	r3, [r3, #4]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d138      	bne.n	8006132 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	0151      	lsls	r1, r2, #5
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	440a      	add	r2, r1
 80060d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060de:	6013      	str	r3, [r2, #0]
 80060e0:	e027      	b.n	8006132 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	0151      	lsls	r1, r2, #5
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	440a      	add	r2, r1
 80060f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006100:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	791b      	ldrb	r3, [r3, #4]
 8006106:	2b03      	cmp	r3, #3
 8006108:	d003      	beq.n	8006112 <USB_EPClearStall+0x9e>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	791b      	ldrb	r3, [r3, #4]
 800610e:	2b02      	cmp	r3, #2
 8006110:	d10f      	bne.n	8006132 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	440a      	add	r2, r1
 8006128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800612c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006130:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800615e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006162:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006174:	68f9      	ldr	r1, [r7, #12]
 8006176:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800617a:	4313      	orrs	r3, r2
 800617c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061a6:	f023 0303 	bic.w	r3, r3, #3
 80061aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061ba:	f023 0302 	bic.w	r3, r3, #2
 80061be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b085      	sub	sp, #20
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061e8:	f023 0303 	bic.w	r3, r3, #3
 80061ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061fc:	f043 0302 	orr.w	r3, r3, #2
 8006200:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	4013      	ands	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006228:	68fb      	ldr	r3, [r7, #12]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006236:	b480      	push	{r7}
 8006238:	b085      	sub	sp, #20
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	4013      	ands	r3, r2
 8006258:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	0c1b      	lsrs	r3, r3, #16
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800626a:	b480      	push	{r7}
 800626c:	b085      	sub	sp, #20
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	4013      	ands	r3, r2
 800628c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	b29b      	uxth	r3, r3
}
 8006292:	4618      	mov	r0, r3
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800629e:	b480      	push	{r7}
 80062a0:	b085      	sub	sp, #20
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	460b      	mov	r3, r1
 80062a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80062ae:	78fb      	ldrb	r3, [r7, #3]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	4013      	ands	r3, r2
 80062ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062cc:	68bb      	ldr	r3, [r7, #8]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062da:	b480      	push	{r7}
 80062dc:	b087      	sub	sp, #28
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
 80062e2:	460b      	mov	r3, r1
 80062e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80062fe:	78fb      	ldrb	r3, [r7, #3]
 8006300:	f003 030f 	and.w	r3, r3, #15
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	fa22 f303 	lsr.w	r3, r2, r3
 800630a:	01db      	lsls	r3, r3, #7
 800630c:	b2db      	uxtb	r3, r3
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	4313      	orrs	r3, r2
 8006312:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4013      	ands	r3, r2
 8006326:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006328:	68bb      	ldr	r3, [r7, #8]
}
 800632a:	4618      	mov	r0, r3
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	f003 0301 	and.w	r3, r3, #1
}
 8006346:	4618      	mov	r0, r3
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006352:	b480      	push	{r7}
 8006354:	b085      	sub	sp, #20
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800636c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006370:	f023 0307 	bic.w	r3, r3, #7
 8006374:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006388:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	460b      	mov	r3, r1
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	333c      	adds	r3, #60	; 0x3c
 80063ae:	3304      	adds	r3, #4
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	4a26      	ldr	r2, [pc, #152]	; (8006450 <USB_EP0_OutStart+0xb8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d90a      	bls.n	80063d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063cc:	d101      	bne.n	80063d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	e037      	b.n	8006442 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d8:	461a      	mov	r2, r3
 80063da:	2300      	movs	r3, #0
 80063dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006400:	f043 0318 	orr.w	r3, r3, #24
 8006404:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006414:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006418:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800641a:	7afb      	ldrb	r3, [r7, #11]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d10f      	bne.n	8006440 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006426:	461a      	mov	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800643a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800643e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	4f54300a 	.word	0x4f54300a

08006454 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3301      	adds	r3, #1
 8006464:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4a13      	ldr	r2, [pc, #76]	; (80064b8 <USB_CoreReset+0x64>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d901      	bls.n	8006472 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e01b      	b.n	80064aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	daf2      	bge.n	8006460 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	f043 0201 	orr.w	r2, r3, #1
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3301      	adds	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4a09      	ldr	r2, [pc, #36]	; (80064b8 <USB_CoreReset+0x64>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d901      	bls.n	800649c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e006      	b.n	80064aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d0f0      	beq.n	800648a <USB_CoreReset+0x36>

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	00030d40 	.word	0x00030d40

080064bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80064c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80064cc:	f002 fc1e 	bl	8008d0c <USBD_static_malloc>
 80064d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d109      	bne.n	80064ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	32b0      	adds	r2, #176	; 0xb0
 80064e2:	2100      	movs	r1, #0
 80064e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80064e8:	2302      	movs	r3, #2
 80064ea:	e0d4      	b.n	8006696 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80064ec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80064f0:	2100      	movs	r1, #0
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f002 fc72 	bl	8008ddc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	32b0      	adds	r2, #176	; 0xb0
 8006502:	68f9      	ldr	r1, [r7, #12]
 8006504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	32b0      	adds	r2, #176	; 0xb0
 8006512:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	7c1b      	ldrb	r3, [r3, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d138      	bne.n	8006596 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006524:	4b5e      	ldr	r3, [pc, #376]	; (80066a0 <USBD_CDC_Init+0x1e4>)
 8006526:	7819      	ldrb	r1, [r3, #0]
 8006528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800652c:	2202      	movs	r2, #2
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f002 fac9 	bl	8008ac6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006534:	4b5a      	ldr	r3, [pc, #360]	; (80066a0 <USBD_CDC_Init+0x1e4>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	f003 020f 	and.w	r2, r3, #15
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	4613      	mov	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	440b      	add	r3, r1
 8006548:	3324      	adds	r3, #36	; 0x24
 800654a:	2201      	movs	r2, #1
 800654c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800654e:	4b55      	ldr	r3, [pc, #340]	; (80066a4 <USBD_CDC_Init+0x1e8>)
 8006550:	7819      	ldrb	r1, [r3, #0]
 8006552:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006556:	2202      	movs	r2, #2
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f002 fab4 	bl	8008ac6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800655e:	4b51      	ldr	r3, [pc, #324]	; (80066a4 <USBD_CDC_Init+0x1e8>)
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	f003 020f 	and.w	r2, r3, #15
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	4613      	mov	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	440b      	add	r3, r1
 8006572:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006576:	2201      	movs	r2, #1
 8006578:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800657a:	4b4b      	ldr	r3, [pc, #300]	; (80066a8 <USBD_CDC_Init+0x1ec>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	f003 020f 	and.w	r2, r3, #15
 8006582:	6879      	ldr	r1, [r7, #4]
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	440b      	add	r3, r1
 800658e:	3326      	adds	r3, #38	; 0x26
 8006590:	2210      	movs	r2, #16
 8006592:	801a      	strh	r2, [r3, #0]
 8006594:	e035      	b.n	8006602 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006596:	4b42      	ldr	r3, [pc, #264]	; (80066a0 <USBD_CDC_Init+0x1e4>)
 8006598:	7819      	ldrb	r1, [r3, #0]
 800659a:	2340      	movs	r3, #64	; 0x40
 800659c:	2202      	movs	r2, #2
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f002 fa91 	bl	8008ac6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80065a4:	4b3e      	ldr	r3, [pc, #248]	; (80066a0 <USBD_CDC_Init+0x1e4>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	f003 020f 	and.w	r2, r3, #15
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	440b      	add	r3, r1
 80065b8:	3324      	adds	r3, #36	; 0x24
 80065ba:	2201      	movs	r2, #1
 80065bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80065be:	4b39      	ldr	r3, [pc, #228]	; (80066a4 <USBD_CDC_Init+0x1e8>)
 80065c0:	7819      	ldrb	r1, [r3, #0]
 80065c2:	2340      	movs	r3, #64	; 0x40
 80065c4:	2202      	movs	r2, #2
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f002 fa7d 	bl	8008ac6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065cc:	4b35      	ldr	r3, [pc, #212]	; (80066a4 <USBD_CDC_Init+0x1e8>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	f003 020f 	and.w	r2, r3, #15
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	4613      	mov	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	440b      	add	r3, r1
 80065e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065e4:	2201      	movs	r2, #1
 80065e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065e8:	4b2f      	ldr	r3, [pc, #188]	; (80066a8 <USBD_CDC_Init+0x1ec>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f003 020f 	and.w	r2, r3, #15
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	4613      	mov	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	440b      	add	r3, r1
 80065fc:	3326      	adds	r3, #38	; 0x26
 80065fe:	2210      	movs	r2, #16
 8006600:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006602:	4b29      	ldr	r3, [pc, #164]	; (80066a8 <USBD_CDC_Init+0x1ec>)
 8006604:	7819      	ldrb	r1, [r3, #0]
 8006606:	2308      	movs	r3, #8
 8006608:	2203      	movs	r2, #3
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f002 fa5b 	bl	8008ac6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006610:	4b25      	ldr	r3, [pc, #148]	; (80066a8 <USBD_CDC_Init+0x1ec>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	f003 020f 	and.w	r2, r3, #15
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	4613      	mov	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	440b      	add	r3, r1
 8006624:	3324      	adds	r3, #36	; 0x24
 8006626:	2201      	movs	r2, #1
 8006628:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	33b0      	adds	r3, #176	; 0xb0
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006660:	2302      	movs	r3, #2
 8006662:	e018      	b.n	8006696 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	7c1b      	ldrb	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800666c:	4b0d      	ldr	r3, [pc, #52]	; (80066a4 <USBD_CDC_Init+0x1e8>)
 800666e:	7819      	ldrb	r1, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f002 fb12 	bl	8008ca4 <USBD_LL_PrepareReceive>
 8006680:	e008      	b.n	8006694 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006682:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <USBD_CDC_Init+0x1e8>)
 8006684:	7819      	ldrb	r1, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800668c:	2340      	movs	r3, #64	; 0x40
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f002 fb08 	bl	8008ca4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	200000a7 	.word	0x200000a7
 80066a4:	200000a8 	.word	0x200000a8
 80066a8:	200000a9 	.word	0x200000a9

080066ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80066b8:	4b3a      	ldr	r3, [pc, #232]	; (80067a4 <USBD_CDC_DeInit+0xf8>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f002 fa27 	bl	8008b12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80066c4:	4b37      	ldr	r3, [pc, #220]	; (80067a4 <USBD_CDC_DeInit+0xf8>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	f003 020f 	and.w	r2, r3, #15
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	4613      	mov	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	440b      	add	r3, r1
 80066d8:	3324      	adds	r3, #36	; 0x24
 80066da:	2200      	movs	r2, #0
 80066dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80066de:	4b32      	ldr	r3, [pc, #200]	; (80067a8 <USBD_CDC_DeInit+0xfc>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	4619      	mov	r1, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f002 fa14 	bl	8008b12 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80066ea:	4b2f      	ldr	r3, [pc, #188]	; (80067a8 <USBD_CDC_DeInit+0xfc>)
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	f003 020f 	and.w	r2, r3, #15
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	4613      	mov	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006702:	2200      	movs	r2, #0
 8006704:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006706:	4b29      	ldr	r3, [pc, #164]	; (80067ac <USBD_CDC_DeInit+0x100>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f002 fa00 	bl	8008b12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006712:	4b26      	ldr	r3, [pc, #152]	; (80067ac <USBD_CDC_DeInit+0x100>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	f003 020f 	and.w	r2, r3, #15
 800671a:	6879      	ldr	r1, [r7, #4]
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	440b      	add	r3, r1
 8006726:	3324      	adds	r3, #36	; 0x24
 8006728:	2200      	movs	r2, #0
 800672a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800672c:	4b1f      	ldr	r3, [pc, #124]	; (80067ac <USBD_CDC_DeInit+0x100>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	f003 020f 	and.w	r2, r3, #15
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	4613      	mov	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	440b      	add	r3, r1
 8006740:	3326      	adds	r3, #38	; 0x26
 8006742:	2200      	movs	r2, #0
 8006744:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	32b0      	adds	r2, #176	; 0xb0
 8006750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d01f      	beq.n	8006798 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	33b0      	adds	r3, #176	; 0xb0
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	32b0      	adds	r2, #176	; 0xb0
 8006776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677a:	4618      	mov	r0, r3
 800677c:	f002 fad4 	bl	8008d28 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	32b0      	adds	r2, #176	; 0xb0
 800678a:	2100      	movs	r1, #0
 800678c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	200000a7 	.word	0x200000a7
 80067a8:	200000a8 	.word	0x200000a8
 80067ac:	200000a9 	.word	0x200000a9

080067b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	32b0      	adds	r2, #176	; 0xb0
 80067c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80067dc:	2303      	movs	r3, #3
 80067de:	e0bf      	b.n	8006960 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d050      	beq.n	800688e <USBD_CDC_Setup+0xde>
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	f040 80af 	bne.w	8006950 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	88db      	ldrh	r3, [r3, #6]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d03a      	beq.n	8006870 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	b25b      	sxtb	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	da1b      	bge.n	800683c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	33b0      	adds	r3, #176	; 0xb0
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800681a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	88d2      	ldrh	r2, [r2, #6]
 8006820:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	88db      	ldrh	r3, [r3, #6]
 8006826:	2b07      	cmp	r3, #7
 8006828:	bf28      	it	cs
 800682a:	2307      	movcs	r3, #7
 800682c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	89fa      	ldrh	r2, [r7, #14]
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 fd43 	bl	80082c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800683a:	e090      	b.n	800695e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	785a      	ldrb	r2, [r3, #1]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	88db      	ldrh	r3, [r3, #6]
 800684a:	2b3f      	cmp	r3, #63	; 0x3f
 800684c:	d803      	bhi.n	8006856 <USBD_CDC_Setup+0xa6>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	88db      	ldrh	r3, [r3, #6]
 8006852:	b2da      	uxtb	r2, r3
 8006854:	e000      	b.n	8006858 <USBD_CDC_Setup+0xa8>
 8006856:	2240      	movs	r2, #64	; 0x40
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800685e:	6939      	ldr	r1, [r7, #16]
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006866:	461a      	mov	r2, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 fd55 	bl	8008318 <USBD_CtlPrepareRx>
      break;
 800686e:	e076      	b.n	800695e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	33b0      	adds	r3, #176	; 0xb0
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	7850      	ldrb	r0, [r2, #1]
 8006886:	2200      	movs	r2, #0
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	4798      	blx	r3
      break;
 800688c:	e067      	b.n	800695e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	785b      	ldrb	r3, [r3, #1]
 8006892:	2b0b      	cmp	r3, #11
 8006894:	d851      	bhi.n	800693a <USBD_CDC_Setup+0x18a>
 8006896:	a201      	add	r2, pc, #4	; (adr r2, 800689c <USBD_CDC_Setup+0xec>)
 8006898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689c:	080068cd 	.word	0x080068cd
 80068a0:	08006949 	.word	0x08006949
 80068a4:	0800693b 	.word	0x0800693b
 80068a8:	0800693b 	.word	0x0800693b
 80068ac:	0800693b 	.word	0x0800693b
 80068b0:	0800693b 	.word	0x0800693b
 80068b4:	0800693b 	.word	0x0800693b
 80068b8:	0800693b 	.word	0x0800693b
 80068bc:	0800693b 	.word	0x0800693b
 80068c0:	0800693b 	.word	0x0800693b
 80068c4:	080068f7 	.word	0x080068f7
 80068c8:	08006921 	.word	0x08006921
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b03      	cmp	r3, #3
 80068d6:	d107      	bne.n	80068e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80068d8:	f107 030a 	add.w	r3, r7, #10
 80068dc:	2202      	movs	r2, #2
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 fced 	bl	80082c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068e6:	e032      	b.n	800694e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 fc77 	bl	80081de <USBD_CtlError>
            ret = USBD_FAIL;
 80068f0:	2303      	movs	r3, #3
 80068f2:	75fb      	strb	r3, [r7, #23]
          break;
 80068f4:	e02b      	b.n	800694e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d107      	bne.n	8006912 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006902:	f107 030d 	add.w	r3, r7, #13
 8006906:	2201      	movs	r2, #1
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 fcd8 	bl	80082c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006910:	e01d      	b.n	800694e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f001 fc62 	bl	80081de <USBD_CtlError>
            ret = USBD_FAIL;
 800691a:	2303      	movs	r3, #3
 800691c:	75fb      	strb	r3, [r7, #23]
          break;
 800691e:	e016      	b.n	800694e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b03      	cmp	r3, #3
 800692a:	d00f      	beq.n	800694c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f001 fc55 	bl	80081de <USBD_CtlError>
            ret = USBD_FAIL;
 8006934:	2303      	movs	r3, #3
 8006936:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006938:	e008      	b.n	800694c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 fc4e 	bl	80081de <USBD_CtlError>
          ret = USBD_FAIL;
 8006942:	2303      	movs	r3, #3
 8006944:	75fb      	strb	r3, [r7, #23]
          break;
 8006946:	e002      	b.n	800694e <USBD_CDC_Setup+0x19e>
          break;
 8006948:	bf00      	nop
 800694a:	e008      	b.n	800695e <USBD_CDC_Setup+0x1ae>
          break;
 800694c:	bf00      	nop
      }
      break;
 800694e:	e006      	b.n	800695e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f001 fc43 	bl	80081de <USBD_CtlError>
      ret = USBD_FAIL;
 8006958:	2303      	movs	r3, #3
 800695a:	75fb      	strb	r3, [r7, #23]
      break;
 800695c:	bf00      	nop
  }

  return (uint8_t)ret;
 800695e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800697a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	32b0      	adds	r2, #176	; 0xb0
 8006986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800698e:	2303      	movs	r3, #3
 8006990:	e065      	b.n	8006a5e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	32b0      	adds	r2, #176	; 0xb0
 800699c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80069a2:	78fb      	ldrb	r3, [r7, #3]
 80069a4:	f003 020f 	and.w	r2, r3, #15
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	440b      	add	r3, r1
 80069b4:	3318      	adds	r3, #24
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d02f      	beq.n	8006a1c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80069bc:	78fb      	ldrb	r3, [r7, #3]
 80069be:	f003 020f 	and.w	r2, r3, #15
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	440b      	add	r3, r1
 80069ce:	3318      	adds	r3, #24
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	78fb      	ldrb	r3, [r7, #3]
 80069d4:	f003 010f 	and.w	r1, r3, #15
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	460b      	mov	r3, r1
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	440b      	add	r3, r1
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4403      	add	r3, r0
 80069e4:	3348      	adds	r3, #72	; 0x48
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d112      	bne.n	8006a1c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80069f6:	78fb      	ldrb	r3, [r7, #3]
 80069f8:	f003 020f 	and.w	r2, r3, #15
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	4613      	mov	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	440b      	add	r3, r1
 8006a08:	3318      	adds	r3, #24
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a0e:	78f9      	ldrb	r1, [r7, #3]
 8006a10:	2300      	movs	r3, #0
 8006a12:	2200      	movs	r2, #0
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f002 f924 	bl	8008c62 <USBD_LL_Transmit>
 8006a1a:	e01f      	b.n	8006a5c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	33b0      	adds	r3, #176	; 0xb0
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d010      	beq.n	8006a5c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	33b0      	adds	r3, #176	; 0xb0
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006a58:	78fa      	ldrb	r2, [r7, #3]
 8006a5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b084      	sub	sp, #16
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	460b      	mov	r3, r1
 8006a70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	32b0      	adds	r2, #176	; 0xb0
 8006a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	32b0      	adds	r2, #176	; 0xb0
 8006a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e01a      	b.n	8006ace <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f002 f922 	bl	8008ce6 <USBD_LL_GetRxDataSize>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	33b0      	adds	r3, #176	; 0xb0
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006ac8:	4611      	mov	r1, r2
 8006aca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	32b0      	adds	r2, #176	; 0xb0
 8006ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e025      	b.n	8006b44 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	33b0      	adds	r3, #176	; 0xb0
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01a      	beq.n	8006b42 <USBD_CDC_EP0_RxReady+0x6c>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b12:	2bff      	cmp	r3, #255	; 0xff
 8006b14:	d015      	beq.n	8006b42 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	33b0      	adds	r3, #176	; 0xb0
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006b2e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b36:	b292      	uxth	r2, r2
 8006b38:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	22ff      	movs	r2, #255	; 0xff
 8006b3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b54:	2182      	movs	r1, #130	; 0x82
 8006b56:	4818      	ldr	r0, [pc, #96]	; (8006bb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b58:	f000 fd09 	bl	800756e <USBD_GetEpDesc>
 8006b5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b5e:	2101      	movs	r1, #1
 8006b60:	4815      	ldr	r0, [pc, #84]	; (8006bb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b62:	f000 fd04 	bl	800756e <USBD_GetEpDesc>
 8006b66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b68:	2181      	movs	r1, #129	; 0x81
 8006b6a:	4813      	ldr	r0, [pc, #76]	; (8006bb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b6c:	f000 fcff 	bl	800756e <USBD_GetEpDesc>
 8006b70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	2210      	movs	r2, #16
 8006b7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d006      	beq.n	8006b92 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b8c:	711a      	strb	r2, [r3, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d006      	beq.n	8006ba6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ba0:	711a      	strb	r2, [r3, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2243      	movs	r2, #67	; 0x43
 8006baa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006bac:	4b02      	ldr	r3, [pc, #8]	; (8006bb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000064 	.word	0x20000064

08006bbc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bc4:	2182      	movs	r1, #130	; 0x82
 8006bc6:	4818      	ldr	r0, [pc, #96]	; (8006c28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bc8:	f000 fcd1 	bl	800756e <USBD_GetEpDesc>
 8006bcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bce:	2101      	movs	r1, #1
 8006bd0:	4815      	ldr	r0, [pc, #84]	; (8006c28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bd2:	f000 fccc 	bl	800756e <USBD_GetEpDesc>
 8006bd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006bd8:	2181      	movs	r1, #129	; 0x81
 8006bda:	4813      	ldr	r0, [pc, #76]	; (8006c28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bdc:	f000 fcc7 	bl	800756e <USBD_GetEpDesc>
 8006be0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	2210      	movs	r2, #16
 8006bec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d006      	beq.n	8006c02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	711a      	strb	r2, [r3, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f042 0202 	orr.w	r2, r2, #2
 8006c00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d006      	beq.n	8006c16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	711a      	strb	r2, [r3, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f042 0202 	orr.w	r2, r2, #2
 8006c14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2243      	movs	r2, #67	; 0x43
 8006c1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c1c:	4b02      	ldr	r3, [pc, #8]	; (8006c28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20000064 	.word	0x20000064

08006c2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c34:	2182      	movs	r1, #130	; 0x82
 8006c36:	4818      	ldr	r0, [pc, #96]	; (8006c98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c38:	f000 fc99 	bl	800756e <USBD_GetEpDesc>
 8006c3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c3e:	2101      	movs	r1, #1
 8006c40:	4815      	ldr	r0, [pc, #84]	; (8006c98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c42:	f000 fc94 	bl	800756e <USBD_GetEpDesc>
 8006c46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c48:	2181      	movs	r1, #129	; 0x81
 8006c4a:	4813      	ldr	r0, [pc, #76]	; (8006c98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c4c:	f000 fc8f 	bl	800756e <USBD_GetEpDesc>
 8006c50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2210      	movs	r2, #16
 8006c5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d006      	beq.n	8006c72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c6c:	711a      	strb	r2, [r3, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d006      	beq.n	8006c86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c80:	711a      	strb	r2, [r3, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2243      	movs	r2, #67	; 0x43
 8006c8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c8c:	4b02      	ldr	r3, [pc, #8]	; (8006c98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20000064 	.word	0x20000064

08006c9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	220a      	movs	r2, #10
 8006ca8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006caa:	4b03      	ldr	r3, [pc, #12]	; (8006cb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	20000020 	.word	0x20000020

08006cbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e009      	b.n	8006ce4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	33b0      	adds	r3, #176	; 0xb0
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	32b0      	adds	r2, #176	; 0xb0
 8006d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e008      	b.n	8006d28 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	32b0      	adds	r2, #176	; 0xb0
 8006d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e004      	b.n	8006d62 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
	...

08006d70 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	32b0      	adds	r2, #176	; 0xb0
 8006d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d86:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	32b0      	adds	r2, #176	; 0xb0
 8006d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e018      	b.n	8006dd0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	7c1b      	ldrb	r3, [r3, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10a      	bne.n	8006dbc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006da6:	4b0c      	ldr	r3, [pc, #48]	; (8006dd8 <USBD_CDC_ReceivePacket+0x68>)
 8006da8:	7819      	ldrb	r1, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f001 ff75 	bl	8008ca4 <USBD_LL_PrepareReceive>
 8006dba:	e008      	b.n	8006dce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006dbc:	4b06      	ldr	r3, [pc, #24]	; (8006dd8 <USBD_CDC_ReceivePacket+0x68>)
 8006dbe:	7819      	ldrb	r1, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dc6:	2340      	movs	r3, #64	; 0x40
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 ff6b 	bl	8008ca4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	200000a8 	.word	0x200000a8

08006ddc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	4613      	mov	r3, r2
 8006de8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e01f      	b.n	8006e34 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	79fa      	ldrb	r2, [r7, #7]
 8006e26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f001 fde5 	bl	80089f8 <USBD_LL_Init>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e025      	b.n	8006ea0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	32ae      	adds	r2, #174	; 0xae
 8006e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00f      	beq.n	8006e90 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	32ae      	adds	r2, #174	; 0xae
 8006e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	f107 020e 	add.w	r2, r7, #14
 8006e84:	4610      	mov	r0, r2
 8006e86:	4798      	blx	r3
 8006e88:	4602      	mov	r2, r0
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 fded 	bl	8008a90 <USBD_LL_Start>
 8006eb6:	4603      	mov	r3, r0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ec8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b084      	sub	sp, #16
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	460b      	mov	r3, r1
 8006ee0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d009      	beq.n	8006f04 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	78fa      	ldrb	r2, [r7, #3]
 8006efa:	4611      	mov	r1, r2
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
 8006f00:	4603      	mov	r3, r0
 8006f02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	78fa      	ldrb	r2, [r7, #3]
 8006f28:	4611      	mov	r1, r2
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	4798      	blx	r3
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006f34:	2303      	movs	r3, #3
 8006f36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b084      	sub	sp, #16
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f001 f908 	bl	800816a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006f68:	461a      	mov	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f76:	f003 031f 	and.w	r3, r3, #31
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d01a      	beq.n	8006fb4 <USBD_LL_SetupStage+0x72>
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d822      	bhi.n	8006fc8 <USBD_LL_SetupStage+0x86>
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <USBD_LL_SetupStage+0x4a>
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d00a      	beq.n	8006fa0 <USBD_LL_SetupStage+0x5e>
 8006f8a:	e01d      	b.n	8006fc8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fb5f 	bl	8007658 <USBD_StdDevReq>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f9e:	e020      	b.n	8006fe2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fbc7 	bl	800773c <USBD_StdItfReq>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8006fb2:	e016      	b.n	8006fe2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fc29 	bl	8007814 <USBD_StdEPReq>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc6:	e00c      	b.n	8006fe2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 fdba 	bl	8008b50 <USBD_LL_StallEP>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]
      break;
 8006fe0:	bf00      	nop
  }

  return ret;
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	607a      	str	r2, [r7, #4]
 8006ff8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006ffe:	7afb      	ldrb	r3, [r7, #11]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d16e      	bne.n	80070e2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800700a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007012:	2b03      	cmp	r3, #3
 8007014:	f040 8098 	bne.w	8007148 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	429a      	cmp	r2, r3
 8007022:	d913      	bls.n	800704c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	1ad2      	subs	r2, r2, r3
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	4293      	cmp	r3, r2
 800703c:	bf28      	it	cs
 800703e:	4613      	movcs	r3, r2
 8007040:	461a      	mov	r2, r3
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f001 f984 	bl	8008352 <USBD_CtlContinueRx>
 800704a:	e07d      	b.n	8007148 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007052:	f003 031f 	and.w	r3, r3, #31
 8007056:	2b02      	cmp	r3, #2
 8007058:	d014      	beq.n	8007084 <USBD_LL_DataOutStage+0x98>
 800705a:	2b02      	cmp	r3, #2
 800705c:	d81d      	bhi.n	800709a <USBD_LL_DataOutStage+0xae>
 800705e:	2b00      	cmp	r3, #0
 8007060:	d002      	beq.n	8007068 <USBD_LL_DataOutStage+0x7c>
 8007062:	2b01      	cmp	r3, #1
 8007064:	d003      	beq.n	800706e <USBD_LL_DataOutStage+0x82>
 8007066:	e018      	b.n	800709a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	75bb      	strb	r3, [r7, #22]
            break;
 800706c:	e018      	b.n	80070a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007074:	b2db      	uxtb	r3, r3
 8007076:	4619      	mov	r1, r3
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 fa5e 	bl	800753a <USBD_CoreFindIF>
 800707e:	4603      	mov	r3, r0
 8007080:	75bb      	strb	r3, [r7, #22]
            break;
 8007082:	e00d      	b.n	80070a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800708a:	b2db      	uxtb	r3, r3
 800708c:	4619      	mov	r1, r3
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f000 fa60 	bl	8007554 <USBD_CoreFindEP>
 8007094:	4603      	mov	r3, r0
 8007096:	75bb      	strb	r3, [r7, #22]
            break;
 8007098:	e002      	b.n	80070a0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	75bb      	strb	r3, [r7, #22]
            break;
 800709e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80070a0:	7dbb      	ldrb	r3, [r7, #22]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d119      	bne.n	80070da <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d113      	bne.n	80070da <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80070b2:	7dba      	ldrb	r2, [r7, #22]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	32ae      	adds	r2, #174	; 0xae
 80070b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00b      	beq.n	80070da <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80070c2:	7dba      	ldrb	r2, [r7, #22]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80070ca:	7dba      	ldrb	r2, [r7, #22]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	32ae      	adds	r2, #174	; 0xae
 80070d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f001 f94a 	bl	8008374 <USBD_CtlSendStatus>
 80070e0:	e032      	b.n	8007148 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80070e2:	7afb      	ldrb	r3, [r7, #11]
 80070e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	4619      	mov	r1, r3
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 fa31 	bl	8007554 <USBD_CoreFindEP>
 80070f2:	4603      	mov	r3, r0
 80070f4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070f6:	7dbb      	ldrb	r3, [r7, #22]
 80070f8:	2bff      	cmp	r3, #255	; 0xff
 80070fa:	d025      	beq.n	8007148 <USBD_LL_DataOutStage+0x15c>
 80070fc:	7dbb      	ldrb	r3, [r7, #22]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d122      	bne.n	8007148 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b03      	cmp	r3, #3
 800710c:	d117      	bne.n	800713e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800710e:	7dba      	ldrb	r2, [r7, #22]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	32ae      	adds	r2, #174	; 0xae
 8007114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00f      	beq.n	800713e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800711e:	7dba      	ldrb	r2, [r7, #22]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007126:	7dba      	ldrb	r2, [r7, #22]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	32ae      	adds	r2, #174	; 0xae
 800712c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	7afa      	ldrb	r2, [r7, #11]
 8007134:	4611      	mov	r1, r2
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	4798      	blx	r3
 800713a:	4603      	mov	r3, r0
 800713c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800713e:	7dfb      	ldrb	r3, [r7, #23]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007144:	7dfb      	ldrb	r3, [r7, #23]
 8007146:	e000      	b.n	800714a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b086      	sub	sp, #24
 8007156:	af00      	add	r7, sp, #0
 8007158:	60f8      	str	r0, [r7, #12]
 800715a:	460b      	mov	r3, r1
 800715c:	607a      	str	r2, [r7, #4]
 800715e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007160:	7afb      	ldrb	r3, [r7, #11]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d16f      	bne.n	8007246 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3314      	adds	r3, #20
 800716a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007172:	2b02      	cmp	r3, #2
 8007174:	d15a      	bne.n	800722c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	429a      	cmp	r2, r3
 8007180:	d914      	bls.n	80071ac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	1ad2      	subs	r2, r2, r3
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	461a      	mov	r2, r3
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f001 f8ac 	bl	80082f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800719e:	2300      	movs	r3, #0
 80071a0:	2200      	movs	r2, #0
 80071a2:	2100      	movs	r1, #0
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f001 fd7d 	bl	8008ca4 <USBD_LL_PrepareReceive>
 80071aa:	e03f      	b.n	800722c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	68da      	ldr	r2, [r3, #12]
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d11c      	bne.n	80071f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d316      	bcc.n	80071f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d20f      	bcs.n	80071f2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80071d2:	2200      	movs	r2, #0
 80071d4:	2100      	movs	r1, #0
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f001 f88d 	bl	80082f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071e4:	2300      	movs	r3, #0
 80071e6:	2200      	movs	r2, #0
 80071e8:	2100      	movs	r1, #0
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f001 fd5a 	bl	8008ca4 <USBD_LL_PrepareReceive>
 80071f0:	e01c      	b.n	800722c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d10f      	bne.n	800721e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d009      	beq.n	800721e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800721e:	2180      	movs	r1, #128	; 0x80
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f001 fc95 	bl	8008b50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f001 f8b7 	bl	800839a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d03a      	beq.n	80072ac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f7ff fe42 	bl	8006ec0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007244:	e032      	b.n	80072ac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007246:	7afb      	ldrb	r3, [r7, #11]
 8007248:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800724c:	b2db      	uxtb	r3, r3
 800724e:	4619      	mov	r1, r3
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 f97f 	bl	8007554 <USBD_CoreFindEP>
 8007256:	4603      	mov	r3, r0
 8007258:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800725a:	7dfb      	ldrb	r3, [r7, #23]
 800725c:	2bff      	cmp	r3, #255	; 0xff
 800725e:	d025      	beq.n	80072ac <USBD_LL_DataInStage+0x15a>
 8007260:	7dfb      	ldrb	r3, [r7, #23]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d122      	bne.n	80072ac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b03      	cmp	r3, #3
 8007270:	d11c      	bne.n	80072ac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007272:	7dfa      	ldrb	r2, [r7, #23]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	32ae      	adds	r2, #174	; 0xae
 8007278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d014      	beq.n	80072ac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007282:	7dfa      	ldrb	r2, [r7, #23]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800728a:	7dfa      	ldrb	r2, [r7, #23]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	32ae      	adds	r2, #174	; 0xae
 8007290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	7afa      	ldrb	r2, [r7, #11]
 8007298:	4611      	mov	r1, r2
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	4798      	blx	r3
 800729e:	4603      	mov	r3, r0
 80072a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80072a2:	7dbb      	ldrb	r3, [r7, #22]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80072a8:	7dbb      	ldrb	r3, [r7, #22]
 80072aa:	e000      	b.n	80072ae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d014      	beq.n	800731c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00e      	beq.n	800731c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	6852      	ldr	r2, [r2, #4]
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	4611      	mov	r1, r2
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	4798      	blx	r3
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007318:	2303      	movs	r3, #3
 800731a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800731c:	2340      	movs	r3, #64	; 0x40
 800731e:	2200      	movs	r2, #0
 8007320:	2100      	movs	r1, #0
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f001 fbcf 	bl	8008ac6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2240      	movs	r2, #64	; 0x40
 8007334:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007338:	2340      	movs	r3, #64	; 0x40
 800733a:	2200      	movs	r2, #0
 800733c:	2180      	movs	r1, #128	; 0x80
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 fbc1 	bl	8008ac6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2240      	movs	r2, #64	; 0x40
 800734e:	621a      	str	r2, [r3, #32]

  return ret;
 8007350:	7bfb      	ldrb	r3, [r7, #15]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800735a:	b480      	push	{r7}
 800735c:	b083      	sub	sp, #12
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	460b      	mov	r3, r1
 8007364:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	78fa      	ldrb	r2, [r7, #3]
 800736a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007388:	b2da      	uxtb	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2204      	movs	r2, #4
 8007394:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d106      	bne.n	80073c8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b082      	sub	sp, #8
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d110      	bne.n	800740c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00b      	beq.n	800740c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073fa:	69db      	ldr	r3, [r3, #28]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d005      	beq.n	800740c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b082      	sub	sp, #8
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	460b      	mov	r3, r1
 8007420:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	32ae      	adds	r2, #174	; 0xae
 800742c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007434:	2303      	movs	r3, #3
 8007436:	e01c      	b.n	8007472 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b03      	cmp	r3, #3
 8007442:	d115      	bne.n	8007470 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	32ae      	adds	r2, #174	; 0xae
 800744e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007452:	6a1b      	ldr	r3, [r3, #32]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00b      	beq.n	8007470 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	32ae      	adds	r2, #174	; 0xae
 8007462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	78fa      	ldrb	r2, [r7, #3]
 800746a:	4611      	mov	r1, r2
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b082      	sub	sp, #8
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	460b      	mov	r3, r1
 8007484:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	32ae      	adds	r2, #174	; 0xae
 8007490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d101      	bne.n	800749c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007498:	2303      	movs	r3, #3
 800749a:	e01c      	b.n	80074d6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d115      	bne.n	80074d4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	32ae      	adds	r2, #174	; 0xae
 80074b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00b      	beq.n	80074d4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	32ae      	adds	r2, #174	; 0xae
 80074c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	78fa      	ldrb	r2, [r7, #3]
 80074ce:	4611      	mov	r1, r2
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00e      	beq.n	8007530 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6852      	ldr	r2, [r2, #4]
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	4611      	mov	r1, r2
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	4798      	blx	r3
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800752c:	2303      	movs	r3, #3
 800752e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007530:	7bfb      	ldrb	r3, [r7, #15]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	460b      	mov	r3, r1
 8007544:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007546:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007560:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007562:	4618      	mov	r0, r3
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b086      	sub	sp, #24
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	460b      	mov	r3, r1
 8007578:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007582:	2300      	movs	r3, #0
 8007584:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	885b      	ldrh	r3, [r3, #2]
 800758a:	b29a      	uxth	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	b29b      	uxth	r3, r3
 8007592:	429a      	cmp	r2, r3
 8007594:	d920      	bls.n	80075d8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	b29b      	uxth	r3, r3
 800759c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800759e:	e013      	b.n	80075c8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80075a0:	f107 030a 	add.w	r3, r7, #10
 80075a4:	4619      	mov	r1, r3
 80075a6:	6978      	ldr	r0, [r7, #20]
 80075a8:	f000 f81b 	bl	80075e2 <USBD_GetNextDesc>
 80075ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	785b      	ldrb	r3, [r3, #1]
 80075b2:	2b05      	cmp	r3, #5
 80075b4:	d108      	bne.n	80075c8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	789b      	ldrb	r3, [r3, #2]
 80075be:	78fa      	ldrb	r2, [r7, #3]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d008      	beq.n	80075d6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80075c4:	2300      	movs	r3, #0
 80075c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	885b      	ldrh	r3, [r3, #2]
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	897b      	ldrh	r3, [r7, #10]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d8e5      	bhi.n	80075a0 <USBD_GetEpDesc+0x32>
 80075d4:	e000      	b.n	80075d8 <USBD_GetEpDesc+0x6a>
          break;
 80075d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80075d8:	693b      	ldr	r3, [r7, #16]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3718      	adds	r7, #24
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b085      	sub	sp, #20
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	881a      	ldrh	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	4413      	add	r3, r2
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4413      	add	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800760e:	68fb      	ldr	r3, [r7, #12]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	3301      	adds	r3, #1
 8007632:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800763a:	8a3b      	ldrh	r3, [r7, #16]
 800763c:	021b      	lsls	r3, r3, #8
 800763e:	b21a      	sxth	r2, r3
 8007640:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007644:	4313      	orrs	r3, r2
 8007646:	b21b      	sxth	r3, r3
 8007648:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800764a:	89fb      	ldrh	r3, [r7, #14]
}
 800764c:	4618      	mov	r0, r3
 800764e:	371c      	adds	r7, #28
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800766e:	2b40      	cmp	r3, #64	; 0x40
 8007670:	d005      	beq.n	800767e <USBD_StdDevReq+0x26>
 8007672:	2b40      	cmp	r3, #64	; 0x40
 8007674:	d857      	bhi.n	8007726 <USBD_StdDevReq+0xce>
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00f      	beq.n	800769a <USBD_StdDevReq+0x42>
 800767a:	2b20      	cmp	r3, #32
 800767c:	d153      	bne.n	8007726 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	32ae      	adds	r2, #174	; 0xae
 8007688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	4798      	blx	r3
 8007694:	4603      	mov	r3, r0
 8007696:	73fb      	strb	r3, [r7, #15]
      break;
 8007698:	e04a      	b.n	8007730 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	785b      	ldrb	r3, [r3, #1]
 800769e:	2b09      	cmp	r3, #9
 80076a0:	d83b      	bhi.n	800771a <USBD_StdDevReq+0xc2>
 80076a2:	a201      	add	r2, pc, #4	; (adr r2, 80076a8 <USBD_StdDevReq+0x50>)
 80076a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a8:	080076fd 	.word	0x080076fd
 80076ac:	08007711 	.word	0x08007711
 80076b0:	0800771b 	.word	0x0800771b
 80076b4:	08007707 	.word	0x08007707
 80076b8:	0800771b 	.word	0x0800771b
 80076bc:	080076db 	.word	0x080076db
 80076c0:	080076d1 	.word	0x080076d1
 80076c4:	0800771b 	.word	0x0800771b
 80076c8:	080076f3 	.word	0x080076f3
 80076cc:	080076e5 	.word	0x080076e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fa3c 	bl	8007b50 <USBD_GetDescriptor>
          break;
 80076d8:	e024      	b.n	8007724 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fba1 	bl	8007e24 <USBD_SetAddress>
          break;
 80076e2:	e01f      	b.n	8007724 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fbe0 	bl	8007eac <USBD_SetConfig>
 80076ec:	4603      	mov	r3, r0
 80076ee:	73fb      	strb	r3, [r7, #15]
          break;
 80076f0:	e018      	b.n	8007724 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fc83 	bl	8008000 <USBD_GetConfig>
          break;
 80076fa:	e013      	b.n	8007724 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fcb4 	bl	800806c <USBD_GetStatus>
          break;
 8007704:	e00e      	b.n	8007724 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fce3 	bl	80080d4 <USBD_SetFeature>
          break;
 800770e:	e009      	b.n	8007724 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fd07 	bl	8008126 <USBD_ClrFeature>
          break;
 8007718:	e004      	b.n	8007724 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fd5e 	bl	80081de <USBD_CtlError>
          break;
 8007722:	bf00      	nop
      }
      break;
 8007724:	e004      	b.n	8007730 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007726:	6839      	ldr	r1, [r7, #0]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fd58 	bl	80081de <USBD_CtlError>
      break;
 800772e:	bf00      	nop
  }

  return ret;
 8007730:	7bfb      	ldrb	r3, [r7, #15]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop

0800773c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007752:	2b40      	cmp	r3, #64	; 0x40
 8007754:	d005      	beq.n	8007762 <USBD_StdItfReq+0x26>
 8007756:	2b40      	cmp	r3, #64	; 0x40
 8007758:	d852      	bhi.n	8007800 <USBD_StdItfReq+0xc4>
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <USBD_StdItfReq+0x26>
 800775e:	2b20      	cmp	r3, #32
 8007760:	d14e      	bne.n	8007800 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007768:	b2db      	uxtb	r3, r3
 800776a:	3b01      	subs	r3, #1
 800776c:	2b02      	cmp	r3, #2
 800776e:	d840      	bhi.n	80077f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	889b      	ldrh	r3, [r3, #4]
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b01      	cmp	r3, #1
 8007778:	d836      	bhi.n	80077e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	889b      	ldrh	r3, [r3, #4]
 800777e:	b2db      	uxtb	r3, r3
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7ff fed9 	bl	800753a <USBD_CoreFindIF>
 8007788:	4603      	mov	r3, r0
 800778a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800778c:	7bbb      	ldrb	r3, [r7, #14]
 800778e:	2bff      	cmp	r3, #255	; 0xff
 8007790:	d01d      	beq.n	80077ce <USBD_StdItfReq+0x92>
 8007792:	7bbb      	ldrb	r3, [r7, #14]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d11a      	bne.n	80077ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007798:	7bba      	ldrb	r2, [r7, #14]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	32ae      	adds	r2, #174	; 0xae
 800779e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00f      	beq.n	80077c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80077a8:	7bba      	ldrb	r2, [r7, #14]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80077b0:	7bba      	ldrb	r2, [r7, #14]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	32ae      	adds	r2, #174	; 0xae
 80077b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	4798      	blx	r3
 80077c2:	4603      	mov	r3, r0
 80077c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80077c6:	e004      	b.n	80077d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80077c8:	2303      	movs	r3, #3
 80077ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80077cc:	e001      	b.n	80077d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80077ce:	2303      	movs	r3, #3
 80077d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	88db      	ldrh	r3, [r3, #6]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d110      	bne.n	80077fc <USBD_StdItfReq+0xc0>
 80077da:	7bfb      	ldrb	r3, [r7, #15]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10d      	bne.n	80077fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fdc7 	bl	8008374 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077e6:	e009      	b.n	80077fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fcf7 	bl	80081de <USBD_CtlError>
          break;
 80077f0:	e004      	b.n	80077fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fcf2 	bl	80081de <USBD_CtlError>
          break;
 80077fa:	e000      	b.n	80077fe <USBD_StdItfReq+0xc2>
          break;
 80077fc:	bf00      	nop
      }
      break;
 80077fe:	e004      	b.n	800780a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fceb 	bl	80081de <USBD_CtlError>
      break;
 8007808:	bf00      	nop
  }

  return ret;
 800780a:	7bfb      	ldrb	r3, [r7, #15]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	889b      	ldrh	r3, [r3, #4]
 8007826:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007830:	2b40      	cmp	r3, #64	; 0x40
 8007832:	d007      	beq.n	8007844 <USBD_StdEPReq+0x30>
 8007834:	2b40      	cmp	r3, #64	; 0x40
 8007836:	f200 817f 	bhi.w	8007b38 <USBD_StdEPReq+0x324>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d02a      	beq.n	8007894 <USBD_StdEPReq+0x80>
 800783e:	2b20      	cmp	r3, #32
 8007840:	f040 817a 	bne.w	8007b38 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7ff fe83 	bl	8007554 <USBD_CoreFindEP>
 800784e:	4603      	mov	r3, r0
 8007850:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007852:	7b7b      	ldrb	r3, [r7, #13]
 8007854:	2bff      	cmp	r3, #255	; 0xff
 8007856:	f000 8174 	beq.w	8007b42 <USBD_StdEPReq+0x32e>
 800785a:	7b7b      	ldrb	r3, [r7, #13]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f040 8170 	bne.w	8007b42 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007862:	7b7a      	ldrb	r2, [r7, #13]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800786a:	7b7a      	ldrb	r2, [r7, #13]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	32ae      	adds	r2, #174	; 0xae
 8007870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 8163 	beq.w	8007b42 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800787c:	7b7a      	ldrb	r2, [r7, #13]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	32ae      	adds	r2, #174	; 0xae
 8007882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	4798      	blx	r3
 800788e:	4603      	mov	r3, r0
 8007890:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007892:	e156      	b.n	8007b42 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	785b      	ldrb	r3, [r3, #1]
 8007898:	2b03      	cmp	r3, #3
 800789a:	d008      	beq.n	80078ae <USBD_StdEPReq+0x9a>
 800789c:	2b03      	cmp	r3, #3
 800789e:	f300 8145 	bgt.w	8007b2c <USBD_StdEPReq+0x318>
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 809b 	beq.w	80079de <USBD_StdEPReq+0x1ca>
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d03c      	beq.n	8007926 <USBD_StdEPReq+0x112>
 80078ac:	e13e      	b.n	8007b2c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d002      	beq.n	80078c0 <USBD_StdEPReq+0xac>
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d016      	beq.n	80078ec <USBD_StdEPReq+0xd8>
 80078be:	e02c      	b.n	800791a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00d      	beq.n	80078e2 <USBD_StdEPReq+0xce>
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	2b80      	cmp	r3, #128	; 0x80
 80078ca:	d00a      	beq.n	80078e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 f93d 	bl	8008b50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078d6:	2180      	movs	r1, #128	; 0x80
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f001 f939 	bl	8008b50 <USBD_LL_StallEP>
 80078de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078e0:	e020      	b.n	8007924 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fc7a 	bl	80081de <USBD_CtlError>
              break;
 80078ea:	e01b      	b.n	8007924 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	885b      	ldrh	r3, [r3, #2]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10e      	bne.n	8007912 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00b      	beq.n	8007912 <USBD_StdEPReq+0xfe>
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	2b80      	cmp	r3, #128	; 0x80
 80078fe:	d008      	beq.n	8007912 <USBD_StdEPReq+0xfe>
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	88db      	ldrh	r3, [r3, #6]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d104      	bne.n	8007912 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 f91f 	bl	8008b50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fd2e 	bl	8008374 <USBD_CtlSendStatus>

              break;
 8007918:	e004      	b.n	8007924 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fc5e 	bl	80081de <USBD_CtlError>
              break;
 8007922:	bf00      	nop
          }
          break;
 8007924:	e107      	b.n	8007b36 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d002      	beq.n	8007938 <USBD_StdEPReq+0x124>
 8007932:	2b03      	cmp	r3, #3
 8007934:	d016      	beq.n	8007964 <USBD_StdEPReq+0x150>
 8007936:	e04b      	b.n	80079d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00d      	beq.n	800795a <USBD_StdEPReq+0x146>
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b80      	cmp	r3, #128	; 0x80
 8007942:	d00a      	beq.n	800795a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 f901 	bl	8008b50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800794e:	2180      	movs	r1, #128	; 0x80
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f001 f8fd 	bl	8008b50 <USBD_LL_StallEP>
 8007956:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007958:	e040      	b.n	80079dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fc3e 	bl	80081de <USBD_CtlError>
              break;
 8007962:	e03b      	b.n	80079dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	885b      	ldrh	r3, [r3, #2]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d136      	bne.n	80079da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007972:	2b00      	cmp	r3, #0
 8007974:	d004      	beq.n	8007980 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007976:	7bbb      	ldrb	r3, [r7, #14]
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 f907 	bl	8008b8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fcf7 	bl	8008374 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff fde2 	bl	8007554 <USBD_CoreFindEP>
 8007990:	4603      	mov	r3, r0
 8007992:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007994:	7b7b      	ldrb	r3, [r7, #13]
 8007996:	2bff      	cmp	r3, #255	; 0xff
 8007998:	d01f      	beq.n	80079da <USBD_StdEPReq+0x1c6>
 800799a:	7b7b      	ldrb	r3, [r7, #13]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d11c      	bne.n	80079da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80079a0:	7b7a      	ldrb	r2, [r7, #13]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80079a8:	7b7a      	ldrb	r2, [r7, #13]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	32ae      	adds	r2, #174	; 0xae
 80079ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d010      	beq.n	80079da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079b8:	7b7a      	ldrb	r2, [r7, #13]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	32ae      	adds	r2, #174	; 0xae
 80079be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	4798      	blx	r3
 80079ca:	4603      	mov	r3, r0
 80079cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80079ce:	e004      	b.n	80079da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fc03 	bl	80081de <USBD_CtlError>
              break;
 80079d8:	e000      	b.n	80079dc <USBD_StdEPReq+0x1c8>
              break;
 80079da:	bf00      	nop
          }
          break;
 80079dc:	e0ab      	b.n	8007b36 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d002      	beq.n	80079f0 <USBD_StdEPReq+0x1dc>
 80079ea:	2b03      	cmp	r3, #3
 80079ec:	d032      	beq.n	8007a54 <USBD_StdEPReq+0x240>
 80079ee:	e097      	b.n	8007b20 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d007      	beq.n	8007a06 <USBD_StdEPReq+0x1f2>
 80079f6:	7bbb      	ldrb	r3, [r7, #14]
 80079f8:	2b80      	cmp	r3, #128	; 0x80
 80079fa:	d004      	beq.n	8007a06 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fbed 	bl	80081de <USBD_CtlError>
                break;
 8007a04:	e091      	b.n	8007b2a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	da0b      	bge.n	8007a26 <USBD_StdEPReq+0x212>
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a14:	4613      	mov	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	3310      	adds	r3, #16
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	4413      	add	r3, r2
 8007a22:	3304      	adds	r3, #4
 8007a24:	e00b      	b.n	8007a3e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	2202      	movs	r2, #2
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fc37 	bl	80082c0 <USBD_CtlSendData>
              break;
 8007a52:	e06a      	b.n	8007b2a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	da11      	bge.n	8007a80 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	f003 020f 	and.w	r2, r3, #15
 8007a62:	6879      	ldr	r1, [r7, #4]
 8007a64:	4613      	mov	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	440b      	add	r3, r1
 8007a6e:	3324      	adds	r3, #36	; 0x24
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d117      	bne.n	8007aa6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fbb0 	bl	80081de <USBD_CtlError>
                  break;
 8007a7e:	e054      	b.n	8007b2a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
 8007a82:	f003 020f 	and.w	r2, r3, #15
 8007a86:	6879      	ldr	r1, [r7, #4]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	440b      	add	r3, r1
 8007a92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a96:	881b      	ldrh	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d104      	bne.n	8007aa6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fb9d 	bl	80081de <USBD_CtlError>
                  break;
 8007aa4:	e041      	b.n	8007b2a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	da0b      	bge.n	8007ac6 <USBD_StdEPReq+0x2b2>
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	3310      	adds	r3, #16
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	e00b      	b.n	8007ade <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	4413      	add	r3, r2
 8007adc:	3304      	adds	r3, #4
 8007ade:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d002      	beq.n	8007aec <USBD_StdEPReq+0x2d8>
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	2b80      	cmp	r3, #128	; 0x80
 8007aea:	d103      	bne.n	8007af4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	e00e      	b.n	8007b12 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 f867 	bl	8008bcc <USBD_LL_IsStallEP>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d003      	beq.n	8007b0c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2201      	movs	r2, #1
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	e002      	b.n	8007b12 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	2202      	movs	r2, #2
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fbd1 	bl	80082c0 <USBD_CtlSendData>
              break;
 8007b1e:	e004      	b.n	8007b2a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fb5b 	bl	80081de <USBD_CtlError>
              break;
 8007b28:	bf00      	nop
          }
          break;
 8007b2a:	e004      	b.n	8007b36 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fb55 	bl	80081de <USBD_CtlError>
          break;
 8007b34:	bf00      	nop
      }
      break;
 8007b36:	e005      	b.n	8007b44 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fb4f 	bl	80081de <USBD_CtlError>
      break;
 8007b40:	e000      	b.n	8007b44 <USBD_StdEPReq+0x330>
      break;
 8007b42:	bf00      	nop
  }

  return ret;
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	885b      	ldrh	r3, [r3, #2]
 8007b6a:	0a1b      	lsrs	r3, r3, #8
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	2b06      	cmp	r3, #6
 8007b72:	f200 8128 	bhi.w	8007dc6 <USBD_GetDescriptor+0x276>
 8007b76:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <USBD_GetDescriptor+0x2c>)
 8007b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7c:	08007b99 	.word	0x08007b99
 8007b80:	08007bb1 	.word	0x08007bb1
 8007b84:	08007bf1 	.word	0x08007bf1
 8007b88:	08007dc7 	.word	0x08007dc7
 8007b8c:	08007dc7 	.word	0x08007dc7
 8007b90:	08007d67 	.word	0x08007d67
 8007b94:	08007d93 	.word	0x08007d93
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	7c12      	ldrb	r2, [r2, #16]
 8007ba4:	f107 0108 	add.w	r1, r7, #8
 8007ba8:	4610      	mov	r0, r2
 8007baa:	4798      	blx	r3
 8007bac:	60f8      	str	r0, [r7, #12]
      break;
 8007bae:	e112      	b.n	8007dd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	7c1b      	ldrb	r3, [r3, #16]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10d      	bne.n	8007bd4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc0:	f107 0208 	add.w	r2, r7, #8
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4798      	blx	r3
 8007bc8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	2202      	movs	r2, #2
 8007bd0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007bd2:	e100      	b.n	8007dd6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bdc:	f107 0208 	add.w	r2, r7, #8
 8007be0:	4610      	mov	r0, r2
 8007be2:	4798      	blx	r3
 8007be4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	3301      	adds	r3, #1
 8007bea:	2202      	movs	r2, #2
 8007bec:	701a      	strb	r2, [r3, #0]
      break;
 8007bee:	e0f2      	b.n	8007dd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	885b      	ldrh	r3, [r3, #2]
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b05      	cmp	r3, #5
 8007bf8:	f200 80ac 	bhi.w	8007d54 <USBD_GetDescriptor+0x204>
 8007bfc:	a201      	add	r2, pc, #4	; (adr r2, 8007c04 <USBD_GetDescriptor+0xb4>)
 8007bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c02:	bf00      	nop
 8007c04:	08007c1d 	.word	0x08007c1d
 8007c08:	08007c51 	.word	0x08007c51
 8007c0c:	08007c85 	.word	0x08007c85
 8007c10:	08007cb9 	.word	0x08007cb9
 8007c14:	08007ced 	.word	0x08007ced
 8007c18:	08007d21 	.word	0x08007d21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00b      	beq.n	8007c40 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	7c12      	ldrb	r2, [r2, #16]
 8007c34:	f107 0108 	add.w	r1, r7, #8
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4798      	blx	r3
 8007c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c3e:	e091      	b.n	8007d64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 facb 	bl	80081de <USBD_CtlError>
            err++;
 8007c48:	7afb      	ldrb	r3, [r7, #11]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c4e:	e089      	b.n	8007d64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	7c12      	ldrb	r2, [r2, #16]
 8007c68:	f107 0108 	add.w	r1, r7, #8
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	4798      	blx	r3
 8007c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c72:	e077      	b.n	8007d64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fab1 	bl	80081de <USBD_CtlError>
            err++;
 8007c7c:	7afb      	ldrb	r3, [r7, #11]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	72fb      	strb	r3, [r7, #11]
          break;
 8007c82:	e06f      	b.n	8007d64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00b      	beq.n	8007ca8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	7c12      	ldrb	r2, [r2, #16]
 8007c9c:	f107 0108 	add.w	r1, r7, #8
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4798      	blx	r3
 8007ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ca6:	e05d      	b.n	8007d64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fa97 	bl	80081de <USBD_CtlError>
            err++;
 8007cb0:	7afb      	ldrb	r3, [r7, #11]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cb6:	e055      	b.n	8007d64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00b      	beq.n	8007cdc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	7c12      	ldrb	r2, [r2, #16]
 8007cd0:	f107 0108 	add.w	r1, r7, #8
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	4798      	blx	r3
 8007cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cda:	e043      	b.n	8007d64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fa7d 	bl	80081de <USBD_CtlError>
            err++;
 8007ce4:	7afb      	ldrb	r3, [r7, #11]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cea:	e03b      	b.n	8007d64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00b      	beq.n	8007d10 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	7c12      	ldrb	r2, [r2, #16]
 8007d04:	f107 0108 	add.w	r1, r7, #8
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4798      	blx	r3
 8007d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d0e:	e029      	b.n	8007d64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fa63 	bl	80081de <USBD_CtlError>
            err++;
 8007d18:	7afb      	ldrb	r3, [r7, #11]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d1e:	e021      	b.n	8007d64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00b      	beq.n	8007d44 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	7c12      	ldrb	r2, [r2, #16]
 8007d38:	f107 0108 	add.w	r1, r7, #8
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	4798      	blx	r3
 8007d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d42:	e00f      	b.n	8007d64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fa49 	bl	80081de <USBD_CtlError>
            err++;
 8007d4c:	7afb      	ldrb	r3, [r7, #11]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	72fb      	strb	r3, [r7, #11]
          break;
 8007d52:	e007      	b.n	8007d64 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fa41 	bl	80081de <USBD_CtlError>
          err++;
 8007d5c:	7afb      	ldrb	r3, [r7, #11]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007d62:	bf00      	nop
      }
      break;
 8007d64:	e037      	b.n	8007dd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	7c1b      	ldrb	r3, [r3, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d109      	bne.n	8007d82 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d76:	f107 0208 	add.w	r2, r7, #8
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	4798      	blx	r3
 8007d7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d80:	e029      	b.n	8007dd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fa2a 	bl	80081de <USBD_CtlError>
        err++;
 8007d8a:	7afb      	ldrb	r3, [r7, #11]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d90:	e021      	b.n	8007dd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	7c1b      	ldrb	r3, [r3, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10d      	bne.n	8007db6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da2:	f107 0208 	add.w	r2, r7, #8
 8007da6:	4610      	mov	r0, r2
 8007da8:	4798      	blx	r3
 8007daa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	3301      	adds	r3, #1
 8007db0:	2207      	movs	r2, #7
 8007db2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007db4:	e00f      	b.n	8007dd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fa10 	bl	80081de <USBD_CtlError>
        err++;
 8007dbe:	7afb      	ldrb	r3, [r7, #11]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	72fb      	strb	r3, [r7, #11]
      break;
 8007dc4:	e007      	b.n	8007dd6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fa08 	bl	80081de <USBD_CtlError>
      err++;
 8007dce:	7afb      	ldrb	r3, [r7, #11]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	72fb      	strb	r3, [r7, #11]
      break;
 8007dd4:	bf00      	nop
  }

  if (err != 0U)
 8007dd6:	7afb      	ldrb	r3, [r7, #11]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d11e      	bne.n	8007e1a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	88db      	ldrh	r3, [r3, #6]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d016      	beq.n	8007e12 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007de4:	893b      	ldrh	r3, [r7, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00e      	beq.n	8007e08 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	88da      	ldrh	r2, [r3, #6]
 8007dee:	893b      	ldrh	r3, [r7, #8]
 8007df0:	4293      	cmp	r3, r2
 8007df2:	bf28      	it	cs
 8007df4:	4613      	movcs	r3, r2
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dfa:	893b      	ldrh	r3, [r7, #8]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	68f9      	ldr	r1, [r7, #12]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fa5d 	bl	80082c0 <USBD_CtlSendData>
 8007e06:	e009      	b.n	8007e1c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f9e7 	bl	80081de <USBD_CtlError>
 8007e10:	e004      	b.n	8007e1c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 faae 	bl	8008374 <USBD_CtlSendStatus>
 8007e18:	e000      	b.n	8007e1c <USBD_GetDescriptor+0x2cc>
    return;
 8007e1a:	bf00      	nop
  }
}
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop

08007e24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	889b      	ldrh	r3, [r3, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d131      	bne.n	8007e9a <USBD_SetAddress+0x76>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	88db      	ldrh	r3, [r3, #6]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d12d      	bne.n	8007e9a <USBD_SetAddress+0x76>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	885b      	ldrh	r3, [r3, #2]
 8007e42:	2b7f      	cmp	r3, #127	; 0x7f
 8007e44:	d829      	bhi.n	8007e9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	885b      	ldrh	r3, [r3, #2]
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d104      	bne.n	8007e68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f9bc 	bl	80081de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e66:	e01d      	b.n	8007ea4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	7bfa      	ldrb	r2, [r7, #15]
 8007e6c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fed5 	bl	8008c24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fa7a 	bl	8008374 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d004      	beq.n	8007e90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2202      	movs	r2, #2
 8007e8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e8e:	e009      	b.n	8007ea4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e98:	e004      	b.n	8007ea4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f99e 	bl	80081de <USBD_CtlError>
  }
}
 8007ea2:	bf00      	nop
 8007ea4:	bf00      	nop
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	885b      	ldrh	r3, [r3, #2]
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	4b4e      	ldr	r3, [pc, #312]	; (8007ffc <USBD_SetConfig+0x150>)
 8007ec2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ec4:	4b4d      	ldr	r3, [pc, #308]	; (8007ffc <USBD_SetConfig+0x150>)
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d905      	bls.n	8007ed8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f985 	bl	80081de <USBD_CtlError>
    return USBD_FAIL;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e08c      	b.n	8007ff2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d002      	beq.n	8007eea <USBD_SetConfig+0x3e>
 8007ee4:	2b03      	cmp	r3, #3
 8007ee6:	d029      	beq.n	8007f3c <USBD_SetConfig+0x90>
 8007ee8:	e075      	b.n	8007fd6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007eea:	4b44      	ldr	r3, [pc, #272]	; (8007ffc <USBD_SetConfig+0x150>)
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d020      	beq.n	8007f34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007ef2:	4b42      	ldr	r3, [pc, #264]	; (8007ffc <USBD_SetConfig+0x150>)
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007efc:	4b3f      	ldr	r3, [pc, #252]	; (8007ffc <USBD_SetConfig+0x150>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7fe ffe7 	bl	8006ed6 <USBD_SetClassConfig>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d008      	beq.n	8007f24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f962 	bl	80081de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2202      	movs	r2, #2
 8007f1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f22:	e065      	b.n	8007ff0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fa25 	bl	8008374 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2203      	movs	r2, #3
 8007f2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f32:	e05d      	b.n	8007ff0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fa1d 	bl	8008374 <USBD_CtlSendStatus>
      break;
 8007f3a:	e059      	b.n	8007ff0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007f3c:	4b2f      	ldr	r3, [pc, #188]	; (8007ffc <USBD_SetConfig+0x150>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d112      	bne.n	8007f6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007f4c:	4b2b      	ldr	r3, [pc, #172]	; (8007ffc <USBD_SetConfig+0x150>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	461a      	mov	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f56:	4b29      	ldr	r3, [pc, #164]	; (8007ffc <USBD_SetConfig+0x150>)
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7fe ffd6 	bl	8006f0e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fa06 	bl	8008374 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f68:	e042      	b.n	8007ff0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007f6a:	4b24      	ldr	r3, [pc, #144]	; (8007ffc <USBD_SetConfig+0x150>)
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d02a      	beq.n	8007fce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7fe ffc4 	bl	8006f0e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f86:	4b1d      	ldr	r3, [pc, #116]	; (8007ffc <USBD_SetConfig+0x150>)
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f90:	4b1a      	ldr	r3, [pc, #104]	; (8007ffc <USBD_SetConfig+0x150>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7fe ff9d 	bl	8006ed6 <USBD_SetClassConfig>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00f      	beq.n	8007fc6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f918 	bl	80081de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7fe ffa9 	bl	8006f0e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007fc4:	e014      	b.n	8007ff0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f9d4 	bl	8008374 <USBD_CtlSendStatus>
      break;
 8007fcc:	e010      	b.n	8007ff0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f9d0 	bl	8008374 <USBD_CtlSendStatus>
      break;
 8007fd4:	e00c      	b.n	8007ff0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f900 	bl	80081de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fde:	4b07      	ldr	r3, [pc, #28]	; (8007ffc <USBD_SetConfig+0x150>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7fe ff92 	bl	8006f0e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007fea:	2303      	movs	r3, #3
 8007fec:	73fb      	strb	r3, [r7, #15]
      break;
 8007fee:	bf00      	nop
  }

  return ret;
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	200002a8 	.word	0x200002a8

08008000 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	88db      	ldrh	r3, [r3, #6]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d004      	beq.n	800801c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f8e2 	bl	80081de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800801a:	e023      	b.n	8008064 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b02      	cmp	r3, #2
 8008026:	dc02      	bgt.n	800802e <USBD_GetConfig+0x2e>
 8008028:	2b00      	cmp	r3, #0
 800802a:	dc03      	bgt.n	8008034 <USBD_GetConfig+0x34>
 800802c:	e015      	b.n	800805a <USBD_GetConfig+0x5a>
 800802e:	2b03      	cmp	r3, #3
 8008030:	d00b      	beq.n	800804a <USBD_GetConfig+0x4a>
 8008032:	e012      	b.n	800805a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	3308      	adds	r3, #8
 800803e:	2201      	movs	r2, #1
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f93c 	bl	80082c0 <USBD_CtlSendData>
        break;
 8008048:	e00c      	b.n	8008064 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	3304      	adds	r3, #4
 800804e:	2201      	movs	r2, #1
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f934 	bl	80082c0 <USBD_CtlSendData>
        break;
 8008058:	e004      	b.n	8008064 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f8be 	bl	80081de <USBD_CtlError>
        break;
 8008062:	bf00      	nop
}
 8008064:	bf00      	nop
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800807c:	b2db      	uxtb	r3, r3
 800807e:	3b01      	subs	r3, #1
 8008080:	2b02      	cmp	r3, #2
 8008082:	d81e      	bhi.n	80080c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	88db      	ldrh	r3, [r3, #6]
 8008088:	2b02      	cmp	r3, #2
 800808a:	d004      	beq.n	8008096 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f8a5 	bl	80081de <USBD_CtlError>
        break;
 8008094:	e01a      	b.n	80080cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d005      	beq.n	80080b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	f043 0202 	orr.w	r2, r3, #2
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	330c      	adds	r3, #12
 80080b6:	2202      	movs	r2, #2
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f900 	bl	80082c0 <USBD_CtlSendData>
      break;
 80080c0:	e004      	b.n	80080cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f88a 	bl	80081de <USBD_CtlError>
      break;
 80080ca:	bf00      	nop
  }
}
 80080cc:	bf00      	nop
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	885b      	ldrh	r3, [r3, #2]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d107      	bne.n	80080f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f940 	bl	8008374 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80080f4:	e013      	b.n	800811e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	885b      	ldrh	r3, [r3, #2]
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d10b      	bne.n	8008116 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	889b      	ldrh	r3, [r3, #4]
 8008102:	0a1b      	lsrs	r3, r3, #8
 8008104:	b29b      	uxth	r3, r3
 8008106:	b2da      	uxtb	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f930 	bl	8008374 <USBD_CtlSendStatus>
}
 8008114:	e003      	b.n	800811e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f860 	bl	80081de <USBD_CtlError>
}
 800811e:	bf00      	nop
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b082      	sub	sp, #8
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008136:	b2db      	uxtb	r3, r3
 8008138:	3b01      	subs	r3, #1
 800813a:	2b02      	cmp	r3, #2
 800813c:	d80b      	bhi.n	8008156 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	885b      	ldrh	r3, [r3, #2]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d10c      	bne.n	8008160 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f910 	bl	8008374 <USBD_CtlSendStatus>
      }
      break;
 8008154:	e004      	b.n	8008160 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f840 	bl	80081de <USBD_CtlError>
      break;
 800815e:	e000      	b.n	8008162 <USBD_ClrFeature+0x3c>
      break;
 8008160:	bf00      	nop
  }
}
 8008162:	bf00      	nop
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	781a      	ldrb	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	3301      	adds	r3, #1
 8008184:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	781a      	ldrb	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	3301      	adds	r3, #1
 8008192:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f7ff fa41 	bl	800761c <SWAPBYTE>
 800819a:	4603      	mov	r3, r0
 800819c:	461a      	mov	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	3301      	adds	r3, #1
 80081a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3301      	adds	r3, #1
 80081ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f7ff fa34 	bl	800761c <SWAPBYTE>
 80081b4:	4603      	mov	r3, r0
 80081b6:	461a      	mov	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	3301      	adds	r3, #1
 80081c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	3301      	adds	r3, #1
 80081c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f7ff fa27 	bl	800761c <SWAPBYTE>
 80081ce:	4603      	mov	r3, r0
 80081d0:	461a      	mov	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	80da      	strh	r2, [r3, #6]
}
 80081d6:	bf00      	nop
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80081e8:	2180      	movs	r1, #128	; 0x80
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fcb0 	bl	8008b50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80081f0:	2100      	movs	r1, #0
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fcac 	bl	8008b50 <USBD_LL_StallEP>
}
 80081f8:	bf00      	nop
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800820c:	2300      	movs	r3, #0
 800820e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d036      	beq.n	8008284 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800821a:	6938      	ldr	r0, [r7, #16]
 800821c:	f000 f836 	bl	800828c <USBD_GetLen>
 8008220:	4603      	mov	r3, r0
 8008222:	3301      	adds	r3, #1
 8008224:	b29b      	uxth	r3, r3
 8008226:	005b      	lsls	r3, r3, #1
 8008228:	b29a      	uxth	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800822e:	7dfb      	ldrb	r3, [r7, #23]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	4413      	add	r3, r2
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	7812      	ldrb	r2, [r2, #0]
 8008238:	701a      	strb	r2, [r3, #0]
  idx++;
 800823a:	7dfb      	ldrb	r3, [r7, #23]
 800823c:	3301      	adds	r3, #1
 800823e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008240:	7dfb      	ldrb	r3, [r7, #23]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	4413      	add	r3, r2
 8008246:	2203      	movs	r2, #3
 8008248:	701a      	strb	r2, [r3, #0]
  idx++;
 800824a:	7dfb      	ldrb	r3, [r7, #23]
 800824c:	3301      	adds	r3, #1
 800824e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008250:	e013      	b.n	800827a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008252:	7dfb      	ldrb	r3, [r7, #23]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	4413      	add	r3, r2
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	7812      	ldrb	r2, [r2, #0]
 800825c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	3301      	adds	r3, #1
 8008262:	613b      	str	r3, [r7, #16]
    idx++;
 8008264:	7dfb      	ldrb	r3, [r7, #23]
 8008266:	3301      	adds	r3, #1
 8008268:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	4413      	add	r3, r2
 8008270:	2200      	movs	r2, #0
 8008272:	701a      	strb	r2, [r3, #0]
    idx++;
 8008274:	7dfb      	ldrb	r3, [r7, #23]
 8008276:	3301      	adds	r3, #1
 8008278:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1e7      	bne.n	8008252 <USBD_GetString+0x52>
 8008282:	e000      	b.n	8008286 <USBD_GetString+0x86>
    return;
 8008284:	bf00      	nop
  }
}
 8008286:	3718      	adds	r7, #24
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800829c:	e005      	b.n	80082aa <USBD_GetLen+0x1e>
  {
    len++;
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	3301      	adds	r3, #1
 80082a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	3301      	adds	r3, #1
 80082a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1f5      	bne.n	800829e <USBD_GetLen+0x12>
  }

  return len;
 80082b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3714      	adds	r7, #20
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	2100      	movs	r1, #0
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f000 fcbb 	bl	8008c62 <USBD_LL_Transmit>

  return USBD_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b084      	sub	sp, #16
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	60f8      	str	r0, [r7, #12]
 80082fe:	60b9      	str	r1, [r7, #8]
 8008300:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	2100      	movs	r1, #0
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f000 fcaa 	bl	8008c62 <USBD_LL_Transmit>

  return USBD_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2203      	movs	r2, #3
 8008328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	2100      	movs	r1, #0
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f000 fcae 	bl	8008ca4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b084      	sub	sp, #16
 8008356:	af00      	add	r7, sp, #0
 8008358:	60f8      	str	r0, [r7, #12]
 800835a:	60b9      	str	r1, [r7, #8]
 800835c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	2100      	movs	r1, #0
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f000 fc9d 	bl	8008ca4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2204      	movs	r2, #4
 8008380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008384:	2300      	movs	r3, #0
 8008386:	2200      	movs	r2, #0
 8008388:	2100      	movs	r1, #0
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fc69 	bl	8008c62 <USBD_LL_Transmit>

  return USBD_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b082      	sub	sp, #8
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2205      	movs	r2, #5
 80083a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083aa:	2300      	movs	r3, #0
 80083ac:	2200      	movs	r2, #0
 80083ae:	2100      	movs	r1, #0
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fc77 	bl	8008ca4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80083c4:	2200      	movs	r2, #0
 80083c6:	4912      	ldr	r1, [pc, #72]	; (8008410 <MX_USB_DEVICE_Init+0x50>)
 80083c8:	4812      	ldr	r0, [pc, #72]	; (8008414 <MX_USB_DEVICE_Init+0x54>)
 80083ca:	f7fe fd07 	bl	8006ddc <USBD_Init>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80083d4:	f7f8 fa34 	bl	8000840 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80083d8:	490f      	ldr	r1, [pc, #60]	; (8008418 <MX_USB_DEVICE_Init+0x58>)
 80083da:	480e      	ldr	r0, [pc, #56]	; (8008414 <MX_USB_DEVICE_Init+0x54>)
 80083dc:	f7fe fd2e 	bl	8006e3c <USBD_RegisterClass>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083e6:	f7f8 fa2b 	bl	8000840 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083ea:	490c      	ldr	r1, [pc, #48]	; (800841c <MX_USB_DEVICE_Init+0x5c>)
 80083ec:	4809      	ldr	r0, [pc, #36]	; (8008414 <MX_USB_DEVICE_Init+0x54>)
 80083ee:	f7fe fc65 	bl	8006cbc <USBD_CDC_RegisterInterface>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d001      	beq.n	80083fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083f8:	f7f8 fa22 	bl	8000840 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083fc:	4805      	ldr	r0, [pc, #20]	; (8008414 <MX_USB_DEVICE_Init+0x54>)
 80083fe:	f7fe fd53 	bl	8006ea8 <USBD_Start>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d001      	beq.n	800840c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008408:	f7f8 fa1a 	bl	8000840 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800840c:	bf00      	nop
 800840e:	bd80      	pop	{r7, pc}
 8008410:	200000c0 	.word	0x200000c0
 8008414:	200002ac 	.word	0x200002ac
 8008418:	2000002c 	.word	0x2000002c
 800841c:	200000ac 	.word	0x200000ac

08008420 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008424:	2200      	movs	r2, #0
 8008426:	4905      	ldr	r1, [pc, #20]	; (800843c <CDC_Init_FS+0x1c>)
 8008428:	4805      	ldr	r0, [pc, #20]	; (8008440 <CDC_Init_FS+0x20>)
 800842a:	f7fe fc61 	bl	8006cf0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800842e:	4905      	ldr	r1, [pc, #20]	; (8008444 <CDC_Init_FS+0x24>)
 8008430:	4803      	ldr	r0, [pc, #12]	; (8008440 <CDC_Init_FS+0x20>)
 8008432:	f7fe fc7f 	bl	8006d34 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008436:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008438:	4618      	mov	r0, r3
 800843a:	bd80      	pop	{r7, pc}
 800843c:	20000d88 	.word	0x20000d88
 8008440:	200002ac 	.word	0x200002ac
 8008444:	20000588 	.word	0x20000588

08008448 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008448:	b480      	push	{r7}
 800844a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800844c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800844e:	4618      	mov	r0, r3
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	4603      	mov	r3, r0
 8008460:	6039      	str	r1, [r7, #0]
 8008462:	71fb      	strb	r3, [r7, #7]
 8008464:	4613      	mov	r3, r2
 8008466:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008468:	79fb      	ldrb	r3, [r7, #7]
 800846a:	2b23      	cmp	r3, #35	; 0x23
 800846c:	d84a      	bhi.n	8008504 <CDC_Control_FS+0xac>
 800846e:	a201      	add	r2, pc, #4	; (adr r2, 8008474 <CDC_Control_FS+0x1c>)
 8008470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008474:	08008505 	.word	0x08008505
 8008478:	08008505 	.word	0x08008505
 800847c:	08008505 	.word	0x08008505
 8008480:	08008505 	.word	0x08008505
 8008484:	08008505 	.word	0x08008505
 8008488:	08008505 	.word	0x08008505
 800848c:	08008505 	.word	0x08008505
 8008490:	08008505 	.word	0x08008505
 8008494:	08008505 	.word	0x08008505
 8008498:	08008505 	.word	0x08008505
 800849c:	08008505 	.word	0x08008505
 80084a0:	08008505 	.word	0x08008505
 80084a4:	08008505 	.word	0x08008505
 80084a8:	08008505 	.word	0x08008505
 80084ac:	08008505 	.word	0x08008505
 80084b0:	08008505 	.word	0x08008505
 80084b4:	08008505 	.word	0x08008505
 80084b8:	08008505 	.word	0x08008505
 80084bc:	08008505 	.word	0x08008505
 80084c0:	08008505 	.word	0x08008505
 80084c4:	08008505 	.word	0x08008505
 80084c8:	08008505 	.word	0x08008505
 80084cc:	08008505 	.word	0x08008505
 80084d0:	08008505 	.word	0x08008505
 80084d4:	08008505 	.word	0x08008505
 80084d8:	08008505 	.word	0x08008505
 80084dc:	08008505 	.word	0x08008505
 80084e0:	08008505 	.word	0x08008505
 80084e4:	08008505 	.word	0x08008505
 80084e8:	08008505 	.word	0x08008505
 80084ec:	08008505 	.word	0x08008505
 80084f0:	08008505 	.word	0x08008505
 80084f4:	08008505 	.word	0x08008505
 80084f8:	08008505 	.word	0x08008505
 80084fc:	08008505 	.word	0x08008505
 8008500:	08008505 	.word	0x08008505
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008504:	bf00      	nop
  }

  return (USBD_OK);
 8008506:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	4805      	ldr	r0, [pc, #20]	; (8008538 <CDC_Receive_FS+0x24>)
 8008522:	f7fe fc07 	bl	8006d34 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008526:	4804      	ldr	r0, [pc, #16]	; (8008538 <CDC_Receive_FS+0x24>)
 8008528:	f7fe fc22 	bl	8006d70 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800852c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800852e:	4618      	mov	r0, r3
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	200002ac 	.word	0x200002ac

0800853c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	4613      	mov	r3, r2
 8008548:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800854e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008552:	4618      	mov	r0, r3
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
	...

08008560 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	4603      	mov	r3, r0
 8008568:	6039      	str	r1, [r7, #0]
 800856a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	2212      	movs	r2, #18
 8008570:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008572:	4b03      	ldr	r3, [pc, #12]	; (8008580 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008574:	4618      	mov	r0, r3
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	200000dc 	.word	0x200000dc

08008584 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	6039      	str	r1, [r7, #0]
 800858e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2204      	movs	r2, #4
 8008594:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008596:	4b03      	ldr	r3, [pc, #12]	; (80085a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008598:	4618      	mov	r0, r3
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	200000f0 	.word	0x200000f0

080085a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	6039      	str	r1, [r7, #0]
 80085b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085b4:	79fb      	ldrb	r3, [r7, #7]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d105      	bne.n	80085c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	4907      	ldr	r1, [pc, #28]	; (80085dc <USBD_FS_ProductStrDescriptor+0x34>)
 80085be:	4808      	ldr	r0, [pc, #32]	; (80085e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80085c0:	f7ff fe1e 	bl	8008200 <USBD_GetString>
 80085c4:	e004      	b.n	80085d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085c6:	683a      	ldr	r2, [r7, #0]
 80085c8:	4904      	ldr	r1, [pc, #16]	; (80085dc <USBD_FS_ProductStrDescriptor+0x34>)
 80085ca:	4805      	ldr	r0, [pc, #20]	; (80085e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80085cc:	f7ff fe18 	bl	8008200 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085d0:	4b02      	ldr	r3, [pc, #8]	; (80085dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	20001588 	.word	0x20001588
 80085e0:	08008e10 	.word	0x08008e10

080085e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	4603      	mov	r3, r0
 80085ec:	6039      	str	r1, [r7, #0]
 80085ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	4904      	ldr	r1, [pc, #16]	; (8008604 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085f4:	4804      	ldr	r0, [pc, #16]	; (8008608 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085f6:	f7ff fe03 	bl	8008200 <USBD_GetString>
  return USBD_StrDesc;
 80085fa:	4b02      	ldr	r3, [pc, #8]	; (8008604 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	20001588 	.word	0x20001588
 8008608:	08008e28 	.word	0x08008e28

0800860c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	4603      	mov	r3, r0
 8008614:	6039      	str	r1, [r7, #0]
 8008616:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	221a      	movs	r2, #26
 800861c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800861e:	f000 f843 	bl	80086a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008622:	4b02      	ldr	r3, [pc, #8]	; (800862c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008624:	4618      	mov	r0, r3
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	200000f4 	.word	0x200000f4

08008630 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	4603      	mov	r3, r0
 8008638:	6039      	str	r1, [r7, #0]
 800863a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800863c:	79fb      	ldrb	r3, [r7, #7]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d105      	bne.n	800864e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008642:	683a      	ldr	r2, [r7, #0]
 8008644:	4907      	ldr	r1, [pc, #28]	; (8008664 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008646:	4808      	ldr	r0, [pc, #32]	; (8008668 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008648:	f7ff fdda 	bl	8008200 <USBD_GetString>
 800864c:	e004      	b.n	8008658 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	4904      	ldr	r1, [pc, #16]	; (8008664 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008652:	4805      	ldr	r0, [pc, #20]	; (8008668 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008654:	f7ff fdd4 	bl	8008200 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008658:	4b02      	ldr	r3, [pc, #8]	; (8008664 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800865a:	4618      	mov	r0, r3
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	20001588 	.word	0x20001588
 8008668:	08008e3c 	.word	0x08008e3c

0800866c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	4603      	mov	r3, r0
 8008674:	6039      	str	r1, [r7, #0]
 8008676:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008678:	79fb      	ldrb	r3, [r7, #7]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d105      	bne.n	800868a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	4907      	ldr	r1, [pc, #28]	; (80086a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008682:	4808      	ldr	r0, [pc, #32]	; (80086a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008684:	f7ff fdbc 	bl	8008200 <USBD_GetString>
 8008688:	e004      	b.n	8008694 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	4904      	ldr	r1, [pc, #16]	; (80086a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800868e:	4805      	ldr	r0, [pc, #20]	; (80086a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008690:	f7ff fdb6 	bl	8008200 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008694:	4b02      	ldr	r3, [pc, #8]	; (80086a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	20001588 	.word	0x20001588
 80086a4:	08008e48 	.word	0x08008e48

080086a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086ae:	4b0f      	ldr	r3, [pc, #60]	; (80086ec <Get_SerialNum+0x44>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086b4:	4b0e      	ldr	r3, [pc, #56]	; (80086f0 <Get_SerialNum+0x48>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086ba:	4b0e      	ldr	r3, [pc, #56]	; (80086f4 <Get_SerialNum+0x4c>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4413      	add	r3, r2
 80086c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d009      	beq.n	80086e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086ce:	2208      	movs	r2, #8
 80086d0:	4909      	ldr	r1, [pc, #36]	; (80086f8 <Get_SerialNum+0x50>)
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f000 f814 	bl	8008700 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086d8:	2204      	movs	r2, #4
 80086da:	4908      	ldr	r1, [pc, #32]	; (80086fc <Get_SerialNum+0x54>)
 80086dc:	68b8      	ldr	r0, [r7, #8]
 80086de:	f000 f80f 	bl	8008700 <IntToUnicode>
  }
}
 80086e2:	bf00      	nop
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	1fff7a10 	.word	0x1fff7a10
 80086f0:	1fff7a14 	.word	0x1fff7a14
 80086f4:	1fff7a18 	.word	0x1fff7a18
 80086f8:	200000f6 	.word	0x200000f6
 80086fc:	20000106 	.word	0x20000106

08008700 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	4613      	mov	r3, r2
 800870c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008712:	2300      	movs	r3, #0
 8008714:	75fb      	strb	r3, [r7, #23]
 8008716:	e027      	b.n	8008768 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	0f1b      	lsrs	r3, r3, #28
 800871c:	2b09      	cmp	r3, #9
 800871e:	d80b      	bhi.n	8008738 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	0f1b      	lsrs	r3, r3, #28
 8008724:	b2da      	uxtb	r2, r3
 8008726:	7dfb      	ldrb	r3, [r7, #23]
 8008728:	005b      	lsls	r3, r3, #1
 800872a:	4619      	mov	r1, r3
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	440b      	add	r3, r1
 8008730:	3230      	adds	r2, #48	; 0x30
 8008732:	b2d2      	uxtb	r2, r2
 8008734:	701a      	strb	r2, [r3, #0]
 8008736:	e00a      	b.n	800874e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	0f1b      	lsrs	r3, r3, #28
 800873c:	b2da      	uxtb	r2, r3
 800873e:	7dfb      	ldrb	r3, [r7, #23]
 8008740:	005b      	lsls	r3, r3, #1
 8008742:	4619      	mov	r1, r3
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	440b      	add	r3, r1
 8008748:	3237      	adds	r2, #55	; 0x37
 800874a:	b2d2      	uxtb	r2, r2
 800874c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	011b      	lsls	r3, r3, #4
 8008752:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	005b      	lsls	r3, r3, #1
 8008758:	3301      	adds	r3, #1
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	4413      	add	r3, r2
 800875e:	2200      	movs	r2, #0
 8008760:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	3301      	adds	r3, #1
 8008766:	75fb      	strb	r3, [r7, #23]
 8008768:	7dfa      	ldrb	r2, [r7, #23]
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	429a      	cmp	r2, r3
 800876e:	d3d3      	bcc.n	8008718 <IntToUnicode+0x18>
  }
}
 8008770:	bf00      	nop
 8008772:	bf00      	nop
 8008774:	371c      	adds	r7, #28
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
	...

08008780 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b08a      	sub	sp, #40	; 0x28
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008788:	f107 0314 	add.w	r3, r7, #20
 800878c:	2200      	movs	r2, #0
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	605a      	str	r2, [r3, #4]
 8008792:	609a      	str	r2, [r3, #8]
 8008794:	60da      	str	r2, [r3, #12]
 8008796:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087a0:	d13a      	bne.n	8008818 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087a2:	2300      	movs	r3, #0
 80087a4:	613b      	str	r3, [r7, #16]
 80087a6:	4b1e      	ldr	r3, [pc, #120]	; (8008820 <HAL_PCD_MspInit+0xa0>)
 80087a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087aa:	4a1d      	ldr	r2, [pc, #116]	; (8008820 <HAL_PCD_MspInit+0xa0>)
 80087ac:	f043 0301 	orr.w	r3, r3, #1
 80087b0:	6313      	str	r3, [r2, #48]	; 0x30
 80087b2:	4b1b      	ldr	r3, [pc, #108]	; (8008820 <HAL_PCD_MspInit+0xa0>)
 80087b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	613b      	str	r3, [r7, #16]
 80087bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80087be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80087c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087c4:	2302      	movs	r3, #2
 80087c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087c8:	2300      	movs	r3, #0
 80087ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087cc:	2303      	movs	r3, #3
 80087ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80087d0:	230a      	movs	r3, #10
 80087d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087d4:	f107 0314 	add.w	r3, r7, #20
 80087d8:	4619      	mov	r1, r3
 80087da:	4812      	ldr	r0, [pc, #72]	; (8008824 <HAL_PCD_MspInit+0xa4>)
 80087dc:	f7f9 fa46 	bl	8001c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80087e0:	4b0f      	ldr	r3, [pc, #60]	; (8008820 <HAL_PCD_MspInit+0xa0>)
 80087e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e4:	4a0e      	ldr	r2, [pc, #56]	; (8008820 <HAL_PCD_MspInit+0xa0>)
 80087e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ea:	6353      	str	r3, [r2, #52]	; 0x34
 80087ec:	2300      	movs	r3, #0
 80087ee:	60fb      	str	r3, [r7, #12]
 80087f0:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <HAL_PCD_MspInit+0xa0>)
 80087f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f4:	4a0a      	ldr	r2, [pc, #40]	; (8008820 <HAL_PCD_MspInit+0xa0>)
 80087f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087fa:	6453      	str	r3, [r2, #68]	; 0x44
 80087fc:	4b08      	ldr	r3, [pc, #32]	; (8008820 <HAL_PCD_MspInit+0xa0>)
 80087fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008804:	60fb      	str	r3, [r7, #12]
 8008806:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008808:	2200      	movs	r2, #0
 800880a:	2100      	movs	r1, #0
 800880c:	2043      	movs	r0, #67	; 0x43
 800880e:	f7f8 ff0c 	bl	800162a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008812:	2043      	movs	r0, #67	; 0x43
 8008814:	f7f8 ff25 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008818:	bf00      	nop
 800881a:	3728      	adds	r7, #40	; 0x28
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	40023800 	.word	0x40023800
 8008824:	40020000 	.word	0x40020000

08008828 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800883c:	4619      	mov	r1, r3
 800883e:	4610      	mov	r0, r2
 8008840:	f7fe fb7f 	bl	8006f42 <USBD_LL_SetupStage>
}
 8008844:	bf00      	nop
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800885e:	78fa      	ldrb	r2, [r7, #3]
 8008860:	6879      	ldr	r1, [r7, #4]
 8008862:	4613      	mov	r3, r2
 8008864:	00db      	lsls	r3, r3, #3
 8008866:	4413      	add	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	440b      	add	r3, r1
 800886c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	78fb      	ldrb	r3, [r7, #3]
 8008874:	4619      	mov	r1, r3
 8008876:	f7fe fbb9 	bl	8006fec <USBD_LL_DataOutStage>
}
 800887a:	bf00      	nop
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	460b      	mov	r3, r1
 800888c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008894:	78fa      	ldrb	r2, [r7, #3]
 8008896:	6879      	ldr	r1, [r7, #4]
 8008898:	4613      	mov	r3, r2
 800889a:	00db      	lsls	r3, r3, #3
 800889c:	4413      	add	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	440b      	add	r3, r1
 80088a2:	334c      	adds	r3, #76	; 0x4c
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	78fb      	ldrb	r3, [r7, #3]
 80088a8:	4619      	mov	r1, r3
 80088aa:	f7fe fc52 	bl	8007152 <USBD_LL_DataInStage>
}
 80088ae:	bf00      	nop
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fe fd86 	bl	80073d6 <USBD_LL_SOF>
}
 80088ca:	bf00      	nop
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088da:	2301      	movs	r3, #1
 80088dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d001      	beq.n	80088ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80088e6:	f7f7 ffab 	bl	8000840 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088f0:	7bfa      	ldrb	r2, [r7, #15]
 80088f2:	4611      	mov	r1, r2
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7fe fd30 	bl	800735a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008900:	4618      	mov	r0, r3
 8008902:	f7fe fcd8 	bl	80072b6 <USBD_LL_Reset>
}
 8008906:	bf00      	nop
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
	...

08008910 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800891e:	4618      	mov	r0, r3
 8008920:	f7fe fd2b 	bl	800737a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	6812      	ldr	r2, [r2, #0]
 8008932:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008936:	f043 0301 	orr.w	r3, r3, #1
 800893a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a1b      	ldr	r3, [r3, #32]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d005      	beq.n	8008950 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008944:	4b04      	ldr	r3, [pc, #16]	; (8008958 <HAL_PCD_SuspendCallback+0x48>)
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	4a03      	ldr	r2, [pc, #12]	; (8008958 <HAL_PCD_SuspendCallback+0x48>)
 800894a:	f043 0306 	orr.w	r3, r3, #6
 800894e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008950:	bf00      	nop
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	e000ed00 	.word	0xe000ed00

0800895c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800896a:	4618      	mov	r0, r3
 800896c:	f7fe fd1b 	bl	80073a6 <USBD_LL_Resume>
}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800898a:	78fa      	ldrb	r2, [r7, #3]
 800898c:	4611      	mov	r1, r2
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe fd73 	bl	800747a <USBD_LL_IsoOUTIncomplete>
}
 8008994:	bf00      	nop
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089ae:	78fa      	ldrb	r2, [r7, #3]
 80089b0:	4611      	mov	r1, r2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe fd2f 	bl	8007416 <USBD_LL_IsoINIncomplete>
}
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fe fd85 	bl	80074de <USBD_LL_DevConnected>
}
 80089d4:	bf00      	nop
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe fd82 	bl	80074f4 <USBD_LL_DevDisconnected>
}
 80089f0:	bf00      	nop
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d13c      	bne.n	8008a82 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008a08:	4a20      	ldr	r2, [pc, #128]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a1e      	ldr	r2, [pc, #120]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a14:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a18:	4b1c      	ldr	r3, [pc, #112]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008a20:	4b1a      	ldr	r3, [pc, #104]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a22:	2204      	movs	r2, #4
 8008a24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a26:	4b19      	ldr	r3, [pc, #100]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a28:	2202      	movs	r2, #2
 8008a2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a2c:	4b17      	ldr	r3, [pc, #92]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a2e:	2200      	movs	r2, #0
 8008a30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a32:	4b16      	ldr	r3, [pc, #88]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a34:	2202      	movs	r2, #2
 8008a36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a38:	4b14      	ldr	r3, [pc, #80]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a3e:	4b13      	ldr	r3, [pc, #76]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a44:	4b11      	ldr	r3, [pc, #68]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008a4a:	4b10      	ldr	r3, [pc, #64]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a50:	4b0e      	ldr	r3, [pc, #56]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a56:	480d      	ldr	r0, [pc, #52]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a58:	f7f9 fbea 	bl	8002230 <HAL_PCD_Init>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a62:	f7f7 feed 	bl	8000840 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a66:	2180      	movs	r1, #128	; 0x80
 8008a68:	4808      	ldr	r0, [pc, #32]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a6a:	f7fa fe42 	bl	80036f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a6e:	2240      	movs	r2, #64	; 0x40
 8008a70:	2100      	movs	r1, #0
 8008a72:	4806      	ldr	r0, [pc, #24]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a74:	f7fa fdf6 	bl	8003664 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a78:	2280      	movs	r2, #128	; 0x80
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	4803      	ldr	r0, [pc, #12]	; (8008a8c <USBD_LL_Init+0x94>)
 8008a7e:	f7fa fdf1 	bl	8003664 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20001788 	.word	0x20001788

08008a90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7f9 fcdf 	bl	800246a <HAL_PCD_Start>
 8008aac:	4603      	mov	r3, r0
 8008aae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 f942 	bl	8008d3c <USBD_Get_USB_Status>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b084      	sub	sp, #16
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	4608      	mov	r0, r1
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	70fb      	strb	r3, [r7, #3]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	70bb      	strb	r3, [r7, #2]
 8008adc:	4613      	mov	r3, r2
 8008ade:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008aee:	78bb      	ldrb	r3, [r7, #2]
 8008af0:	883a      	ldrh	r2, [r7, #0]
 8008af2:	78f9      	ldrb	r1, [r7, #3]
 8008af4:	f7fa f9b0 	bl	8002e58 <HAL_PCD_EP_Open>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 f91c 	bl	8008d3c <USBD_Get_USB_Status>
 8008b04:	4603      	mov	r3, r0
 8008b06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b08:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b2c:	78fa      	ldrb	r2, [r7, #3]
 8008b2e:	4611      	mov	r1, r2
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fa f9f9 	bl	8002f28 <HAL_PCD_EP_Close>
 8008b36:	4603      	mov	r3, r0
 8008b38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 f8fd 	bl	8008d3c <USBD_Get_USB_Status>
 8008b42:	4603      	mov	r3, r0
 8008b44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b46:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b6a:	78fa      	ldrb	r2, [r7, #3]
 8008b6c:	4611      	mov	r1, r2
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fa fad1 	bl	8003116 <HAL_PCD_EP_SetStall>
 8008b74:	4603      	mov	r3, r0
 8008b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 f8de 	bl	8008d3c <USBD_Get_USB_Status>
 8008b80:	4603      	mov	r3, r0
 8008b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b084      	sub	sp, #16
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	460b      	mov	r3, r1
 8008b98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ba8:	78fa      	ldrb	r2, [r7, #3]
 8008baa:	4611      	mov	r1, r2
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7fa fb16 	bl	80031de <HAL_PCD_EP_ClrStall>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 f8bf 	bl	8008d3c <USBD_Get_USB_Status>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	da0b      	bge.n	8008c00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008be8:	78fb      	ldrb	r3, [r7, #3]
 8008bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bee:	68f9      	ldr	r1, [r7, #12]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	4413      	add	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	440b      	add	r3, r1
 8008bfa:	333e      	adds	r3, #62	; 0x3e
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	e00b      	b.n	8008c18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c00:	78fb      	ldrb	r3, [r7, #3]
 8008c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c06:	68f9      	ldr	r1, [r7, #12]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	00db      	lsls	r3, r3, #3
 8008c0c:	4413      	add	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	440b      	add	r3, r1
 8008c12:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008c16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c3e:	78fa      	ldrb	r2, [r7, #3]
 8008c40:	4611      	mov	r1, r2
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fa f8e3 	bl	8002e0e <HAL_PCD_SetAddress>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 f874 	bl	8008d3c <USBD_Get_USB_Status>
 8008c54:	4603      	mov	r3, r0
 8008c56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c58:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b086      	sub	sp, #24
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	603b      	str	r3, [r7, #0]
 8008c6e:	460b      	mov	r3, r1
 8008c70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c80:	7af9      	ldrb	r1, [r7, #11]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	f7fa f9fc 	bl	8003082 <HAL_PCD_EP_Transmit>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 f853 	bl	8008d3c <USBD_Get_USB_Status>
 8008c96:	4603      	mov	r3, r0
 8008c98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	607a      	str	r2, [r7, #4]
 8008cae:	603b      	str	r3, [r7, #0]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008cc2:	7af9      	ldrb	r1, [r7, #11]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	f7fa f978 	bl	8002fbc <HAL_PCD_EP_Receive>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 f832 	bl	8008d3c <USBD_Get_USB_Status>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cdc:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b082      	sub	sp, #8
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cf8:	78fa      	ldrb	r2, [r7, #3]
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fa f9a8 	bl	8003052 <HAL_PCD_EP_GetRxCount>
 8008d02:	4603      	mov	r3, r0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d14:	4b03      	ldr	r3, [pc, #12]	; (8008d24 <USBD_static_malloc+0x18>)
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	20001c94 	.word	0x20001c94

08008d28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]

}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d4a:	79fb      	ldrb	r3, [r7, #7]
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d817      	bhi.n	8008d80 <USBD_Get_USB_Status+0x44>
 8008d50:	a201      	add	r2, pc, #4	; (adr r2, 8008d58 <USBD_Get_USB_Status+0x1c>)
 8008d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d56:	bf00      	nop
 8008d58:	08008d69 	.word	0x08008d69
 8008d5c:	08008d6f 	.word	0x08008d6f
 8008d60:	08008d75 	.word	0x08008d75
 8008d64:	08008d7b 	.word	0x08008d7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d6c:	e00b      	b.n	8008d86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	73fb      	strb	r3, [r7, #15]
    break;
 8008d72:	e008      	b.n	8008d86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d74:	2301      	movs	r3, #1
 8008d76:	73fb      	strb	r3, [r7, #15]
    break;
 8008d78:	e005      	b.n	8008d86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d7e:	e002      	b.n	8008d86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d80:	2303      	movs	r3, #3
 8008d82:	73fb      	strb	r3, [r7, #15]
    break;
 8008d84:	bf00      	nop
  }
  return usb_status;
 8008d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3714      	adds	r7, #20
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <__libc_init_array>:
 8008d94:	b570      	push	{r4, r5, r6, lr}
 8008d96:	4d0d      	ldr	r5, [pc, #52]	; (8008dcc <__libc_init_array+0x38>)
 8008d98:	4c0d      	ldr	r4, [pc, #52]	; (8008dd0 <__libc_init_array+0x3c>)
 8008d9a:	1b64      	subs	r4, r4, r5
 8008d9c:	10a4      	asrs	r4, r4, #2
 8008d9e:	2600      	movs	r6, #0
 8008da0:	42a6      	cmp	r6, r4
 8008da2:	d109      	bne.n	8008db8 <__libc_init_array+0x24>
 8008da4:	4d0b      	ldr	r5, [pc, #44]	; (8008dd4 <__libc_init_array+0x40>)
 8008da6:	4c0c      	ldr	r4, [pc, #48]	; (8008dd8 <__libc_init_array+0x44>)
 8008da8:	f000 f820 	bl	8008dec <_init>
 8008dac:	1b64      	subs	r4, r4, r5
 8008dae:	10a4      	asrs	r4, r4, #2
 8008db0:	2600      	movs	r6, #0
 8008db2:	42a6      	cmp	r6, r4
 8008db4:	d105      	bne.n	8008dc2 <__libc_init_array+0x2e>
 8008db6:	bd70      	pop	{r4, r5, r6, pc}
 8008db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dbc:	4798      	blx	r3
 8008dbe:	3601      	adds	r6, #1
 8008dc0:	e7ee      	b.n	8008da0 <__libc_init_array+0xc>
 8008dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc6:	4798      	blx	r3
 8008dc8:	3601      	adds	r6, #1
 8008dca:	e7f2      	b.n	8008db2 <__libc_init_array+0x1e>
 8008dcc:	08009c54 	.word	0x08009c54
 8008dd0:	08009c54 	.word	0x08009c54
 8008dd4:	08009c54 	.word	0x08009c54
 8008dd8:	08009c58 	.word	0x08009c58

08008ddc <memset>:
 8008ddc:	4402      	add	r2, r0
 8008dde:	4603      	mov	r3, r0
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d100      	bne.n	8008de6 <memset+0xa>
 8008de4:	4770      	bx	lr
 8008de6:	f803 1b01 	strb.w	r1, [r3], #1
 8008dea:	e7f9      	b.n	8008de0 <memset+0x4>

08008dec <_init>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	bf00      	nop
 8008df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008df2:	bc08      	pop	{r3}
 8008df4:	469e      	mov	lr, r3
 8008df6:	4770      	bx	lr

08008df8 <_fini>:
 8008df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfa:	bf00      	nop
 8008dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dfe:	bc08      	pop	{r3}
 8008e00:	469e      	mov	lr, r3
 8008e02:	4770      	bx	lr
